<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20201.20.0326.1623                               -->
<workbook original-version='18.1' source-build='2020.1.2 (20201.20.0326.1623)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <SavingAnalyticObjects />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='New Business Growth' datatype='real' default-format='p0%' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='0.59999999999999998'>
        <calculation class='tableau' formula='0.59999999999999998' />
        <range granularity='0.01' max='1.0' min='0.0' />
      </column>
      <column caption='Churn Rate' datatype='real' default-format='p0.00%' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='0.064000000000000001'>
        <calculation class='tableau' formula='0.064000000000000001' />
        <range granularity='0.001' max='0.25' min='0.0' />
      </column>
    </datasource>
    <datasource caption='Stocks' inline='true' name='federated.0zo9ebk1skkmfl1c0h4hf1osypd8' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Stocks' name='textscan.1ft8la20s110g31aektgx0ho1uvm'>
            <connection class='textscan' directory='/Users/phuongdaingo/Documents/Tableau/Nordic Coder/Sample Data' filename='Stocks.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1ft8la20s110g31aektgx0ho1uvm' name='Stocks.csv' table='[Stocks#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='real' name='Close' ordinal='0' />
            <column datatype='string' name='Company' ordinal='1' />
            <column datatype='date' name='Date' ordinal='2' />
            <column datatype='real' name='High' ordinal='3' />
            <column datatype='real' name='Low' ordinal='4' />
            <column datatype='integer' name='Number of Records' ordinal='5' />
            <column datatype='real' name='Open' ordinal='6' />
            <column datatype='integer' name='Volume' ordinal='7' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Stocks.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Close</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Close]</local-name>
            <parent-name>[Stocks.csv]</parent-name>
            <remote-alias>Close</remote-alias>
            <ordinal>0</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Company</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Company]</local-name>
            <parent-name>[Stocks.csv]</parent-name>
            <remote-alias>Company</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[Stocks.csv]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>High</remote-name>
            <remote-type>5</remote-type>
            <local-name>[High]</local-name>
            <parent-name>[Stocks.csv]</parent-name>
            <remote-alias>High</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Low</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Low]</local-name>
            <parent-name>[Stocks.csv]</parent-name>
            <remote-alias>Low</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Number of Records</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Number of Records]</local-name>
            <parent-name>[Stocks.csv]</parent-name>
            <remote-alias>Number of Records</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Open</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Open]</local-name>
            <parent-name>[Stocks.csv]</parent-name>
            <remote-alias>Open</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Volume</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Volume]</local-name>
            <parent-name>[Stocks.csv]</parent-name>
            <remote-alias>Volume</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec' />
      <layout dim-ordering='alphabetic' dim-percentage='0.427065' measure-ordering='alphabetic' measure-percentage='0.572935' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='Orders (Sample - Superstore)' inline='true' name='federated.1dsfepz0bnjcff1cg85u60g2ae1k' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Sample - Superstore' name='excel-direct.0zprhtt0n3f07k14hqf3k1kef38r'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/phuongdaingo/Documents/Tableau/Nordic Coder/Sample Data/Sample - Superstore.xls' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.0zprhtt0n3f07k14hqf3k1kef38r' name='Orders' table='[Orders$]' type='table'>
          <columns gridOrigin='A1:U9995:no:A1:U9995:0' header='yes' outcome='6'>
            <column datatype='integer' name='Row ID' ordinal='0' />
            <column datatype='string' name='Order ID' ordinal='1' />
            <column datatype='date' name='Order Date' ordinal='2' />
            <column datatype='date' name='Ship Date' ordinal='3' />
            <column datatype='string' name='Ship Mode' ordinal='4' />
            <column datatype='string' name='Customer ID' ordinal='5' />
            <column datatype='string' name='Customer Name' ordinal='6' />
            <column datatype='string' name='Segment' ordinal='7' />
            <column datatype='string' name='Country/Region' ordinal='8' />
            <column datatype='string' name='City' ordinal='9' />
            <column datatype='string' name='State' ordinal='10' />
            <column datatype='integer' name='Postal Code' ordinal='11' />
            <column datatype='string' name='Region' ordinal='12' />
            <column datatype='string' name='Product ID' ordinal='13' />
            <column datatype='string' name='Category' ordinal='14' />
            <column datatype='string' name='Sub-Category' ordinal='15' />
            <column datatype='string' name='Product Name' ordinal='16' />
            <column datatype='real' name='Sales' ordinal='17' />
            <column datatype='integer' name='Quantity' ordinal='18' />
            <column datatype='real' name='Discount' ordinal='19' />
            <column datatype='real' name='Profit' ordinal='20' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Row ID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Row ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Row ID</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Order ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Order ID</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order Date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Order Date]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Order Date</remote-alias>
            <ordinal>2</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Date</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Ship Date]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Ship Date</remote-alias>
            <ordinal>3</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;DATE&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Mode</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Ship Mode]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Ship Mode</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Customer ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Customer ID</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Customer Name]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Customer Name</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Segment</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Segment]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Segment</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country/Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Country/Region]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Country/Region</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>130</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>130</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Postal Code</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Postal Code]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Postal Code</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product ID</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Product ID]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Product ID</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Category]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Category</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sub-Category</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Sub-Category]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Sub-Category</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Name</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Product Name]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Product Name</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sales]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Sales</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Quantity</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Quantity]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Quantity</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Discount</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Discount]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Discount</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Profit</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Profit]</local-name>
            <parent-name>[Orders]</parent-name>
            <remote-alias>Profit</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Orders]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:U9995:no:A1:U9995:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Profit Ratio' datatype='real' name='[Calculation_3626875487110770688]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Profit]) / sum([Sales])' />
      </column>
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column datatype='string' name='[Country/Region]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' datatype='integer' default-format='*00000' name='[Postal Code]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column aggregation='Sum' datatype='integer' name='[Row ID]' role='dimension' type='ordinal' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <layout dim-ordering='alphabetic' dim-percentage='0.61244' measure-ordering='alphabetic' measure-percentage='0.311005' parameter-percentage='0.076555' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
    <datasource caption='Sample - Superstore' inline='true' name='dataengine.42019.618651678240' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='Sample - Superstore' name='dataengine.42019.618651678240leaf'>
            <connection authentication='auth-none' author-locale='en_US' class='hyper' dbname='/Users/phuongdaingo/Documents/Tableau/Nordic Coder/Sample Data/Tableau - Class 7 - Sample Superstore - Basic Charts.twb Files/Data/Superstore/Sample - Superstore.hyper' default-settings='yes' port='' sslmode='' username='tableau_internal_user'>
              <calculations>
                <calculation column='[Number of Records]' formula='1' />
              </calculations>
            </connection>
          </named-connection>
        </named-connections>
        <relation connection='dataengine.42019.618651678240leaf' name='Extract' table='[Extract].[Extract]' type='table' />
        <calculations>
          <calculation column='[Number of Records]' formula='1' />
        </calculations>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>Row ID</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Row ID]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Row ID</remote-alias>
            <ordinal>0</ordinal>
            <family>Orders</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>5136</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order ID</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Order ID]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Order ID</remote-alias>
            <ordinal>1</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3095</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Order Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Order Date]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Order Date</remote-alias>
            <ordinal>2</ordinal>
            <family>Orders</family>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <approx-count>1419</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Ship Date]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Ship Date</remote-alias>
            <ordinal>3</ordinal>
            <family>Orders</family>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <approx-count>1482</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ship Mode</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Ship Mode]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Ship Mode</remote-alias>
            <ordinal>4</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer ID</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Customer ID]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Customer ID</remote-alias>
            <ordinal>5</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1134</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Customer Name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Customer Name]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Customer Name</remote-alias>
            <ordinal>6</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1134</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Segment</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Segment]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Segment</remote-alias>
            <ordinal>7</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country/Region</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country/Region]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Country/Region</remote-alias>
            <ordinal>8</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>City</remote-name>
            <remote-type>129</remote-type>
            <local-name>[City]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>City</remote-alias>
            <ordinal>9</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>580</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>State</remote-name>
            <remote-type>129</remote-type>
            <local-name>[State]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>State</remote-alias>
            <ordinal>10</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>54</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Postal Code</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Postal Code]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Postal Code</remote-alias>
            <ordinal>11</ordinal>
            <family>Orders</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>719</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Region</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Region]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Region</remote-alias>
            <ordinal>12</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product ID</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Product ID]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Product ID</remote-alias>
            <ordinal>13</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>2226</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Category]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Category</remote-alias>
            <ordinal>14</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>3</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sub-Category</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Sub-Category]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Sub-Category</remote-alias>
            <ordinal>15</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>17</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Product Name</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Product Name]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Product Name</remote-alias>
            <ordinal>16</ordinal>
            <family>Orders</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>2203</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sales</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sales]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Sales</remote-alias>
            <ordinal>17</ordinal>
            <family>Orders</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>3420</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Quantity</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Quantity]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Quantity</remote-alias>
            <ordinal>18</ordinal>
            <family>Orders</family>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>14</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Discount</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Discount]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Discount</remote-alias>
            <ordinal>19</ordinal>
            <family>Orders</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>16</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Profit</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Profit]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Profit</remote-alias>
            <ordinal>20</ordinal>
            <family>Orders</family>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <approx-count>4120</approx-count>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Person</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Person]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Person</remote-alias>
            <ordinal>21</ordinal>
            <family>People</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>4</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Returned</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Returned]</local-name>
            <parent-name>[Extract]</parent-name>
            <remote-alias>Returned</remote-alias>
            <ordinal>22</ordinal>
            <family>Returns</family>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>2</approx-count>
            <contains-null>true</contains-null>
            <collation flag='1' name='LEN_RUS_S2' />
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[dataengine.42019.618651678240].[ctd:Customer Name:qk]&quot;' value='Count of Customers' />
        </aliases>
      </column>
      <column caption='Days to Ship Actual' datatype='integer' name='[Calculation_0831103151444568]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='DATEDIFF(&apos;day&apos;,[Order Date],[Ship Date])' />
      </column>
      <column caption='Sales Forecast' datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Calculation_5421109230915137]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Sales]*(1-[Parameters].[Parameter 2])*(1+[Parameters].[Parameter 1])' />
      </column>
      <column caption='Ship Status' datatype='string' name='[Calculation_6401103171259723]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='if [Calculation_0831103151444568]&gt; [Calculation_6861103170623145] then &quot;Shipped Late&quot; &#13;&#10;elseIF [Calculation_0831103151444568]= [Calculation_6861103170623145] then &quot;Shipped On Time&quot;&#13;&#10;Else &quot;Shipped Early&quot; end' />
        <desc>
          <formatted-text>
            <run>Was shipment early, ontime or late based on ship mode</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Days to Ship Scheduled' datatype='integer' name='[Calculation_6861103170623145]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CASE  [Ship Mode]&#13;&#10;WHEN &quot;Same Day&quot; THEN 0&#13;&#10;WHEN &quot;First Class&quot; THEN 1&#13;&#10;WHEN &quot;Second Class&quot; THEN 3&#13;&#10;WHEN &quot;Standard Class&quot; THEN 6&#13;&#10;END' />
      </column>
      <column caption='Order Profitable?' datatype='boolean' name='[Calculation_9060122104947471]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='{fixed [Order ID]:sum([Profit])}&gt;0&#13;&#10;// calculates the profit at the order level' />
        <aliases>
          <alias key='false' value='Unprofitable' />
          <alias key='true' value='Profitable' />
        </aliases>
        <desc>
          <formatted-text>
            <run>A level of detail expression that calculates profitability for each Order</run>
          </formatted-text>
        </desc>
      </column>
      <column caption='Profit per Customer' datatype='real' default-format='C1033%' hidden='true' name='[Calculation_9321103144526191 1]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Profit])/countD([Customer Name])' />
      </column>
      <column caption='Sales per Customer' datatype='real' default-format='C1033%' name='[Calculation_9321103144526191]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='Sum([Sales])/countD([Customer Name])' />
      </column>
      <column caption='Profit Ratio' datatype='real' default-format='p0.0%' name='[Calculation_9921103144103743]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='sum([Profit])/sum([Sales])' />
      </column>
      <column caption='Sales above Target?' datatype='string' name='[Calculation_9951107165644870]' role='measure' type='nominal'>
        <calculation class='tableau' formula='If Sum([Sales])&gt;SUM([federated.0z0pi331stuxay1ce6y5f1yxvsw9].[Sales Target]) then &quot;Above Target&quot; else &quot;Below Target&quot; end' />
        <desc>
          <formatted-text>
            <run>Used with &quot;Sales Target&quot; data source</run>
          </formatted-text>
        </desc>
      </column>
      <column datatype='string' name='[Category]' role='dimension' type='nominal' />
      <column datatype='string' name='[City, Country/Region, State (clusters)]' parent-model='[AnalyticModel:{92b349aa-94a3-422f-b6f3-4e63668648a4}]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[City, Country/Region, State]' default='&quot;Not Clustered&quot;' new-bin='true'>
          <bin default-name='false' value='&quot;Cluster 1&quot;'>
            <value>(&quot;Aberdeen&quot;,&quot;United States&quot;,&quot;South Dakota&quot;)</value>
            <value>(&quot;Abilene&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Akron&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Albuquerque&quot;,&quot;United States&quot;,&quot;New Mexico&quot;)</value>
            <value>(&quot;Alexandria&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
            <value>(&quot;Allen&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Allentown&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
            <value>(&quot;Altoona&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
            <value>(&quot;Amarillo&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Anaheim&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Andover&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
            <value>(&quot;Ann Arbor&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Antioch&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Apopka&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Apple Valley&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Apple Valley&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
            <value>(&quot;Appleton&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
            <value>(&quot;Arlington&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Arlington Heights&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Arvada&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Asheville&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Athens&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
            <value>(&quot;Atlantic City&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Auburn&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
            <value>(&quot;Auburn&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Auburn&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Aurora&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Aurora&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Austin&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Avondale&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
            <value>(&quot;Bakersfield&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Baltimore&quot;,&quot;United States&quot;,&quot;Maryland&quot;)</value>
            <value>(&quot;Bangor&quot;,&quot;United States&quot;,&quot;Maine&quot;)</value>
            <value>(&quot;Bartlett&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;Bayonne&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Baytown&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Beaumont&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Bedford&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Belleville&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Bellevue&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Bellingham&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Bethlehem&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
            <value>(&quot;Beverly&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
            <value>(&quot;Billings&quot;,&quot;United States&quot;,&quot;Montana&quot;)</value>
            <value>(&quot;Bloomington&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Bloomington&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;Boca Raton&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Boise&quot;,&quot;United States&quot;,&quot;Idaho&quot;)</value>
            <value>(&quot;Bolingbrook&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Bossier City&quot;,&quot;United States&quot;,&quot;Louisiana&quot;)</value>
            <value>(&quot;Bowling Green&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
            <value>(&quot;Bowling Green&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Boynton Beach&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Bozeman&quot;,&quot;United States&quot;,&quot;Montana&quot;)</value>
            <value>(&quot;Bridgeton&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Bristol&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
            <value>(&quot;Bristol&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;Broken Arrow&quot;,&quot;United States&quot;,&quot;Oklahoma&quot;)</value>
            <value>(&quot;Broomfield&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Brownsville&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Bryan&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Buffalo&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Buffalo Grove&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Bullhead City&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
            <value>(&quot;Burbank&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Burlington&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
            <value>(&quot;Burlington&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Burlington&quot;,&quot;United States&quot;,&quot;Vermont&quot;)</value>
            <value>(&quot;Caldwell&quot;,&quot;United States&quot;,&quot;Idaho&quot;)</value>
            <value>(&quot;Camarillo&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Cambridge&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
            <value>(&quot;Canton&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Carlsbad&quot;,&quot;United States&quot;,&quot;New Mexico&quot;)</value>
            <value>(&quot;Carol Stream&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Carrollton&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Cary&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Cedar Hill&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Cedar Rapids&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
            <value>(&quot;Champaign&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Chandler&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
            <value>(&quot;Chapel Hill&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Charlotte&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Charlottesville&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
            <value>(&quot;Chattanooga&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;Chesapeake&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
            <value>(&quot;Chester&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
            <value>(&quot;Cheyenne&quot;,&quot;United States&quot;,&quot;Wyoming&quot;)</value>
            <value>(&quot;Chicago&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Chico&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Chula Vista&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Cincinnati&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Citrus Heights&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Clarksville&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;Cleveland&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Clifton&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Clinton&quot;,&quot;United States&quot;,&quot;Maryland&quot;)</value>
            <value>(&quot;Clovis&quot;,&quot;United States&quot;,&quot;New Mexico&quot;)</value>
            <value>(&quot;Coachella&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;College Station&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Colorado Springs&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Columbia&quot;,&quot;United States&quot;,&quot;Maryland&quot;)</value>
            <value>(&quot;Columbia&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
            <value>(&quot;Columbia&quot;,&quot;United States&quot;,&quot;South Carolina&quot;)</value>
            <value>(&quot;Columbia&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;Columbus&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;Columbus&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Commerce City&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Concord&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Concord&quot;,&quot;United States&quot;,&quot;New Hampshire&quot;)</value>
            <value>(&quot;Concord&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Conroe&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Conway&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
            <value>(&quot;Coon Rapids&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
            <value>(&quot;Coppell&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Coral Gables&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Coral Springs&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Corpus Christi&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Costa Mesa&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Cottage Grove&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
            <value>(&quot;Covington&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Cranston&quot;,&quot;United States&quot;,&quot;Rhode Island&quot;)</value>
            <value>(&quot;Cuyahoga Falls&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Dallas&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Danbury&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
            <value>(&quot;Danville&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Danville&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Davis&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Daytona Beach&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Dearborn&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Dearborn Heights&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Decatur&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
            <value>(&quot;Decatur&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Deer Park&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Delray Beach&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Deltona&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Denver&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Des Moines&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
            <value>(&quot;Des Moines&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Des Plaines&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Dover&quot;,&quot;United States&quot;,&quot;Delaware&quot;)</value>
            <value>(&quot;Dover&quot;,&quot;United States&quot;,&quot;New Hampshire&quot;)</value>
            <value>(&quot;Draper&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
            <value>(&quot;Dublin&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Dublin&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Dubuque&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
            <value>(&quot;Durham&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Eagan&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
            <value>(&quot;East Orange&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;East Point&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
            <value>(&quot;Eau Claire&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
            <value>(&quot;Edinburg&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Edmond&quot;,&quot;United States&quot;,&quot;Oklahoma&quot;)</value>
            <value>(&quot;Edmonds&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;El Cajon&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;El Paso&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Elkhart&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;Elmhurst&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Elyria&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Encinitas&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Englewood&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Escondido&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Eugene&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
            <value>(&quot;Evanston&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Everett&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
            <value>(&quot;Everett&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Fairfield&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Fairfield&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
            <value>(&quot;Fairfield&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Fargo&quot;,&quot;United States&quot;,&quot;North Dakota&quot;)</value>
            <value>(&quot;Farmington&quot;,&quot;United States&quot;,&quot;New Mexico&quot;)</value>
            <value>(&quot;Fayetteville&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
            <value>(&quot;Fayetteville&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Florence&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
            <value>(&quot;Florence&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
            <value>(&quot;Florence&quot;,&quot;United States&quot;,&quot;South Carolina&quot;)</value>
            <value>(&quot;Fort Collins&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Fort Lauderdale&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Fort Worth&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Frankfort&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Franklin&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
            <value>(&quot;Franklin&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;Franklin&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
            <value>(&quot;Freeport&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Freeport&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Fremont&quot;,&quot;United States&quot;,&quot;Nebraska&quot;)</value>
            <value>(&quot;Fresno&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Frisco&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Gaithersburg&quot;,&quot;United States&quot;,&quot;Maryland&quot;)</value>
            <value>(&quot;Garden City&quot;,&quot;United States&quot;,&quot;Kansas&quot;)</value>
            <value>(&quot;Garland&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Gastonia&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Georgetown&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
            <value>(&quot;Gilbert&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
            <value>(&quot;Gladstone&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
            <value>(&quot;Glendale&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
            <value>(&quot;Glenview&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Goldsboro&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Grand Island&quot;,&quot;United States&quot;,&quot;Nebraska&quot;)</value>
            <value>(&quot;Grand Prairie&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Grand Rapids&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Grapevine&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Great Falls&quot;,&quot;United States&quot;,&quot;Montana&quot;)</value>
            <value>(&quot;Greeley&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Green Bay&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
            <value>(&quot;Greensboro&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Greenville&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Greenwood&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;Gresham&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
            <value>(&quot;Grove City&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Gulfport&quot;,&quot;United States&quot;,&quot;Mississippi&quot;)</value>
            <value>(&quot;Hackensack&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Hagerstown&quot;,&quot;United States&quot;,&quot;Maryland&quot;)</value>
            <value>(&quot;Haltom City&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Hamilton&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Hampton&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
            <value>(&quot;Harlingen&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Harrisonburg&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
            <value>(&quot;Hattiesburg&quot;,&quot;United States&quot;,&quot;Mississippi&quot;)</value>
            <value>(&quot;Helena&quot;,&quot;United States&quot;,&quot;Montana&quot;)</value>
            <value>(&quot;Hempstead&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Henderson&quot;,&quot;United States&quot;,&quot;Nevada&quot;)</value>
            <value>(&quot;Hendersonville&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;Hesperia&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Hialeah&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Hickory&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Highland Park&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Hillsboro&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
            <value>(&quot;Holland&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Hollywood&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Holyoke&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
            <value>(&quot;Homestead&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Hoover&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
            <value>(&quot;Hot Springs&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
            <value>(&quot;Houston&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Huntington Beach&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Huntsville&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
            <value>(&quot;Huntsville&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Independence&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
            <value>(&quot;Indianapolis&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;Iowa City&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
            <value>(&quot;Irving&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Jackson&quot;,&quot;United States&quot;,&quot;Mississippi&quot;)</value>
            <value>(&quot;Jackson&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;Jacksonville&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Jacksonville&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Jamestown&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Jefferson City&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
            <value>(&quot;Johnson City&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;Jonesboro&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
            <value>(&quot;Jupiter&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Keller&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Kenner&quot;,&quot;United States&quot;,&quot;Louisiana&quot;)</value>
            <value>(&quot;Kenosha&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
            <value>(&quot;Kent&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Kent&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Kirkwood&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
            <value>(&quot;Kissimmee&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Knoxville&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;La Crosse&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
            <value>(&quot;La Mesa&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;La Porte&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;La Porte&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;La Quinta&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Lafayette&quot;,&quot;United States&quot;,&quot;Louisiana&quot;)</value>
            <value>(&quot;Laguna Niguel&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Lake Charles&quot;,&quot;United States&quot;,&quot;Louisiana&quot;)</value>
            <value>(&quot;Lake Elsinore&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Lake Forest&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Lakeland&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Lakeville&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
            <value>(&quot;Lakewood&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Lakewood&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Lakewood&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Lancaster&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Lancaster&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Lancaster&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
            <value>(&quot;Lansing&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Laredo&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Las Cruces&quot;,&quot;United States&quot;,&quot;New Mexico&quot;)</value>
            <value>(&quot;Las Vegas&quot;,&quot;United States&quot;,&quot;Nevada&quot;)</value>
            <value>(&quot;Laurel&quot;,&quot;United States&quot;,&quot;Maryland&quot;)</value>
            <value>(&quot;Lawrence&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;Lawrence&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
            <value>(&quot;Lawton&quot;,&quot;United States&quot;,&quot;Oklahoma&quot;)</value>
            <value>(&quot;Layton&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
            <value>(&quot;League City&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Lebanon&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;Lehi&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
            <value>(&quot;Leominster&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
            <value>(&quot;Lewiston&quot;,&quot;United States&quot;,&quot;Idaho&quot;)</value>
            <value>(&quot;Lewiston&quot;,&quot;United States&quot;,&quot;Maine&quot;)</value>
            <value>(&quot;Lincoln Park&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Linden&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Lindenhurst&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Little Rock&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
            <value>(&quot;Littleton&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Lodi&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Logan&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
            <value>(&quot;Long Beach&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Long Beach&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Longmont&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Longview&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Lorain&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Louisville&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Louisville&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
            <value>(&quot;Loveland&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Lowell&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
            <value>(&quot;Lubbock&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Macon&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
            <value>(&quot;Madison&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
            <value>(&quot;Malden&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
            <value>(&quot;Manchester&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
            <value>(&quot;Manhattan&quot;,&quot;United States&quot;,&quot;Kansas&quot;)</value>
            <value>(&quot;Mansfield&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Manteca&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Maple Grove&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
            <value>(&quot;Margate&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Marietta&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
            <value>(&quot;Marion&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
            <value>(&quot;Marion&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Marlborough&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
            <value>(&quot;Marysville&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Mason&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Mcallen&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Medford&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
            <value>(&quot;Medina&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Melbourne&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Memphis&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;Mentor&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Meriden&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
            <value>(&quot;Meridian&quot;,&quot;United States&quot;,&quot;Idaho&quot;)</value>
            <value>(&quot;Mesa&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
            <value>(&quot;Mesquite&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Miami&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Middletown&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
            <value>(&quot;Midland&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Milford&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
            <value>(&quot;Milwaukee&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
            <value>(&quot;Miramar&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Mishawaka&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;Mission Viejo&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Missoula&quot;,&quot;United States&quot;,&quot;Montana&quot;)</value>
            <value>(&quot;Missouri City&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Mobile&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
            <value>(&quot;Modesto&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Monroe&quot;,&quot;United States&quot;,&quot;Louisiana&quot;)</value>
            <value>(&quot;Monroe&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Montebello&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Montgomery&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
            <value>(&quot;Moorhead&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
            <value>(&quot;Moreno Valley&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Morgan Hill&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Morristown&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Mount Pleasant&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Mount Pleasant&quot;,&quot;United States&quot;,&quot;South Carolina&quot;)</value>
            <value>(&quot;Mount Vernon&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Murfreesboro&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;Murray&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
            <value>(&quot;Murray&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
            <value>(&quot;Murrieta&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Muskogee&quot;,&quot;United States&quot;,&quot;Oklahoma&quot;)</value>
            <value>(&quot;Naperville&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Nashua&quot;,&quot;United States&quot;,&quot;New Hampshire&quot;)</value>
            <value>(&quot;Nashville&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;New Albany&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;New Bedford&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
            <value>(&quot;New Brunswick&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;New Castle&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;New Rochelle&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Newark&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Newport News&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
            <value>(&quot;Niagara Falls&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Noblesville&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;Norfolk&quot;,&quot;United States&quot;,&quot;Nebraska&quot;)</value>
            <value>(&quot;Normal&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Norman&quot;,&quot;United States&quot;,&quot;Oklahoma&quot;)</value>
            <value>(&quot;North Charleston&quot;,&quot;United States&quot;,&quot;South Carolina&quot;)</value>
            <value>(&quot;North Las Vegas&quot;,&quot;United States&quot;,&quot;Nevada&quot;)</value>
            <value>(&quot;North Miami&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Norwich&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
            <value>(&quot;Oak Park&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Oak Park&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Oakland&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Oceanside&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Oceanside&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Odessa&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Oklahoma City&quot;,&quot;United States&quot;,&quot;Oklahoma&quot;)</value>
            <value>(&quot;Olathe&quot;,&quot;United States&quot;,&quot;Kansas&quot;)</value>
            <value>(&quot;Olympia&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Omaha&quot;,&quot;United States&quot;,&quot;Nebraska&quot;)</value>
            <value>(&quot;Ontario&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Orange&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Orem&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
            <value>(&quot;Orland Park&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Orlando&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Ormond Beach&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Oswego&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Overland Park&quot;,&quot;United States&quot;,&quot;Kansas&quot;)</value>
            <value>(&quot;Owensboro&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
            <value>(&quot;Oxnard&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Palatine&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Palm Coast&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Park Ridge&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Parker&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Parma&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Pasadena&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Pasadena&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Pasco&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Passaic&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Paterson&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Pearland&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Pembroke Pines&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Pensacola&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Peoria&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
            <value>(&quot;Peoria&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Perth Amboy&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Pharr&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Philadelphia&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
            <value>(&quot;Phoenix&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
            <value>(&quot;Pico Rivera&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Pine Bluff&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
            <value>(&quot;Plainfield&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Plano&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Plantation&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Pleasant Grove&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
            <value>(&quot;Pocatello&quot;,&quot;United States&quot;,&quot;Idaho&quot;)</value>
            <value>(&quot;Pomona&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Pompano Beach&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Port Arthur&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Port Orange&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Port Saint Lucie&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Portage&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;Portland&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
            <value>(&quot;Provo&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
            <value>(&quot;Pueblo&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Quincy&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Quincy&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
            <value>(&quot;Raleigh&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Rancho Cucamonga&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Rapid City&quot;,&quot;United States&quot;,&quot;South Dakota&quot;)</value>
            <value>(&quot;Reading&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
            <value>(&quot;Redding&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Redlands&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Redmond&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
            <value>(&quot;Redmond&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Redondo Beach&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Redwood City&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Reno&quot;,&quot;United States&quot;,&quot;Nevada&quot;)</value>
            <value>(&quot;Renton&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Revere&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
            <value>(&quot;Richardson&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Richmond&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;Richmond&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
            <value>(&quot;Richmond&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
            <value>(&quot;Rio Rancho&quot;,&quot;United States&quot;,&quot;New Mexico&quot;)</value>
            <value>(&quot;Riverside&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Rochester&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
            <value>(&quot;Rochester&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Rochester Hills&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Rock Hill&quot;,&quot;United States&quot;,&quot;South Carolina&quot;)</value>
            <value>(&quot;Rockford&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Rockville&quot;,&quot;United States&quot;,&quot;Maryland&quot;)</value>
            <value>(&quot;Rogers&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
            <value>(&quot;Rome&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Romeoville&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Roseville&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Roseville&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Roseville&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
            <value>(&quot;Roswell&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
            <value>(&quot;Round Rock&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Royal Oak&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Sacramento&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Saginaw&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Saint Charles&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Saint Charles&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
            <value>(&quot;Saint Cloud&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
            <value>(&quot;Saint Louis&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
            <value>(&quot;Saint Paul&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
            <value>(&quot;Saint Peters&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
            <value>(&quot;Saint Petersburg&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Salem&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
            <value>(&quot;Salem&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
            <value>(&quot;Salinas&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Salt Lake City&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
            <value>(&quot;San Angelo&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;San Antonio&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;San Bernardino&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;San Clemente&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;San Gabriel&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;San Jose&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;San Luis Obispo&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;San Marcos&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;San Mateo&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Sandy Springs&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
            <value>(&quot;Sanford&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Santa Ana&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Santa Barbara&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Santa Clara&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Santa Fe&quot;,&quot;United States&quot;,&quot;New Mexico&quot;)</value>
            <value>(&quot;Santa Maria&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Scottsdale&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
            <value>(&quot;Sheboygan&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
            <value>(&quot;Shelton&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
            <value>(&quot;Sierra Vista&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
            <value>(&quot;Sioux Falls&quot;,&quot;United States&quot;,&quot;South Dakota&quot;)</value>
            <value>(&quot;Skokie&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Smyrna&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
            <value>(&quot;Smyrna&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
            <value>(&quot;South Bend&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;Southaven&quot;,&quot;United States&quot;,&quot;Mississippi&quot;)</value>
            <value>(&quot;Sparks&quot;,&quot;United States&quot;,&quot;Nevada&quot;)</value>
            <value>(&quot;Spokane&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Springdale&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
            <value>(&quot;Springfield&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
            <value>(&quot;Springfield&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Springfield&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
            <value>(&quot;Sterling Heights&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Stockton&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Suffolk&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
            <value>(&quot;Summerville&quot;,&quot;United States&quot;,&quot;South Carolina&quot;)</value>
            <value>(&quot;Sunnyvale&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Superior&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
            <value>(&quot;Tallahassee&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Tamarac&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Tampa&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Taylor&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Temecula&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Tempe&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
            <value>(&quot;Texarkana&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
            <value>(&quot;Texas City&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;The Colony&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Thomasville&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Thornton&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
            <value>(&quot;Thousand Oaks&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Tigard&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
            <value>(&quot;Tinley Park&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Toledo&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Torrance&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Trenton&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Troy&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Troy&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
            <value>(&quot;Tucson&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
            <value>(&quot;Tulsa&quot;,&quot;United States&quot;,&quot;Oklahoma&quot;)</value>
            <value>(&quot;Tuscaloosa&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
            <value>(&quot;Twin Falls&quot;,&quot;United States&quot;,&quot;Idaho&quot;)</value>
            <value>(&quot;Tyler&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Urbandale&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
            <value>(&quot;Utica&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Vacaville&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Vallejo&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Vancouver&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
            <value>(&quot;Vineland&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Virginia Beach&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
            <value>(&quot;Visalia&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Waco&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
            <value>(&quot;Warner Robins&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
            <value>(&quot;Warwick&quot;,&quot;United States&quot;,&quot;Rhode Island&quot;)</value>
            <value>(&quot;Washington&quot;,&quot;United States&quot;,&quot;District of Columbia&quot;)</value>
            <value>(&quot;Waterbury&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
            <value>(&quot;Waterloo&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
            <value>(&quot;Watertown&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;Waukesha&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
            <value>(&quot;Wausau&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
            <value>(&quot;Waynesboro&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
            <value>(&quot;West Allis&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
            <value>(&quot;West Jordan&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
            <value>(&quot;West Palm Beach&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
            <value>(&quot;Westfield&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
            <value>(&quot;Westland&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Westminster&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Wheeling&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Wheeling&quot;,&quot;United States&quot;,&quot;West Virginia&quot;)</value>
            <value>(&quot;Whittier&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Wichita&quot;,&quot;United States&quot;,&quot;Kansas&quot;)</value>
            <value>(&quot;Wilmington&quot;,&quot;United States&quot;,&quot;Delaware&quot;)</value>
            <value>(&quot;Wilmington&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Wilson&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
            <value>(&quot;Woodbury&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
            <value>(&quot;Woodland&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Woodstock&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
            <value>(&quot;Woodstock&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
            <value>(&quot;Woonsocket&quot;,&quot;United States&quot;,&quot;Rhode Island&quot;)</value>
            <value>(&quot;Yonkers&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
            <value>(&quot;York&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
            <value>(&quot;Yucaipa&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Yuma&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
          </bin>
          <bin default-name='false' value='&quot;Cluster 2&quot;'>
            <value>(&quot;Arlington&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
            <value>(&quot;Atlanta&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
            <value>(&quot;Brentwood&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Columbus&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
            <value>(&quot;Detroit&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Henderson&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
            <value>(&quot;Inglewood&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Jackson&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
            <value>(&quot;Lafayette&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
            <value>(&quot;Minneapolis&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
            <value>(&quot;Newark&quot;,&quot;United States&quot;,&quot;Delaware&quot;)</value>
            <value>(&quot;Providence&quot;,&quot;United States&quot;,&quot;Rhode Island&quot;)</value>
            <value>(&quot;San Diego&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;San Francisco&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Springfield&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
          </bin>
          <bin default-name='false' value='&quot;Cluster 3&quot;'>
            <value>(&quot;New York City&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
          </bin>
          <bin default-name='false' value='&quot;Cluster 4&quot;'>
            <value>(&quot;Los Angeles&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
            <value>(&quot;Seattle&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
          </bin>
        </calculation>
      </column>
      <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
      <column aggregation='None' datatype='string' name='[Country/Region]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
      <column datatype='string' hidden='true' name='[Customer ID]' role='dimension' type='nominal' />
      <column datatype='string' name='[Customer Name (clusters)]' parent-model='[AnalyticModel:{adb69a21-7d76-4768-85e2-ae0831a10994}]' role='dimension' type='nominal'>
        <calculation class='categorical-bin' column='[Customer Name]' default='&quot;Not Clustered&quot;' new-bin='true'>
          <bin default-name='false' value='&quot;Cluster 1&quot;'>
            <value>&quot;Adrian Hane&quot;</value>
            <value>&quot;Alan Dominguez&quot;</value>
            <value>&quot;Ann Blume&quot;</value>
            <value>&quot;Anthony Johnson&quot;</value>
            <value>&quot;Anthony Rawles&quot;</value>
            <value>&quot;Arianne Irving&quot;</value>
            <value>&quot;Arthur Gainer&quot;</value>
            <value>&quot;Barry Franz&quot;</value>
            <value>&quot;Beth Thompson&quot;</value>
            <value>&quot;Bill Stewart&quot;</value>
            <value>&quot;Bradley Talbott&quot;</value>
            <value>&quot;Brian Dahlen&quot;</value>
            <value>&quot;Brian Stugart&quot;</value>
            <value>&quot;Cari Sayre&quot;</value>
            <value>&quot;Carlos Soltero&quot;</value>
            <value>&quot;Charles Crestani&quot;</value>
            <value>&quot;Charles McCrossin&quot;</value>
            <value>&quot;Chris Cortes&quot;</value>
            <value>&quot;Clay Rozendal&quot;</value>
            <value>&quot;Craig Carreira&quot;</value>
            <value>&quot;Dan Reichenbach&quot;</value>
            <value>&quot;Darren Budd&quot;</value>
            <value>&quot;Dean Katz&quot;</value>
            <value>&quot;Dennis Pardue&quot;</value>
            <value>&quot;Don Jones&quot;</value>
            <value>&quot;Duane Benoit&quot;</value>
            <value>&quot;Ed Jacobs&quot;</value>
            <value>&quot;Edward Hooks&quot;</value>
            <value>&quot;Eleni McCrary&quot;</value>
            <value>&quot;Ellis Ballard&quot;</value>
            <value>&quot;Erica Smith&quot;</value>
            <value>&quot;Fred Chung&quot;</value>
            <value>&quot;Fred McMath&quot;</value>
            <value>&quot;Gary Hwang&quot;</value>
            <value>&quot;Gary McGarr&quot;</value>
            <value>&quot;George Ashbrook&quot;</value>
            <value>&quot;George Zrebassa&quot;</value>
            <value>&quot;Greg Guthrie&quot;</value>
            <value>&quot;Greg Matthias&quot;</value>
            <value>&quot;Harold Ryan&quot;</value>
            <value>&quot;Ionia McGrath&quot;</value>
            <value>&quot;Jack Garza&quot;</value>
            <value>&quot;James Galang&quot;</value>
            <value>&quot;Jane Waco&quot;</value>
            <value>&quot;Jay Fein&quot;</value>
            <value>&quot;Jennifer Ferguson&quot;</value>
            <value>&quot;Jeremy Lonsdale&quot;</value>
            <value>&quot;Jim Kriz&quot;</value>
            <value>&quot;John Lucas&quot;</value>
            <value>&quot;John Stevenson&quot;</value>
            <value>&quot;Justin MacKendrick&quot;</value>
            <value>&quot;Karen Bern&quot;</value>
            <value>&quot;Kean Nguyen&quot;</value>
            <value>&quot;Keith Herrera&quot;</value>
            <value>&quot;Kelly Collister&quot;</value>
            <value>&quot;Laurel Beltran&quot;</value>
            <value>&quot;Lena Cacioppo&quot;</value>
            <value>&quot;Lena Radford&quot;</value>
            <value>&quot;Linda Cazamias&quot;</value>
            <value>&quot;Linda Southworth&quot;</value>
            <value>&quot;Lindsay Castell&quot;</value>
            <value>&quot;Lindsay Williams&quot;</value>
            <value>&quot;Marc Crier&quot;</value>
            <value>&quot;Marc Harrigan&quot;</value>
            <value>&quot;Maribeth Yedwab&quot;</value>
            <value>&quot;Marina Lichtenstein&quot;</value>
            <value>&quot;Mary Zewe&quot;</value>
            <value>&quot;Maureen Gastineau&quot;</value>
            <value>&quot;Max Jones&quot;</value>
            <value>&quot;Maxwell Schwartz&quot;</value>
            <value>&quot;Michael Chen&quot;</value>
            <value>&quot;Michelle Arnett&quot;</value>
            <value>&quot;Michelle Tran&quot;</value>
            <value>&quot;Mike Caudle&quot;</value>
            <value>&quot;Neoma Murray&quot;</value>
            <value>&quot;Nick Zandusky&quot;</value>
            <value>&quot;Pamela Stobb&quot;</value>
            <value>&quot;Patrick Bzostek&quot;</value>
            <value>&quot;Patrick Gardner&quot;</value>
            <value>&quot;Patrick Ryan&quot;</value>
            <value>&quot;Paul Van Hugh&quot;</value>
            <value>&quot;Pauline Johnson&quot;</value>
            <value>&quot;Pauline Webber&quot;</value>
            <value>&quot;Phillip Flathmann&quot;</value>
            <value>&quot;Ralph Arnett&quot;</value>
            <value>&quot;Rick Bensley&quot;</value>
            <value>&quot;Rob Dowd&quot;</value>
            <value>&quot;Robert Marley&quot;</value>
            <value>&quot;Roland Schwarz&quot;</value>
            <value>&quot;Sally Hughsby&quot;</value>
            <value>&quot;Sample Company A&quot;</value>
            <value>&quot;Sandra Glassco&quot;</value>
            <value>&quot;Sarah Foster&quot;</value>
            <value>&quot;Scot Coram&quot;</value>
            <value>&quot;Scott Cohen&quot;</value>
            <value>&quot;Sean Christensen&quot;</value>
            <value>&quot;Sharelle Roach&quot;</value>
            <value>&quot;Stefanie Holloman&quot;</value>
            <value>&quot;Sung Pak&quot;</value>
            <value>&quot;Tamara Manning&quot;</value>
            <value>&quot;Tamara Willingham&quot;</value>
            <value>&quot;Tanja Norvell&quot;</value>
            <value>&quot;Ted Trevino&quot;</value>
            <value>&quot;Tracy Poddar&quot;</value>
            <value>&quot;William Brown&quot;</value>
            <value>&quot;Yana Sorensen&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Cluster 2&quot;'>
            <value>&quot;Aaron Smayling&quot;</value>
            <value>&quot;Alejandro Grove&quot;</value>
            <value>&quot;Alejandro Savely&quot;</value>
            <value>&quot;Alex Avila&quot;</value>
            <value>&quot;Amy Hunt&quot;</value>
            <value>&quot;Anna Gayman&quot;</value>
            <value>&quot;Becky Martin&quot;</value>
            <value>&quot;Berenike Kampe&quot;</value>
            <value>&quot;Bill Donatelli&quot;</value>
            <value>&quot;Bill Eplett&quot;</value>
            <value>&quot;Bill Overfelt&quot;</value>
            <value>&quot;Bobby Elias&quot;</value>
            <value>&quot;Cathy Prescott&quot;</value>
            <value>&quot;Chris McAfee&quot;</value>
            <value>&quot;Craig Molinari&quot;</value>
            <value>&quot;Cynthia Voltz&quot;</value>
            <value>&quot;Dana Kaydos&quot;</value>
            <value>&quot;David Flashing&quot;</value>
            <value>&quot;Denny Joy&quot;</value>
            <value>&quot;Dianna Wilson&quot;</value>
            <value>&quot;Dorothy Badders&quot;</value>
            <value>&quot;Emily Phan&quot;</value>
            <value>&quot;Frank Carlisle&quot;</value>
            <value>&quot;Gary Hansen&quot;</value>
            <value>&quot;Harry Marie&quot;</value>
            <value>&quot;Hunter Glantz&quot;</value>
            <value>&quot;Jack O&apos;Briant&quot;</value>
            <value>&quot;Joel Eaton&quot;</value>
            <value>&quot;Justin Ellison&quot;</value>
            <value>&quot;Laura Armstrong&quot;</value>
            <value>&quot;Liz Preis&quot;</value>
            <value>&quot;Mark Hamilton&quot;</value>
            <value>&quot;Michael Paige&quot;</value>
            <value>&quot;Mick Hernandez&quot;</value>
            <value>&quot;Nat Gilpin&quot;</value>
            <value>&quot;Nathan Cano&quot;</value>
            <value>&quot;Philisse Overcash&quot;</value>
            <value>&quot;Rob Lucas&quot;</value>
            <value>&quot;Robert Dilbeck&quot;</value>
            <value>&quot;Sanjit Jacobs&quot;</value>
            <value>&quot;Sara Luxemburg&quot;</value>
            <value>&quot;Sean Braxton&quot;</value>
            <value>&quot;Shirley Daniels&quot;</value>
            <value>&quot;Sue Ann Reed&quot;</value>
            <value>&quot;Tamara Chand&quot;</value>
            <value>&quot;Thea Hudgings&quot;</value>
            <value>&quot;Theone Pippenger&quot;</value>
            <value>&quot;Tonja Turnell&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Cluster 3&quot;'>
            <value>&quot;Allen Rosenblatt&quot;</value>
            <value>&quot;Ann Chong&quot;</value>
            <value>&quot;Anne McFarland&quot;</value>
            <value>&quot;Annie Thurman&quot;</value>
            <value>&quot;Anthony Jacobs&quot;</value>
            <value>&quot;Art Ferguson&quot;</value>
            <value>&quot;Bill Shonely&quot;</value>
            <value>&quot;Carlos Daly&quot;</value>
            <value>&quot;Carol Adams&quot;</value>
            <value>&quot;Christine Kargatis&quot;</value>
            <value>&quot;Christine Phan&quot;</value>
            <value>&quot;Christy Brittain&quot;</value>
            <value>&quot;Chuck Clark&quot;</value>
            <value>&quot;Cindy Stewart&quot;</value>
            <value>&quot;Corinna Mitchell&quot;</value>
            <value>&quot;Craig Carroll&quot;</value>
            <value>&quot;Cynthia Arntzen&quot;</value>
            <value>&quot;Daniel Raglin&quot;</value>
            <value>&quot;Dave Poirier&quot;</value>
            <value>&quot;David Bremer&quot;</value>
            <value>&quot;Deirdre Greer&quot;</value>
            <value>&quot;Dianna Vittorini&quot;</value>
            <value>&quot;Dionis Lloyd&quot;</value>
            <value>&quot;Doug Jacobs&quot;</value>
            <value>&quot;Duane Noonan&quot;</value>
            <value>&quot;Edward Becker&quot;</value>
            <value>&quot;Edward Nazzal&quot;</value>
            <value>&quot;Emily Ducich&quot;</value>
            <value>&quot;Erin Ashbrook&quot;</value>
            <value>&quot;Erin Smith&quot;</value>
            <value>&quot;Eugene Barchas&quot;</value>
            <value>&quot;Eva Jacobs&quot;</value>
            <value>&quot;Frank Preis&quot;</value>
            <value>&quot;Gary Zandusky&quot;</value>
            <value>&quot;Greg Tran&quot;</value>
            <value>&quot;Joe Kamberova&quot;</value>
            <value>&quot;Joni Blumstein&quot;</value>
            <value>&quot;Joseph Airdo&quot;</value>
            <value>&quot;Katherine Murray&quot;</value>
            <value>&quot;Kean Thornton&quot;</value>
            <value>&quot;Keith Dawkins&quot;</value>
            <value>&quot;Ken Heidel&quot;</value>
            <value>&quot;Lisa DeCherney&quot;</value>
            <value>&quot;Luke Weiss&quot;</value>
            <value>&quot;Maribeth Dona&quot;</value>
            <value>&quot;Mark Packer&quot;</value>
            <value>&quot;Mitch Webber&quot;</value>
            <value>&quot;Muhammed Yedwab&quot;</value>
            <value>&quot;Naresj Patel&quot;</value>
            <value>&quot;Natalie DeCherney&quot;</value>
            <value>&quot;Nathan Mautz&quot;</value>
            <value>&quot;Neola Schneider&quot;</value>
            <value>&quot;Nora Paige&quot;</value>
            <value>&quot;Pamela Coakley&quot;</value>
            <value>&quot;Paul Knutson&quot;</value>
            <value>&quot;Peter Fuller&quot;</value>
            <value>&quot;Peter McVee&quot;</value>
            <value>&quot;Pierre Wener&quot;</value>
            <value>&quot;Quincy Jones&quot;</value>
            <value>&quot;Rick Duston&quot;</value>
            <value>&quot;Rick Hansen&quot;</value>
            <value>&quot;Rick Reed&quot;</value>
            <value>&quot;Robert Waldorf&quot;</value>
            <value>&quot;Roger Barcio&quot;</value>
            <value>&quot;Ross Baird&quot;</value>
            <value>&quot;Speros Goranitis&quot;</value>
            <value>&quot;Steven Roelle&quot;</value>
            <value>&quot;Stewart Carmichael&quot;</value>
            <value>&quot;Susan Pistek&quot;</value>
            <value>&quot;Suzanne McNair&quot;</value>
            <value>&quot;Ted Butterfield&quot;</value>
            <value>&quot;Thea Hendricks&quot;</value>
            <value>&quot;Toby Carlisle&quot;</value>
            <value>&quot;Tom Ashbrook&quot;</value>
            <value>&quot;Tom Boeckenhauer&quot;</value>
            <value>&quot;Tom Prescott&quot;</value>
            <value>&quot;Tracy Blumstein&quot;</value>
            <value>&quot;Valerie Takahito&quot;</value>
            <value>&quot;Victoria Wilson&quot;</value>
            <value>&quot;Yoseph Carroll&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Cluster 4&quot;'>
            <value>&quot;Alan Haines&quot;</value>
            <value>&quot;Alan Hwang&quot;</value>
            <value>&quot;Anna Häberlin&quot;</value>
            <value>&quot;Barry Gonzalez&quot;</value>
            <value>&quot;Bradley Drucker&quot;</value>
            <value>&quot;Christopher Schild&quot;</value>
            <value>&quot;Corey Catlett&quot;</value>
            <value>&quot;Dan Campbell&quot;</value>
            <value>&quot;Denise Monton&quot;</value>
            <value>&quot;Frank Olsen&quot;</value>
            <value>&quot;Giulietta Baptist&quot;</value>
            <value>&quot;Grant Thornton&quot;</value>
            <value>&quot;Greg Maxwell&quot;</value>
            <value>&quot;Irene Maddox&quot;</value>
            <value>&quot;Jack Lebron&quot;</value>
            <value>&quot;Jill Fjeld&quot;</value>
            <value>&quot;Jim Epp&quot;</value>
            <value>&quot;John Dryer&quot;</value>
            <value>&quot;Jonathan Doherty&quot;</value>
            <value>&quot;Julia Barnett&quot;</value>
            <value>&quot;Katherine Hughes&quot;</value>
            <value>&quot;Katrina Willman&quot;</value>
            <value>&quot;Kelly Lampkin&quot;</value>
            <value>&quot;Kristen Hastings&quot;</value>
            <value>&quot;Lauren Leatherbury&quot;</value>
            <value>&quot;Liz Willingham&quot;</value>
            <value>&quot;Mark Cousins&quot;</value>
            <value>&quot;Meg Tillman&quot;</value>
            <value>&quot;Michael Moore&quot;</value>
            <value>&quot;Michelle Huthwaite&quot;</value>
            <value>&quot;Patrick O&apos;Brill&quot;</value>
            <value>&quot;Randy Ferguson&quot;</value>
            <value>&quot;Rose O&apos;Brian&quot;</value>
            <value>&quot;Sanjit Engle&quot;</value>
            <value>&quot;Shahid Collister&quot;</value>
            <value>&quot;Shahid Hopkins&quot;</value>
            <value>&quot;Thomas Boland&quot;</value>
            <value>&quot;Tracy Hopkins&quot;</value>
            <value>&quot;Victoria Pisteka&quot;</value>
          </bin>
          <bin default-name='false' value='&quot;Cluster 5&quot;'>
            <value>&quot;Sean Miller&quot;</value>
            <value>&quot;Thomas Seio&quot;</value>
          </bin>
        </calculation>
      </column>
      <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
      <column datatype='real' default-format='p0.00%' name='[Discount]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
      <column datatype='string' name='[Order ID]' role='dimension' type='nominal' />
      <column datatype='real' hidden='true' name='[Order Quantity]' role='measure' type='quantitative' />
      <column datatype='integer' default-format='*00000' name='[Postal Code]' role='dimension' semantic-role='[ZipCode].[Name]' type='ordinal' />
      <column datatype='string' hidden='true' name='[Product ID]' role='dimension' type='nominal' />
      <column datatype='string' name='[Product Name]' role='dimension' type='nominal' />
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Profit]' role='measure' type='quantitative' />
      <column aggregate-role-from='[State]' datatype='string' name='[Region]' role='dimension' type='nominal' />
      <column datatype='integer' hidden='true' name='[Row ID]' role='measure' type='quantitative' />
      <column caption='Units estimate' datatype='real' default-format='n#,##0;-#,##0' hidden='true' name='[Sales est (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='ROUND([Quantity]*(1-[Parameters].[Parameter 2])*(1+[Parameters].[Parameter 1]),0)' scope-isolation='false' />
      </column>
      <column caption='Profit per Order' datatype='real' default-format='C1033%' name='[Sales per Customer (copy)]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='Sum([Profit])/countD([Order ID])' />
      </column>
      <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Sales]' role='measure' type='quantitative' />
      <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
      <column datatype='string' name='[Ship Mode]' role='dimension' type='nominal' />
      <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
      <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
      <column-instance column='[Region]' derivation='Attribute' name='[attr:Region:nk]' pivot='key' type='nominal' />
      <column-instance column='[Segment]' derivation='Attribute' name='[attr:Segment:nk]' pivot='key' type='nominal' />
      <column-instance column='[Customer Name]' derivation='CountD' name='[ctd:Customer Name:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Order Date]' derivation='Month' name='[mn:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Calculation_6401103171259723]' derivation='None' name='[none:Calculation_6401103171259723:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_9060122104947471]' derivation='None' name='[none:Calculation_9060122104947471:nk]' pivot='key' type='nominal' />
      <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
      <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
      <column-instance column='[Country/Region]' derivation='None' name='[none:Country/Region:nk]' pivot='key' type='nominal' />
      <column-instance column='[Customer Name]' derivation='None' name='[none:Customer Name:nk]' pivot='key' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[Postal Code]' derivation='None' name='[none:Postal Code:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Segment]' derivation='None' name='[none:Segment:nk]' pivot='key' type='nominal' />
      <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
      <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
      <column-instance column='[Order Date]' derivation='Quarter' name='[qr:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Sales]' derivation='Sum' name='[rank:sum:Sales:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' rank-options='Competition,Descending' type='Rank' />
      </column-instance>
      <column-instance column='[Calculation_5421109230915137]' derivation='Sum' name='[sum:Calculation_5421109230915137:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Sales est (copy)]' derivation='Sum' name='[sum:Sales est (copy):qk]' pivot='key' type='quantitative' />
      <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Order Date]' derivation='Month-Trunc' name='[tmn:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Order Date]' derivation='Week-Trunc' name='[twk:Order Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Calculation_9921103144103743]' derivation='User' name='[usr:Calculation_9921103144103743:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_9951107165644870]' derivation='User' name='[usr:Calculation_9951107165644870:nk]' pivot='key' type='nominal' />
      <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
      <group hidden='true' name='[Action (Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Category]' />
        </groupfilter>
      </group>
      <group caption='Action (Category,MONTH(Order Date))' hidden='true' name='[Action (Category,MONTH(Order Date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Category]' />
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
        </groupfilter>
      </group>
      <group caption='Action (Category,YEAR(Order Date),MONTH(Order Date))' hidden='true' name='[Action (Category,YEAR(Order Date),MONTH(Order Date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Category]' />
          <groupfilter function='level-members' level='[yr:Order Date:ok]' />
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
        </groupfilter>
      </group>
      <group hidden='true' name='[Action (Customer Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Segment:nk]' />
        </groupfilter>
      </group>
      <group caption='Action (Delayed?)' hidden='true' name='[Action (Delayed?)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_6401103171259723]' />
        </groupfilter>
      </group>
      <group caption='Action (MONTH(Order Date),Product Category)' hidden='true' name='[Action (MONTH(Order Date),Product Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Category:nk]' />
        </groupfilter>
      </group>
      <group caption='Action (MONTH(Order Date),Product Category,ProductSub-Category)' hidden='true' name='[Action (MONTH(Order Date),Product Category,ProductSub-Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Category:nk]' />
          <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
        </groupfilter>
      </group>
      <group caption='Action (MONTH(Order Date),Product Category,Segment) 1' hidden='true' name='[Action (MONTH(Order Date),Product Category,Segment) 1]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Category:nk]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (MONTH(Order Date),Product Category,Segment)' hidden='true' name='[Action (MONTH(Order Date),Product Category,Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Category:nk]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (MONTH(Order Date),ProductSub-Category)' hidden='true' name='[Action (MONTH(Order Date),ProductSub-Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
        </groupfilter>
      </group>
      <group caption='Action (MONTH(Order Date),Segment)' hidden='true' name='[Action (MONTH(Order Date),Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (Order Profitable?,Category,MONTH(Order Date))' hidden='true' name='[Action (Order Profitable?,Category,MONTH(Order Date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_9060122104947471]' />
          <groupfilter function='level-members' level='[Category]' />
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
        </groupfilter>
      </group>
      <group caption='Action (Order Profitable?,MONTH(Order Date),Segment)' hidden='true' name='[Action (Order Profitable?,MONTH(Order Date),Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_9060122104947471]' />
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (Postal Code,State) 1' hidden='true' name='[Action (Postal Code,State) 1]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Postal Code]' />
          <groupfilter function='level-members' level='[State]' />
        </groupfilter>
      </group>
      <group caption='Action (Postal Code,State)' hidden='true' name='[Action (Postal Code,State)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Postal Code:ok]' />
          <groupfilter function='level-members' level='[State]' />
        </groupfilter>
      </group>
      <group caption='Action (Product Category,ProductSub-Category,Segment)' hidden='true' name='[Action (Product Category,ProductSub-Category,Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Category:nk]' />
          <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (ProductSub-Category,Region,Segment)' hidden='true' name='[Action (ProductSub-Category,Region,Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
          <groupfilter function='level-members' level='[Region]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (ProductSub-Category,State)' hidden='true' name='[Action (ProductSub-Category,State)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
          <groupfilter function='level-members' level='[State]' />
        </groupfilter>
      </group>
      <group caption='Action (QUARTER(Order Date),MONTH(Order Date),Product Category,ProductSub-Category)' hidden='true' name='[Action (QUARTER(Order Date),MONTH(Order Date),Product Category,ProductSub-Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[qr:Order Date:ok]' />
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Category:nk]' />
          <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
        </groupfilter>
      </group>
      <group caption='Action (QUARTER(Order Date),MONTH(Order Date),ProductSub-Category)' hidden='true' name='[Action (QUARTER(Order Date),MONTH(Order Date),ProductSub-Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[qr:Order Date:ok]' />
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Sub-Category:nk]' />
        </groupfilter>
      </group>
      <group caption='Action (Region)' hidden='true' name='[Action (Region)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Region]' />
        </groupfilter>
      </group>
      <group caption='Action (Segment)' hidden='true' name='[Action (Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (Ship Status)' hidden='true' name='[Action (Ship Status)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_6401103171259723]' />
        </groupfilter>
      </group>
      <group caption='Action (Ship Status,Customer Name,Order Date,Order ID,Product Name,Ship Mode)' hidden='true' name='[Action (Ship Status,Customer Name,Order Date,Order ID,Product Name,Ship Mode)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_6401103171259723]' />
          <groupfilter function='level-members' level='[Customer Name]' />
          <groupfilter function='level-members' level='[Order Date]' />
          <groupfilter function='level-members' level='[Order ID]' />
          <groupfilter function='level-members' level='[Product Name]' />
          <groupfilter function='level-members' level='[Ship Mode]' />
        </groupfilter>
      </group>
      <group caption='Action (Ship Status,YEAR(Order Date),WEEK(Order Date))' hidden='true' name='[Action (Ship Status,YEAR(Order Date),WEEK(Order Date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_6401103171259723]' />
          <groupfilter function='level-members' level='[yr:Order Date:ok]' />
          <groupfilter function='level-members' level='[twk:Order Date:ok]' />
        </groupfilter>
      </group>
      <group caption='Action (State)' hidden='true' name='[Action (State)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[State]' />
        </groupfilter>
      </group>
      <group caption='Action (Transaction Profit,MONTH(Order Date),Segment)' hidden='true' name='[Action (Transaction Profit,MONTH(Order Date),Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_9060122104947471]' />
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group caption='Action (YEAR(Order Date),MONTH(Order Date))' hidden='true' name='[Action (YEAR(Order Date),MONTH(Order Date))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[yr:Order Date:ok]' />
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
        </groupfilter>
      </group>
      <group caption='Action (YEAR(Order Date),MONTH(Order Date),Product Category)' hidden='true' name='[Action (YEAR(Order Date),MONTH(Order Date),Product Category)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[yr:Order Date:ok]' />
          <groupfilter function='level-members' level='[mn:Order Date:ok]' />
          <groupfilter function='level-members' level='[none:Category:nk]' />
        </groupfilter>
      </group>
      <group caption='Action (YEAR(Order Date),MONTH(Order Date),Segment)' hidden='true' name='[Action (YEAR(Order Date),MONTH(Order Date),Segment)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[yr:Order Date:ok]' />
          <groupfilter function='level-members' level='[tmn:Order Date:ok]' />
          <groupfilter function='level-members' level='[Segment]' />
        </groupfilter>
      </group>
      <group auto-hidden='true' hidden='true' name='[City, Country/Region, State]' name-style='unqualified'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[none:City:nk]' />
          <groupfilter function='level-members' level='[none:Country/Region:nk]' />
          <groupfilter function='level-members' level='[none:State:nk]' />
        </groupfilter>
      </group>
      <group caption='Tooltip (State)' hidden='true' name='[Tooltip (State)]' name-style='unqualified' user:auto-column='sheet_link' user:ui-vit-column='true'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[State]' />
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='Location'>
          <field>[Region]</field>
          <field>[Country/Region]</field>
          <field>[State]</field>
          <field>[City]</field>
          <field>[Postal Code]</field>
        </drill-path>
        <drill-path name='Product'>
          <field>[Category]</field>
          <field>[Sub-Category]</field>
          <field>[Product Name]</field>
        </drill-path>
      </drill-paths>
      <folder name='Customer' role='dimensions'>
        <folder-item name='[Customer ID]' type='field' />
        <folder-item name='[Customer Name]' type='field' />
        <folder-item name='[Segment]' type='field' />
      </folder>
      <folder name='Order' role='dimensions'>
        <folder-item name='[Order Date]' type='field' />
        <folder-item name='[Order ID]' type='field' />
        <folder-item name='[Ship Date]' type='field' />
        <folder-item name='[Ship Mode]' type='field' />
      </folder>
      <layout dim-ordering='alphabetic' dim-percentage='0.448166' measure-ordering='alphabetic' measure-percentage='0.368421' parameter-percentage='0.183413' show-aliased-fields='true' show-structure='false' user-set-layout='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[Calculation_9921103144103743]' max='0.5' min='-0.5' palette='tableau-orange-blue' type='interpolated' />
          <encoding attr='color' field='[none:Forecast Indicator:nk]' type='palette'>
            <map to='#1f77b4'>
              <bucket>&quot;Actual&quot;</bucket>
            </map>
            <map to='#ff7f0e'>
              <bucket>&quot;Estimate&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#000000'>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Sales:qk]&quot;</bucket>
            </map>
            <map to='#000000'>
              <bucket>&quot;[dataengine.42019.618651678240].[usr:Calculation_9921103144103743:qk]&quot;</bucket>
            </map>
            <map to='#1c70ae'>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Calculation_5421109230915137:qk]&quot;</bucket>
            </map>
            <map to='#2ca02c'>
              <bucket>&quot;[dataengine.42019.618651678240].[usr:Calculation_9330126204734562:qk]&quot;</bucket>
            </map>
            <map to='#414451'>
              <bucket>&quot;[dataengine.42019.618651678240].[rank:sum:Sales:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Calculation_1641214165608856:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[dataengine.42019.618651678240].[sum:Sales est (copy):qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Segment:nk]&#10;[none:Forecast Indicator:nk]' type='palette'>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;Consumer&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;Home Office&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;Corporate&quot;</bucket>
            </map-pri>
          </encoding>
          <encoding attr='color' field='[usr:Calculation_9951107165644870:nk]' palette='nuriel_stone_10_0' type='palette'>
            <map to='#027b8e'>
              <bucket>&quot;Above Target&quot;</bucket>
            </map>
            <map to='#a39fc9'>
              <bucket>&quot;Below Target&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_6401103171259723:nk]' palette='tableau10_10_0' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Shipped Early&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;Shipped Late&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Shipped On Time&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_9060122104947471:nk]' type='palette'>
            <map to='#6388b4'>
              <bucket>true</bucket>
            </map>
            <map to='#ffae34'>
              <bucket>false</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Sub-Category:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Fasteners&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Accessories&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bookcases&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Chairs&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Paper&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Appliances&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Copiers&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Phones&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Storage&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Labels&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tables&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;Furnishings&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Envelopes&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Art&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Supplies&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Machines&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Binders&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:AdhocCluster:1:ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>1</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>5</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>4</bucket>
            </map>
            <map to='#e15759'>
              <bucket>3</bucket>
            </map>
            <map to='#edc948'>
              <bucket>0</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:AdhocCluster:2:ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>1</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>4</bucket>
            </map>
            <map to='#e15759'>
              <bucket>3</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>2</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[City, Country/Region, State (clusters)]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Cluster 1&quot;</bucket>
            <bucket>&quot;Cluster 2&quot;</bucket>
            <bucket>&quot;Cluster 3&quot;</bucket>
            <bucket>&quot;Cluster 4&quot;</bucket>
            <bucket>&quot;Not Clustered&quot;</bucket>
          </dictionary>
        </manual-sort>
        <manual-sort column='[Customer Name (clusters)]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Cluster 1&quot;</bucket>
            <bucket>&quot;Cluster 2&quot;</bucket>
            <bucket>&quot;Cluster 3&quot;</bucket>
            <bucket>&quot;Cluster 4&quot;</bucket>
            <bucket>&quot;Cluster 5&quot;</bucket>
            <bucket>&quot;Not Clustered&quot;</bucket>
          </dictionary>
        </manual-sort>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <datasource-dependencies datasource='Parameters'>
        <column caption='New Business Growth' datatype='real' default-format='p0%' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='0.59999999999999998'>
          <calculation class='tableau' formula='0.59999999999999998' />
          <range granularity='0.01' max='1.0' min='0.0' />
        </column>
        <column caption='Churn Rate' datatype='real' default-format='p0.00%' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='0.064000000000000001'>
          <calculation class='tableau' formula='0.064000000000000001' />
          <range granularity='0.001' max='0.25' min='0.0' />
        </column>
      </datasource-dependencies>
      <analytic-model>
        <name>
          <field name='[AnalyticModel:{823ecb0c-3195-43c3-8810-bdedc61ca250}]' />
        </name>
        <analytic-model-specifications class='cluster-specifications'>
          <analysis-fields>
            <field name='[dataengine.42019.618651678240].[sum:Profit:qk]' />
          </analysis-fields>
          <filter-fields />
          <lod-fields />
          <number-of-desired-clusters>4</number-of-desired-clusters>
          <is-dissagregate>false</is-dissagregate>
        </analytic-model-specifications>
        <result-fields />
      </analytic-model>
      <analytic-model>
        <name>
          <field name='[AnalyticModel:{92b349aa-94a3-422f-b6f3-4e63668648a4}]' />
        </name>
        <analytic-model-specifications class='cluster-specifications'>
          <analysis-fields>
            <field name='[dataengine.42019.618651678240].[sum:Profit:qk]' />
          </analysis-fields>
          <filter-fields />
          <lod-fields>
            <field name='[dataengine.42019.618651678240].[none:City:nk]' />
            <field name='[dataengine.42019.618651678240].[none:Country/Region:nk]' />
            <field name='[dataengine.42019.618651678240].[none:State:nk]' />
          </lod-fields>
          <number-of-desired-clusters>4</number-of-desired-clusters>
          <is-dissagregate>false</is-dissagregate>
        </analytic-model-specifications>
        <result-fields>
          <field name='[dataengine.42019.618651678240].[City, Country/Region, State (clusters)]' />
        </result-fields>
      </analytic-model>
      <analytic-model>
        <name>
          <field name='[AnalyticModel:{adb69a21-7d76-4768-85e2-ae0831a10994}]' />
        </name>
        <analytic-model-specifications class='cluster-specifications'>
          <analysis-fields>
            <field name='[dataengine.42019.618651678240].[sum:Profit:qk]' />
            <field name='[dataengine.42019.618651678240].[sum:Sales:qk]' />
            <field name='[dataengine.42019.618651678240].[attr:Region:nk]' />
          </analysis-fields>
          <filter-fields />
          <lod-fields>
            <field name='[dataengine.42019.618651678240].[none:Customer Name:nk]' />
          </lod-fields>
          <number-of-desired-clusters>5</number-of-desired-clusters>
          <is-dissagregate>false</is-dissagregate>
        </analytic-model-specifications>
        <result-fields />
      </analytic-model>
      <analytic-model>
        <name>
          <field name='[AnalyticModel:{fff80ca6-4326-4b01-8d0a-a6ea8bd78fd9}]' />
        </name>
        <analytic-model-specifications class='cluster-specifications'>
          <analysis-fields>
            <field name='[dataengine.42019.618651678240].[sum:Profit:qk]' />
            <field name='[dataengine.42019.618651678240].[sum:Sales:qk]' />
            <field name='[dataengine.42019.618651678240].[attr:Segment:nk]' />
          </analysis-fields>
          <filter-fields />
          <lod-fields />
          <number-of-desired-clusters>5</number-of-desired-clusters>
          <is-dissagregate>false</is-dissagregate>
        </analytic-model-specifications>
        <result-fields />
      </analytic-model>
    </datasource>
  </datasources>
  <datasource-relationships>
    <datasource-dependencies datasource='federated.0zo9ebk1skkmfl1c0h4hf1osypd8'>
      <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
      <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
    </datasource-dependencies>
    <datasource-dependencies datasource='federated.1dsfepz0bnjcff1cg85u60g2ae1k'>
      <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
      <column-instance column='[Order Date]' derivation='None' name='[none:Order Date:ok]' pivot='key' type='ordinal' />
    </datasource-dependencies>
    <datasource-relationship source='federated.1dsfepz0bnjcff1cg85u60g2ae1k' target='federated.0zo9ebk1skkmfl1c0h4hf1osypd8'>
      <column-mapping>
        <map key='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Order Date:ok]' value='[federated.0zo9ebk1skkmfl1c0h4hf1osypd8].[none:Date:ok]' />
      </column-mapping>
    </datasource-relationship>
  </datasource-relationships>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Cat vs No of Records by SubCat'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
          </datasources>
          <datasource-dependencies datasource='dataengine.42019.618651678240'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <computed-sort column='[dataengine.42019.618651678240].[none:Sub-Category:nk]' direction='ASC' using='[dataengine.42019.618651678240].[sum:Number of Records:qk]' />
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Sub-Category:nk]' />
              <text column='[dataengine.42019.618651678240].[sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[dataengine.42019.618651678240].[none:Category:nk]</rows>
        <cols>[dataengine.42019.618651678240].[sum:Number of Records:qk]</cols>
      </table>
      <simple-id uuid='{F85096E3-5999-4B47-ABC7-E50DF6641024}' />
    </worksheet>
    <worksheet name='Chairs: Profit Sales Disc Quant by SubCat, Order ID '>
      <table>
        <view>
          <datasources>
            <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
          </datasources>
          <datasource-dependencies datasource='dataengine.42019.618651678240'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' default-format='p0.00%' name='[Discount]' role='measure' type='quantitative' />
            <column datatype='string' name='[Order ID]' role='dimension' type='nominal' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Quantity]' role='measure' type='quantitative' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Order ID]' derivation='None' name='[none:Order ID:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Discount]' derivation='Sum' name='[sum:Discount:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Quantity]' derivation='Sum' name='[sum:Quantity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[dataengine.42019.618651678240].[none:Category:nk]'>
            <groupfilter function='member' level='[none:Category:nk]' member='&quot;Furniture&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[dataengine.42019.618651678240].[none:Category:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Sub-Category:nk]' />
              <lod column='[dataengine.42019.618651678240].[none:Order ID:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[dataengine.42019.618651678240].[sum:Profit:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Sub-Category:nk]' />
              <lod column='[dataengine.42019.618651678240].[none:Order ID:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[dataengine.42019.618651678240].[sum:Sales:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Sub-Category:nk]' />
              <lod column='[dataengine.42019.618651678240].[none:Order ID:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[dataengine.42019.618651678240].[sum:Discount:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Sub-Category:nk]' />
              <lod column='[dataengine.42019.618651678240].[none:Order ID:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[dataengine.42019.618651678240].[sum:Quantity:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Sub-Category:nk]' />
              <lod column='[dataengine.42019.618651678240].[none:Order ID:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
        </panes>
        <rows>([dataengine.42019.618651678240].[sum:Profit:qk] + ([dataengine.42019.618651678240].[sum:Sales:qk] + ([dataengine.42019.618651678240].[sum:Discount:qk] + [dataengine.42019.618651678240].[sum:Quantity:qk])))</rows>
        <cols>([dataengine.42019.618651678240].[sum:Profit:qk] + ([dataengine.42019.618651678240].[sum:Sales:qk] + ([dataengine.42019.618651678240].[sum:Discount:qk] + [dataengine.42019.618651678240].[sum:Quantity:qk])))</cols>
      </table>
      <simple-id uuid='{2CE95539-A6F3-403F-B1EC-65358E121582}' />
    </worksheet>
    <worksheet name='City by Cluster'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='dataengine.42019.618651678240'>
            <column auto-hidden='true' caption='Clusters (1)' datatype='integer' hidden='true' is-adhoc-cluster='true' name='[AdhocCluster:2]' parent-model='[AnalyticModel:{823ecb0c-3195-43c3-8810-bdedc61ca250}]' role='dimension' type='ordinal'>
              <aliases>
                <alias key='-1' value='Cluster Outliers' />
                <alias key='0' value='Not Clustered' />
                <alias key='1' value='Cluster 1' />
                <alias key='2' value='Cluster 2' />
                <alias key='3' value='Cluster 3' />
                <alias key='4' value='Cluster 4' />
                <alias key='5' value='Cluster 5' />
                <alias key='6' value='Cluster 6' />
                <alias key='7' value='Cluster 7' />
                <alias key='8' value='Cluster 8' />
                <alias key='9' value='Cluster 9' />
                <alias key='10' value='Cluster 10' />
                <alias key='11' value='Cluster 11' />
                <alias key='12' value='Cluster 12' />
                <alias key='13' value='Cluster 13' />
                <alias key='14' value='Cluster 14' />
                <alias key='15' value='Cluster 15' />
                <alias key='16' value='Cluster 16' />
                <alias key='17' value='Cluster 17' />
                <alias key='18' value='Cluster 18' />
                <alias key='19' value='Cluster 19' />
                <alias key='20' value='Cluster 20' />
                <alias key='21' value='Cluster 21' />
                <alias key='22' value='Cluster 22' />
                <alias key='23' value='Cluster 23' />
                <alias key='24' value='Cluster 24' />
                <alias key='25' value='Cluster 25' />
                <alias key='26' value='Cluster 26' />
                <alias key='27' value='Cluster 27' />
                <alias key='28' value='Cluster 28' />
                <alias key='29' value='Cluster 29' />
                <alias key='30' value='Cluster 30' />
                <alias key='31' value='Cluster 31' />
                <alias key='32' value='Cluster 32' />
                <alias key='33' value='Cluster 33' />
                <alias key='34' value='Cluster 34' />
                <alias key='35' value='Cluster 35' />
                <alias key='36' value='Cluster 36' />
                <alias key='37' value='Cluster 37' />
                <alias key='38' value='Cluster 38' />
                <alias key='39' value='Cluster 39' />
                <alias key='40' value='Cluster 40' />
                <alias key='41' value='Cluster 41' />
                <alias key='42' value='Cluster 42' />
                <alias key='43' value='Cluster 43' />
                <alias key='44' value='Cluster 44' />
                <alias key='45' value='Cluster 45' />
                <alias key='46' value='Cluster 46' />
                <alias key='47' value='Cluster 47' />
                <alias key='48' value='Cluster 48' />
                <alias key='49' value='Cluster 49' />
                <alias key='50' value='Cluster 50' />
              </aliases>
            </column>
            <column datatype='string' name='[City, Country/Region, State (clusters)]' parent-model='[AnalyticModel:{92b349aa-94a3-422f-b6f3-4e63668648a4}]' role='dimension' type='nominal'>
              <calculation class='categorical-bin' column='[City, Country/Region, State]' default='&quot;Not Clustered&quot;' new-bin='true'>
                <bin default-name='false' value='&quot;Cluster 1&quot;'>
                  <value>(&quot;Aberdeen&quot;,&quot;United States&quot;,&quot;South Dakota&quot;)</value>
                  <value>(&quot;Abilene&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Akron&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Albuquerque&quot;,&quot;United States&quot;,&quot;New Mexico&quot;)</value>
                  <value>(&quot;Alexandria&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
                  <value>(&quot;Allen&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Allentown&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
                  <value>(&quot;Altoona&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
                  <value>(&quot;Amarillo&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Anaheim&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Andover&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
                  <value>(&quot;Ann Arbor&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Antioch&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Apopka&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Apple Valley&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Apple Valley&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
                  <value>(&quot;Appleton&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
                  <value>(&quot;Arlington&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Arlington Heights&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Arvada&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Asheville&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Athens&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
                  <value>(&quot;Atlantic City&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Auburn&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
                  <value>(&quot;Auburn&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Auburn&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Aurora&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Aurora&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Austin&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Avondale&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
                  <value>(&quot;Bakersfield&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Baltimore&quot;,&quot;United States&quot;,&quot;Maryland&quot;)</value>
                  <value>(&quot;Bangor&quot;,&quot;United States&quot;,&quot;Maine&quot;)</value>
                  <value>(&quot;Bartlett&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;Bayonne&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Baytown&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Beaumont&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Bedford&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Belleville&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Bellevue&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Bellingham&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Bethlehem&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
                  <value>(&quot;Beverly&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
                  <value>(&quot;Billings&quot;,&quot;United States&quot;,&quot;Montana&quot;)</value>
                  <value>(&quot;Bloomington&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Bloomington&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;Boca Raton&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Boise&quot;,&quot;United States&quot;,&quot;Idaho&quot;)</value>
                  <value>(&quot;Bolingbrook&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Bossier City&quot;,&quot;United States&quot;,&quot;Louisiana&quot;)</value>
                  <value>(&quot;Bowling Green&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
                  <value>(&quot;Bowling Green&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Boynton Beach&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Bozeman&quot;,&quot;United States&quot;,&quot;Montana&quot;)</value>
                  <value>(&quot;Bridgeton&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Bristol&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
                  <value>(&quot;Bristol&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;Broken Arrow&quot;,&quot;United States&quot;,&quot;Oklahoma&quot;)</value>
                  <value>(&quot;Broomfield&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Brownsville&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Bryan&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Buffalo&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Buffalo Grove&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Bullhead City&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
                  <value>(&quot;Burbank&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Burlington&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
                  <value>(&quot;Burlington&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Burlington&quot;,&quot;United States&quot;,&quot;Vermont&quot;)</value>
                  <value>(&quot;Caldwell&quot;,&quot;United States&quot;,&quot;Idaho&quot;)</value>
                  <value>(&quot;Camarillo&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Cambridge&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
                  <value>(&quot;Canton&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Carlsbad&quot;,&quot;United States&quot;,&quot;New Mexico&quot;)</value>
                  <value>(&quot;Carol Stream&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Carrollton&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Cary&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Cedar Hill&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Cedar Rapids&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
                  <value>(&quot;Champaign&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Chandler&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
                  <value>(&quot;Chapel Hill&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Charlotte&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Charlottesville&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
                  <value>(&quot;Chattanooga&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;Chesapeake&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
                  <value>(&quot;Chester&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
                  <value>(&quot;Cheyenne&quot;,&quot;United States&quot;,&quot;Wyoming&quot;)</value>
                  <value>(&quot;Chicago&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Chico&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Chula Vista&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Cincinnati&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Citrus Heights&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Clarksville&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;Cleveland&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Clifton&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Clinton&quot;,&quot;United States&quot;,&quot;Maryland&quot;)</value>
                  <value>(&quot;Clovis&quot;,&quot;United States&quot;,&quot;New Mexico&quot;)</value>
                  <value>(&quot;Coachella&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;College Station&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Colorado Springs&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Columbia&quot;,&quot;United States&quot;,&quot;Maryland&quot;)</value>
                  <value>(&quot;Columbia&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
                  <value>(&quot;Columbia&quot;,&quot;United States&quot;,&quot;South Carolina&quot;)</value>
                  <value>(&quot;Columbia&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;Columbus&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;Columbus&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Commerce City&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Concord&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Concord&quot;,&quot;United States&quot;,&quot;New Hampshire&quot;)</value>
                  <value>(&quot;Concord&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Conroe&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Conway&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
                  <value>(&quot;Coon Rapids&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
                  <value>(&quot;Coppell&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Coral Gables&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Coral Springs&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Corpus Christi&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Costa Mesa&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Cottage Grove&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
                  <value>(&quot;Covington&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Cranston&quot;,&quot;United States&quot;,&quot;Rhode Island&quot;)</value>
                  <value>(&quot;Cuyahoga Falls&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Dallas&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Danbury&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
                  <value>(&quot;Danville&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Danville&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Davis&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Daytona Beach&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Dearborn&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Dearborn Heights&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Decatur&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
                  <value>(&quot;Decatur&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Deer Park&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Delray Beach&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Deltona&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Denver&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Des Moines&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
                  <value>(&quot;Des Moines&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Des Plaines&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Dover&quot;,&quot;United States&quot;,&quot;Delaware&quot;)</value>
                  <value>(&quot;Dover&quot;,&quot;United States&quot;,&quot;New Hampshire&quot;)</value>
                  <value>(&quot;Draper&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
                  <value>(&quot;Dublin&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Dublin&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Dubuque&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
                  <value>(&quot;Durham&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Eagan&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
                  <value>(&quot;East Orange&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;East Point&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
                  <value>(&quot;Eau Claire&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
                  <value>(&quot;Edinburg&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Edmond&quot;,&quot;United States&quot;,&quot;Oklahoma&quot;)</value>
                  <value>(&quot;Edmonds&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;El Cajon&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;El Paso&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Elkhart&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;Elmhurst&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Elyria&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Encinitas&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Englewood&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Escondido&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Eugene&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
                  <value>(&quot;Evanston&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Everett&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
                  <value>(&quot;Everett&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Fairfield&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Fairfield&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
                  <value>(&quot;Fairfield&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Fargo&quot;,&quot;United States&quot;,&quot;North Dakota&quot;)</value>
                  <value>(&quot;Farmington&quot;,&quot;United States&quot;,&quot;New Mexico&quot;)</value>
                  <value>(&quot;Fayetteville&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
                  <value>(&quot;Fayetteville&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Florence&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
                  <value>(&quot;Florence&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
                  <value>(&quot;Florence&quot;,&quot;United States&quot;,&quot;South Carolina&quot;)</value>
                  <value>(&quot;Fort Collins&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Fort Lauderdale&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Fort Worth&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Frankfort&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Franklin&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
                  <value>(&quot;Franklin&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;Franklin&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
                  <value>(&quot;Freeport&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Freeport&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Fremont&quot;,&quot;United States&quot;,&quot;Nebraska&quot;)</value>
                  <value>(&quot;Fresno&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Frisco&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Gaithersburg&quot;,&quot;United States&quot;,&quot;Maryland&quot;)</value>
                  <value>(&quot;Garden City&quot;,&quot;United States&quot;,&quot;Kansas&quot;)</value>
                  <value>(&quot;Garland&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Gastonia&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Georgetown&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
                  <value>(&quot;Gilbert&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
                  <value>(&quot;Gladstone&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
                  <value>(&quot;Glendale&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
                  <value>(&quot;Glenview&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Goldsboro&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Grand Island&quot;,&quot;United States&quot;,&quot;Nebraska&quot;)</value>
                  <value>(&quot;Grand Prairie&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Grand Rapids&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Grapevine&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Great Falls&quot;,&quot;United States&quot;,&quot;Montana&quot;)</value>
                  <value>(&quot;Greeley&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Green Bay&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
                  <value>(&quot;Greensboro&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Greenville&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Greenwood&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;Gresham&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
                  <value>(&quot;Grove City&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Gulfport&quot;,&quot;United States&quot;,&quot;Mississippi&quot;)</value>
                  <value>(&quot;Hackensack&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Hagerstown&quot;,&quot;United States&quot;,&quot;Maryland&quot;)</value>
                  <value>(&quot;Haltom City&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Hamilton&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Hampton&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
                  <value>(&quot;Harlingen&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Harrisonburg&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
                  <value>(&quot;Hattiesburg&quot;,&quot;United States&quot;,&quot;Mississippi&quot;)</value>
                  <value>(&quot;Helena&quot;,&quot;United States&quot;,&quot;Montana&quot;)</value>
                  <value>(&quot;Hempstead&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Henderson&quot;,&quot;United States&quot;,&quot;Nevada&quot;)</value>
                  <value>(&quot;Hendersonville&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;Hesperia&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Hialeah&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Hickory&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Highland Park&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Hillsboro&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
                  <value>(&quot;Holland&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Hollywood&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Holyoke&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
                  <value>(&quot;Homestead&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Hoover&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
                  <value>(&quot;Hot Springs&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
                  <value>(&quot;Houston&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Huntington Beach&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Huntsville&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
                  <value>(&quot;Huntsville&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Independence&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
                  <value>(&quot;Indianapolis&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;Iowa City&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
                  <value>(&quot;Irving&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Jackson&quot;,&quot;United States&quot;,&quot;Mississippi&quot;)</value>
                  <value>(&quot;Jackson&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;Jacksonville&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Jacksonville&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Jamestown&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Jefferson City&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
                  <value>(&quot;Johnson City&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;Jonesboro&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
                  <value>(&quot;Jupiter&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Keller&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Kenner&quot;,&quot;United States&quot;,&quot;Louisiana&quot;)</value>
                  <value>(&quot;Kenosha&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
                  <value>(&quot;Kent&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Kent&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Kirkwood&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
                  <value>(&quot;Kissimmee&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Knoxville&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;La Crosse&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
                  <value>(&quot;La Mesa&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;La Porte&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;La Porte&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;La Quinta&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Lafayette&quot;,&quot;United States&quot;,&quot;Louisiana&quot;)</value>
                  <value>(&quot;Laguna Niguel&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Lake Charles&quot;,&quot;United States&quot;,&quot;Louisiana&quot;)</value>
                  <value>(&quot;Lake Elsinore&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Lake Forest&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Lakeland&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Lakeville&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
                  <value>(&quot;Lakewood&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Lakewood&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Lakewood&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Lancaster&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Lancaster&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Lancaster&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
                  <value>(&quot;Lansing&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Laredo&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Las Cruces&quot;,&quot;United States&quot;,&quot;New Mexico&quot;)</value>
                  <value>(&quot;Las Vegas&quot;,&quot;United States&quot;,&quot;Nevada&quot;)</value>
                  <value>(&quot;Laurel&quot;,&quot;United States&quot;,&quot;Maryland&quot;)</value>
                  <value>(&quot;Lawrence&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;Lawrence&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
                  <value>(&quot;Lawton&quot;,&quot;United States&quot;,&quot;Oklahoma&quot;)</value>
                  <value>(&quot;Layton&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
                  <value>(&quot;League City&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Lebanon&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;Lehi&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
                  <value>(&quot;Leominster&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
                  <value>(&quot;Lewiston&quot;,&quot;United States&quot;,&quot;Idaho&quot;)</value>
                  <value>(&quot;Lewiston&quot;,&quot;United States&quot;,&quot;Maine&quot;)</value>
                  <value>(&quot;Lincoln Park&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Linden&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Lindenhurst&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Little Rock&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
                  <value>(&quot;Littleton&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Lodi&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Logan&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
                  <value>(&quot;Long Beach&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Long Beach&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Longmont&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Longview&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Lorain&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Louisville&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Louisville&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
                  <value>(&quot;Loveland&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Lowell&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
                  <value>(&quot;Lubbock&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Macon&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
                  <value>(&quot;Madison&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
                  <value>(&quot;Malden&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
                  <value>(&quot;Manchester&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
                  <value>(&quot;Manhattan&quot;,&quot;United States&quot;,&quot;Kansas&quot;)</value>
                  <value>(&quot;Mansfield&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Manteca&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Maple Grove&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
                  <value>(&quot;Margate&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Marietta&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
                  <value>(&quot;Marion&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
                  <value>(&quot;Marion&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Marlborough&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
                  <value>(&quot;Marysville&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Mason&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Mcallen&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Medford&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
                  <value>(&quot;Medina&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Melbourne&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Memphis&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;Mentor&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Meriden&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
                  <value>(&quot;Meridian&quot;,&quot;United States&quot;,&quot;Idaho&quot;)</value>
                  <value>(&quot;Mesa&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
                  <value>(&quot;Mesquite&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Miami&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Middletown&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
                  <value>(&quot;Midland&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Milford&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
                  <value>(&quot;Milwaukee&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
                  <value>(&quot;Miramar&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Mishawaka&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;Mission Viejo&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Missoula&quot;,&quot;United States&quot;,&quot;Montana&quot;)</value>
                  <value>(&quot;Missouri City&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Mobile&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
                  <value>(&quot;Modesto&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Monroe&quot;,&quot;United States&quot;,&quot;Louisiana&quot;)</value>
                  <value>(&quot;Monroe&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Montebello&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Montgomery&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
                  <value>(&quot;Moorhead&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
                  <value>(&quot;Moreno Valley&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Morgan Hill&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Morristown&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Mount Pleasant&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Mount Pleasant&quot;,&quot;United States&quot;,&quot;South Carolina&quot;)</value>
                  <value>(&quot;Mount Vernon&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Murfreesboro&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;Murray&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
                  <value>(&quot;Murray&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
                  <value>(&quot;Murrieta&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Muskogee&quot;,&quot;United States&quot;,&quot;Oklahoma&quot;)</value>
                  <value>(&quot;Naperville&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Nashua&quot;,&quot;United States&quot;,&quot;New Hampshire&quot;)</value>
                  <value>(&quot;Nashville&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;New Albany&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;New Bedford&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
                  <value>(&quot;New Brunswick&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;New Castle&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;New Rochelle&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Newark&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Newport News&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
                  <value>(&quot;Niagara Falls&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Noblesville&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;Norfolk&quot;,&quot;United States&quot;,&quot;Nebraska&quot;)</value>
                  <value>(&quot;Normal&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Norman&quot;,&quot;United States&quot;,&quot;Oklahoma&quot;)</value>
                  <value>(&quot;North Charleston&quot;,&quot;United States&quot;,&quot;South Carolina&quot;)</value>
                  <value>(&quot;North Las Vegas&quot;,&quot;United States&quot;,&quot;Nevada&quot;)</value>
                  <value>(&quot;North Miami&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Norwich&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
                  <value>(&quot;Oak Park&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Oak Park&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Oakland&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Oceanside&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Oceanside&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Odessa&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Oklahoma City&quot;,&quot;United States&quot;,&quot;Oklahoma&quot;)</value>
                  <value>(&quot;Olathe&quot;,&quot;United States&quot;,&quot;Kansas&quot;)</value>
                  <value>(&quot;Olympia&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Omaha&quot;,&quot;United States&quot;,&quot;Nebraska&quot;)</value>
                  <value>(&quot;Ontario&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Orange&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Orem&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
                  <value>(&quot;Orland Park&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Orlando&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Ormond Beach&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Oswego&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Overland Park&quot;,&quot;United States&quot;,&quot;Kansas&quot;)</value>
                  <value>(&quot;Owensboro&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
                  <value>(&quot;Oxnard&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Palatine&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Palm Coast&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Park Ridge&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Parker&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Parma&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Pasadena&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Pasadena&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Pasco&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Passaic&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Paterson&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Pearland&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Pembroke Pines&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Pensacola&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Peoria&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
                  <value>(&quot;Peoria&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Perth Amboy&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Pharr&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Philadelphia&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
                  <value>(&quot;Phoenix&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
                  <value>(&quot;Pico Rivera&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Pine Bluff&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
                  <value>(&quot;Plainfield&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Plano&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Plantation&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Pleasant Grove&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
                  <value>(&quot;Pocatello&quot;,&quot;United States&quot;,&quot;Idaho&quot;)</value>
                  <value>(&quot;Pomona&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Pompano Beach&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Port Arthur&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Port Orange&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Port Saint Lucie&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Portage&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;Portland&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
                  <value>(&quot;Provo&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
                  <value>(&quot;Pueblo&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Quincy&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Quincy&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
                  <value>(&quot;Raleigh&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Rancho Cucamonga&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Rapid City&quot;,&quot;United States&quot;,&quot;South Dakota&quot;)</value>
                  <value>(&quot;Reading&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
                  <value>(&quot;Redding&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Redlands&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Redmond&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
                  <value>(&quot;Redmond&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Redondo Beach&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Redwood City&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Reno&quot;,&quot;United States&quot;,&quot;Nevada&quot;)</value>
                  <value>(&quot;Renton&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Revere&quot;,&quot;United States&quot;,&quot;Massachusetts&quot;)</value>
                  <value>(&quot;Richardson&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Richmond&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;Richmond&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
                  <value>(&quot;Richmond&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
                  <value>(&quot;Rio Rancho&quot;,&quot;United States&quot;,&quot;New Mexico&quot;)</value>
                  <value>(&quot;Riverside&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Rochester&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
                  <value>(&quot;Rochester&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Rochester Hills&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Rock Hill&quot;,&quot;United States&quot;,&quot;South Carolina&quot;)</value>
                  <value>(&quot;Rockford&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Rockville&quot;,&quot;United States&quot;,&quot;Maryland&quot;)</value>
                  <value>(&quot;Rogers&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
                  <value>(&quot;Rome&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Romeoville&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Roseville&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Roseville&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Roseville&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
                  <value>(&quot;Roswell&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
                  <value>(&quot;Round Rock&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Royal Oak&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Sacramento&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Saginaw&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Saint Charles&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Saint Charles&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
                  <value>(&quot;Saint Cloud&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
                  <value>(&quot;Saint Louis&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
                  <value>(&quot;Saint Paul&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
                  <value>(&quot;Saint Peters&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
                  <value>(&quot;Saint Petersburg&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Salem&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
                  <value>(&quot;Salem&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
                  <value>(&quot;Salinas&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Salt Lake City&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
                  <value>(&quot;San Angelo&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;San Antonio&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;San Bernardino&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;San Clemente&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;San Gabriel&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;San Jose&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;San Luis Obispo&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;San Marcos&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;San Mateo&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Sandy Springs&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
                  <value>(&quot;Sanford&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Santa Ana&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Santa Barbara&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Santa Clara&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Santa Fe&quot;,&quot;United States&quot;,&quot;New Mexico&quot;)</value>
                  <value>(&quot;Santa Maria&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Scottsdale&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
                  <value>(&quot;Sheboygan&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
                  <value>(&quot;Shelton&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
                  <value>(&quot;Sierra Vista&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
                  <value>(&quot;Sioux Falls&quot;,&quot;United States&quot;,&quot;South Dakota&quot;)</value>
                  <value>(&quot;Skokie&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Smyrna&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
                  <value>(&quot;Smyrna&quot;,&quot;United States&quot;,&quot;Tennessee&quot;)</value>
                  <value>(&quot;South Bend&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;Southaven&quot;,&quot;United States&quot;,&quot;Mississippi&quot;)</value>
                  <value>(&quot;Sparks&quot;,&quot;United States&quot;,&quot;Nevada&quot;)</value>
                  <value>(&quot;Spokane&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Springdale&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
                  <value>(&quot;Springfield&quot;,&quot;United States&quot;,&quot;Missouri&quot;)</value>
                  <value>(&quot;Springfield&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Springfield&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
                  <value>(&quot;Sterling Heights&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Stockton&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Suffolk&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
                  <value>(&quot;Summerville&quot;,&quot;United States&quot;,&quot;South Carolina&quot;)</value>
                  <value>(&quot;Sunnyvale&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Superior&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
                  <value>(&quot;Tallahassee&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Tamarac&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Tampa&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Taylor&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Temecula&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Tempe&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
                  <value>(&quot;Texarkana&quot;,&quot;United States&quot;,&quot;Arkansas&quot;)</value>
                  <value>(&quot;Texas City&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;The Colony&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Thomasville&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Thornton&quot;,&quot;United States&quot;,&quot;Colorado&quot;)</value>
                  <value>(&quot;Thousand Oaks&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Tigard&quot;,&quot;United States&quot;,&quot;Oregon&quot;)</value>
                  <value>(&quot;Tinley Park&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Toledo&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Torrance&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Trenton&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Troy&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Troy&quot;,&quot;United States&quot;,&quot;Ohio&quot;)</value>
                  <value>(&quot;Tucson&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
                  <value>(&quot;Tulsa&quot;,&quot;United States&quot;,&quot;Oklahoma&quot;)</value>
                  <value>(&quot;Tuscaloosa&quot;,&quot;United States&quot;,&quot;Alabama&quot;)</value>
                  <value>(&quot;Twin Falls&quot;,&quot;United States&quot;,&quot;Idaho&quot;)</value>
                  <value>(&quot;Tyler&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Urbandale&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
                  <value>(&quot;Utica&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Vacaville&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Vallejo&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Vancouver&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                  <value>(&quot;Vineland&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Virginia Beach&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
                  <value>(&quot;Visalia&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Waco&quot;,&quot;United States&quot;,&quot;Texas&quot;)</value>
                  <value>(&quot;Warner Robins&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
                  <value>(&quot;Warwick&quot;,&quot;United States&quot;,&quot;Rhode Island&quot;)</value>
                  <value>(&quot;Washington&quot;,&quot;United States&quot;,&quot;District of Columbia&quot;)</value>
                  <value>(&quot;Waterbury&quot;,&quot;United States&quot;,&quot;Connecticut&quot;)</value>
                  <value>(&quot;Waterloo&quot;,&quot;United States&quot;,&quot;Iowa&quot;)</value>
                  <value>(&quot;Watertown&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;Waukesha&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
                  <value>(&quot;Wausau&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
                  <value>(&quot;Waynesboro&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
                  <value>(&quot;West Allis&quot;,&quot;United States&quot;,&quot;Wisconsin&quot;)</value>
                  <value>(&quot;West Jordan&quot;,&quot;United States&quot;,&quot;Utah&quot;)</value>
                  <value>(&quot;West Palm Beach&quot;,&quot;United States&quot;,&quot;Florida&quot;)</value>
                  <value>(&quot;Westfield&quot;,&quot;United States&quot;,&quot;New Jersey&quot;)</value>
                  <value>(&quot;Westland&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Westminster&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Wheeling&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Wheeling&quot;,&quot;United States&quot;,&quot;West Virginia&quot;)</value>
                  <value>(&quot;Whittier&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Wichita&quot;,&quot;United States&quot;,&quot;Kansas&quot;)</value>
                  <value>(&quot;Wilmington&quot;,&quot;United States&quot;,&quot;Delaware&quot;)</value>
                  <value>(&quot;Wilmington&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Wilson&quot;,&quot;United States&quot;,&quot;North Carolina&quot;)</value>
                  <value>(&quot;Woodbury&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
                  <value>(&quot;Woodland&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Woodstock&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
                  <value>(&quot;Woodstock&quot;,&quot;United States&quot;,&quot;Illinois&quot;)</value>
                  <value>(&quot;Woonsocket&quot;,&quot;United States&quot;,&quot;Rhode Island&quot;)</value>
                  <value>(&quot;Yonkers&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                  <value>(&quot;York&quot;,&quot;United States&quot;,&quot;Pennsylvania&quot;)</value>
                  <value>(&quot;Yucaipa&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Yuma&quot;,&quot;United States&quot;,&quot;Arizona&quot;)</value>
                </bin>
                <bin default-name='false' value='&quot;Cluster 2&quot;'>
                  <value>(&quot;Arlington&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
                  <value>(&quot;Atlanta&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
                  <value>(&quot;Brentwood&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Columbus&quot;,&quot;United States&quot;,&quot;Georgia&quot;)</value>
                  <value>(&quot;Detroit&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Henderson&quot;,&quot;United States&quot;,&quot;Kentucky&quot;)</value>
                  <value>(&quot;Inglewood&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Jackson&quot;,&quot;United States&quot;,&quot;Michigan&quot;)</value>
                  <value>(&quot;Lafayette&quot;,&quot;United States&quot;,&quot;Indiana&quot;)</value>
                  <value>(&quot;Minneapolis&quot;,&quot;United States&quot;,&quot;Minnesota&quot;)</value>
                  <value>(&quot;Newark&quot;,&quot;United States&quot;,&quot;Delaware&quot;)</value>
                  <value>(&quot;Providence&quot;,&quot;United States&quot;,&quot;Rhode Island&quot;)</value>
                  <value>(&quot;San Diego&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;San Francisco&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Springfield&quot;,&quot;United States&quot;,&quot;Virginia&quot;)</value>
                </bin>
                <bin default-name='false' value='&quot;Cluster 3&quot;'>
                  <value>(&quot;New York City&quot;,&quot;United States&quot;,&quot;New York&quot;)</value>
                </bin>
                <bin default-name='false' value='&quot;Cluster 4&quot;'>
                  <value>(&quot;Los Angeles&quot;,&quot;United States&quot;,&quot;California&quot;)</value>
                  <value>(&quot;Seattle&quot;,&quot;United States&quot;,&quot;Washington&quot;)</value>
                </bin>
              </calculation>
            </column>
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column aggregation='None' datatype='string' name='[Country/Region]' role='dimension' semantic-role='[Country].[Name]' type='nominal' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='string' name='[State]' role='dimension' semantic-role='[State].[Name]' type='nominal' />
            <column-instance column='[AdhocCluster:2]' derivation='None' is-adhoc-cluster='true' name='[none:AdhocCluster:2:ok]' pivot='key' type='ordinal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country/Region]' derivation='None' name='[none:Country/Region:nk]' pivot='key' type='nominal' />
            <column-instance column='[State]' derivation='None' name='[none:State:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <style>
              <style-rule element='mark'>
                <encoding attr='color' field='[none:AdhocCluster:2:ok]' type='palette'>
                  <map to='#4e79a7'>
                    <bucket>1</bucket>
                  </map>
                  <map to='#76b7b2'>
                    <bucket>4</bucket>
                  </map>
                  <map to='#e15759'>
                    <bucket>3</bucket>
                  </map>
                  <map to='#f28e2b'>
                    <bucket>2</bucket>
                  </map>
                </encoding>
              </style-rule>
            </style>
          </datasource-dependencies>
          <filter class='categorical' column='[dataengine.42019.618651678240].[City, Country/Region, State (clusters)]'>
            <groupfilter function='level-members' level='[City, Country/Region, State (clusters)]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[dataengine.42019.618651678240].[City, Country/Region, State (clusters)]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:AdhocCluster:2:ok]' />
              <lod column='[dataengine.42019.618651678240].[none:Country/Region:nk]' />
              <lod column='[dataengine.42019.618651678240].[none:State:nk]' />
              <lod column='[dataengine.42019.618651678240].[none:City:nk]' />
              <size column='[dataengine.42019.618651678240].[sum:Profit:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[dataengine.42019.618651678240].[Latitude (generated)]</rows>
        <cols>[dataengine.42019.618651678240].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{E50FBBD4-CA80-4F8B-8167-A59114C11EE2}' />
    </worksheet>
    <worksheet name='Furni: Profit Sales Disc Quant by Cat, Order ID'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
          </datasources>
          <datasource-dependencies datasource='dataengine.42019.618651678240'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' default-format='p0.00%' name='[Discount]' role='measure' type='quantitative' />
            <column datatype='string' name='[Order ID]' role='dimension' type='nominal' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='integer' name='[Quantity]' role='measure' type='quantitative' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Order ID]' derivation='None' name='[none:Order ID:nk]' pivot='key' type='nominal' />
            <column-instance column='[Discount]' derivation='Sum' name='[sum:Discount:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Quantity]' derivation='Sum' name='[sum:Quantity:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Category:nk]' />
              <lod column='[dataengine.42019.618651678240].[none:Order ID:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[dataengine.42019.618651678240].[sum:Profit:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Category:nk]' />
              <lod column='[dataengine.42019.618651678240].[none:Order ID:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[dataengine.42019.618651678240].[sum:Sales:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Category:nk]' />
              <lod column='[dataengine.42019.618651678240].[none:Order ID:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[dataengine.42019.618651678240].[sum:Discount:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Category:nk]' />
              <lod column='[dataengine.42019.618651678240].[none:Order ID:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[dataengine.42019.618651678240].[sum:Quantity:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Category:nk]' />
              <lod column='[dataengine.42019.618651678240].[none:Order ID:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
        </panes>
        <rows>([dataengine.42019.618651678240].[sum:Profit:qk] + ([dataengine.42019.618651678240].[sum:Sales:qk] + ([dataengine.42019.618651678240].[sum:Discount:qk] + [dataengine.42019.618651678240].[sum:Quantity:qk])))</rows>
        <cols>([dataengine.42019.618651678240].[sum:Profit:qk] + ([dataengine.42019.618651678240].[sum:Sales:qk] + ([dataengine.42019.618651678240].[sum:Discount:qk] + [dataengine.42019.618651678240].[sum:Quantity:qk])))</cols>
      </table>
      <simple-id uuid='{432322E8-D434-4DE9-ACEC-6CEC3AB0BCD3}' />
    </worksheet>
    <worksheet name='MeasureNames Cat, SubCat by Profit Ratio, Sales table'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (Sample - Superstore)' name='federated.1dsfepz0bnjcff1cg85u60g2ae1k' />
          </datasources>
          <datasource-dependencies datasource='federated.1dsfepz0bnjcff1cg85u60g2ae1k'>
            <column caption='Profit Ratio' datatype='real' name='[Calculation_3626875487110770688]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Profit]) / sum([Sales])' />
            </column>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[Sub-Category]' role='dimension' type='nominal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sub-Category]' derivation='None' name='[none:Sub-Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3626875487110770688]' derivation='User' name='[usr:Calculation_3626875487110770688:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[usr:Calculation_3626875487110770688:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Profit:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[usr:Calculation_3626875487110770688:qk]&quot;</bucket>
              <bucket>&quot;[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]&quot;</bucket>
              <bucket>&quot;[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Profit:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' value='*#' />
            <format attr='font-size' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Sub-Category:nk]' value='12' />
            <format attr='font-weight' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Sub-Category:nk]' value='bold' />
            <format attr='color' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Sub-Category:nk]' value='#4e79a7' />
            <format attr='color' data-class='subtotal' value='#4e79a7' />
            <format attr='font-weight' data-class='subtotal' value='bold' />
            <format attr='font-size' data-class='subtotal' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='font-weight' data-class='subtotal' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Sub-Category:nk]' value='bold' />
            <format attr='color' data-class='subtotal' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Sub-Category:nk]' value='#e15759' />
            <format attr='font-size' data-class='subtotal' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Sub-Category:nk]' value='12' />
            <format attr='background-color' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk]' value='#dfedeb' />
            <format attr='font-size' data-class='total' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk]' value='11' />
            <format attr='font-weight' data-class='total' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk]' value='bold' />
            <format attr='color' data-class='total' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk]' value='#1b1b1b' />
          </style-rule>
          <style-rule element='field-labels'>
            <format attr='font-size' value='12' />
            <format attr='color' value='#b6992d' />
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='field-labels-spanner'>
            <format attr='background-color' scope='rows' value='#f9e9e0' />
            <format attr='background-color' scope='cols' value='#ffffff' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' value='N' />
            <format attr='font-family' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' value='Times New Roman' />
            <format attr='font-size' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' value='12' />
            <format attr='font-weight' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Sub-Category:nk]' value='bold' />
            <format attr='font-size' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Sub-Category:nk]' value='11' />
            <format attr='color' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Sub-Category:nk]' value='#1b1b1b' />
            <format attr='text-orientation' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk]' value='-90' />
            <format attr='wrap' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk]' value='auto' />
            <format attr='font-size' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk]' value='12' />
            <format attr='color' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk]' value='#f28e2b' />
            <format attr='font-weight' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk]' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk] / [federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Sub-Category:nk])</rows>
        <cols>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[:Measure Names]</cols>
        <subtotals>
          <column>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk]</column>
        </subtotals>
      </table>
      <simple-id uuid='{809259A8-DC6F-4EC0-B5CD-B08DDDE863F8}' />
    </worksheet>
    <worksheet name='MeasureNames CustomerName by Profit Ratio, Sales table'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (Sample - Superstore)' name='federated.1dsfepz0bnjcff1cg85u60g2ae1k' />
          </datasources>
          <datasource-dependencies datasource='federated.1dsfepz0bnjcff1cg85u60g2ae1k'>
            <column caption='Profit Ratio' datatype='real' name='[Calculation_3626875487110770688]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Profit]) / sum([Sales])' />
            </column>
            <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Customer Name]' derivation='None' name='[none:Customer Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3626875487110770688]' derivation='User' name='[usr:Calculation_3626875487110770688:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[usr:Calculation_3626875487110770688:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Profit:qk]&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[usr:Calculation_3626875487110770688:qk]&quot;</bucket>
              <bucket>&quot;[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]&quot;</bucket>
              <bucket>&quot;[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Profit:qk]&quot;</bucket>
            </dictionary>
          </manual-sort>
          <manual-sort column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Sean Miller&quot;</bucket>
              <bucket>&quot;Tamara Chand&quot;</bucket>
              <bucket>&quot;Raymond Buch&quot;</bucket>
              <bucket>&quot;Tom Ashbrook&quot;</bucket>
              <bucket>&quot;Adrian Barton&quot;</bucket>
              <bucket>&quot;Ken Lonsdale&quot;</bucket>
              <bucket>&quot;Sanjit Chand&quot;</bucket>
              <bucket>&quot;Hunter Lopez&quot;</bucket>
              <bucket>&quot;Sanjit Engle&quot;</bucket>
              <bucket>&quot;Christopher Conant&quot;</bucket>
              <bucket>&quot;Todd Sumrall&quot;</bucket>
              <bucket>&quot;Greg Tran&quot;</bucket>
              <bucket>&quot;Becky Martin&quot;</bucket>
              <bucket>&quot;Seth Vernon&quot;</bucket>
              <bucket>&quot;Caroline Jumper&quot;</bucket>
              <bucket>&quot;Clay Ludtke&quot;</bucket>
              <bucket>&quot;Maria Etezadi&quot;</bucket>
              <bucket>&quot;Karen Ferguson&quot;</bucket>
              <bucket>&quot;Bill Shonely&quot;</bucket>
              <bucket>&quot;Edward Hooks&quot;</bucket>
              <bucket>&quot;John Lee&quot;</bucket>
              <bucket>&quot;Grant Thornton&quot;</bucket>
              <bucket>&quot;Helen Wasserman&quot;</bucket>
              <bucket>&quot;Tom Boeckenhauer&quot;</bucket>
              <bucket>&quot;Peter Fuller&quot;</bucket>
              <bucket>&quot;Christopher Martinez&quot;</bucket>
              <bucket>&quot;Justin Deggeller&quot;</bucket>
              <bucket>&quot;Joe Elijah&quot;</bucket>
              <bucket>&quot;Laura Armstrong&quot;</bucket>
              <bucket>&quot;Pete Kriz&quot;</bucket>
              <bucket>&quot;Daniel Raglin&quot;</bucket>
              <bucket>&quot;Natalie Fritzler&quot;</bucket>
              <bucket>&quot;Karen Daniels&quot;</bucket>
              <bucket>&quot;Nick Crebassa&quot;</bucket>
              <bucket>&quot;Harry Marie&quot;</bucket>
              <bucket>&quot;Keith Dawkins&quot;</bucket>
              <bucket>&quot;Sean Braxton&quot;</bucket>
              <bucket>&quot;Zuschuss Carroll&quot;</bucket>
              <bucket>&quot;Joseph Holt&quot;</bucket>
              <bucket>&quot;Nora Preis&quot;</bucket>
              <bucket>&quot;Anna Häberlin&quot;</bucket>
              <bucket>&quot;Adam Bellavance&quot;</bucket>
              <bucket>&quot;Jim Epp&quot;</bucket>
              <bucket>&quot;Jane Waco&quot;</bucket>
              <bucket>&quot;Lena Creighton&quot;</bucket>
              <bucket>&quot;John Murray&quot;</bucket>
              <bucket>&quot;Jonathan Doherty&quot;</bucket>
              <bucket>&quot;Patrick O&apos;Brill&quot;</bucket>
              <bucket>&quot;Maribeth Schnelling&quot;</bucket>
              <bucket>&quot;Rick Wilson&quot;</bucket>
              <bucket>&quot;Brian Moss&quot;</bucket>
              <bucket>&quot;Paul Prost&quot;</bucket>
              <bucket>&quot;Natalie Webber&quot;</bucket>
              <bucket>&quot;Dean percer&quot;</bucket>
              <bucket>&quot;Fred Hopkins&quot;</bucket>
              <bucket>&quot;Rick Huthwaite&quot;</bucket>
              <bucket>&quot;Penelope Sewall&quot;</bucket>
              <bucket>&quot;Brenda Bowman&quot;</bucket>
              <bucket>&quot;Joel Eaton&quot;</bucket>
              <bucket>&quot;Yana Sorensen&quot;</bucket>
              <bucket>&quot;Andy Reiter&quot;</bucket>
              <bucket>&quot;Dan Reichenbach&quot;</bucket>
              <bucket>&quot;Grace Kelly&quot;</bucket>
              <bucket>&quot;Joseph Airdo&quot;</bucket>
              <bucket>&quot;Nathan Mautz&quot;</bucket>
              <bucket>&quot;Valerie Dominguez&quot;</bucket>
              <bucket>&quot;Sarah Brown&quot;</bucket>
              <bucket>&quot;James Galang&quot;</bucket>
              <bucket>&quot;Darrin Martin&quot;</bucket>
              <bucket>&quot;Corinna Mitchell&quot;</bucket>
              <bucket>&quot;Max Jones&quot;</bucket>
              <bucket>&quot;Brosina Hoffman&quot;</bucket>
              <bucket>&quot;Rob Lucas&quot;</bucket>
              <bucket>&quot;William Brown&quot;</bucket>
              <bucket>&quot;Victoria Wilson&quot;</bucket>
              <bucket>&quot;Shirley Daniels&quot;</bucket>
              <bucket>&quot;Quincy Jones&quot;</bucket>
              <bucket>&quot;Alan Dominguez&quot;</bucket>
              <bucket>&quot;Cassandra Brandow&quot;</bucket>
              <bucket>&quot;Greg Maxwell&quot;</bucket>
              <bucket>&quot;Shahid Collister&quot;</bucket>
              <bucket>&quot;Kristen Hastings&quot;</bucket>
              <bucket>&quot;Robert Marley&quot;</bucket>
              <bucket>&quot;Keith Herrera&quot;</bucket>
              <bucket>&quot;Ben Ferrer&quot;</bucket>
              <bucket>&quot;Christine Phan&quot;</bucket>
              <bucket>&quot;Bill Donatelli&quot;</bucket>
              <bucket>&quot;Cindy Stewart&quot;</bucket>
              <bucket>&quot;Anne McFarland&quot;</bucket>
              <bucket>&quot;Ross Baird&quot;</bucket>
              <bucket>&quot;Katherine Murray&quot;</bucket>
              <bucket>&quot;Alex Avila&quot;</bucket>
              <bucket>&quot;Suzanne McNair&quot;</bucket>
              <bucket>&quot;Naresj Patel&quot;</bucket>
              <bucket>&quot;Amy Cox&quot;</bucket>
              <bucket>&quot;Mick Hernandez&quot;</bucket>
              <bucket>&quot;Dennis Pardue&quot;</bucket>
              <bucket>&quot;Emily Phan&quot;</bucket>
              <bucket>&quot;Yoseph Carroll&quot;</bucket>
              <bucket>&quot;Stefania Perrino&quot;</bucket>
              <bucket>&quot;Luke Weiss&quot;</bucket>
              <bucket>&quot;Cathy Prescott&quot;</bucket>
              <bucket>&quot;Thomas Seio&quot;</bucket>
              <bucket>&quot;Tonja Turnell&quot;</bucket>
              <bucket>&quot;Mitch Webber&quot;</bucket>
              <bucket>&quot;Tom Prescott&quot;</bucket>
              <bucket>&quot;Tamara Willingham&quot;</bucket>
              <bucket>&quot;Dianna Wilson&quot;</bucket>
              <bucket>&quot;Mitch Willingham&quot;</bucket>
              <bucket>&quot;Harold Ryan&quot;</bucket>
              <bucket>&quot;Steven Cartwright&quot;</bucket>
              <bucket>&quot;Resi Pölking&quot;</bucket>
              <bucket>&quot;Lena Radford&quot;</bucket>
              <bucket>&quot;Mike Pelletier&quot;</bucket>
              <bucket>&quot;Anna Andreadi&quot;</bucket>
              <bucket>&quot;Ivan Liston&quot;</bucket>
              <bucket>&quot;Kelly Lampkin&quot;</bucket>
              <bucket>&quot;Laurel Beltran&quot;</bucket>
              <bucket>&quot;Dave Hallsten&quot;</bucket>
              <bucket>&quot;Irene Maddox&quot;</bucket>
              <bucket>&quot;Ted Trevino&quot;</bucket>
              <bucket>&quot;Kunst Miller&quot;</bucket>
              <bucket>&quot;Philisse Overcash&quot;</bucket>
              <bucket>&quot;Heather Kirkland&quot;</bucket>
              <bucket>&quot;Anthony Jacobs&quot;</bucket>
              <bucket>&quot;Joe Kamberova&quot;</bucket>
              <bucket>&quot;Alan Hwang&quot;</bucket>
              <bucket>&quot;Dean Katz&quot;</bucket>
              <bucket>&quot;Russell Applegate&quot;</bucket>
              <bucket>&quot;Sue Ann Reed&quot;</bucket>
              <bucket>&quot;Jim Kriz&quot;</bucket>
              <bucket>&quot;Bart Watters&quot;</bucket>
              <bucket>&quot;Tracy Blumstein&quot;</bucket>
              <bucket>&quot;Giulietta Baptist&quot;</bucket>
              <bucket>&quot;Rick Bensley&quot;</bucket>
              <bucket>&quot;Erin Smith&quot;</bucket>
              <bucket>&quot;Deborah Brumfield&quot;</bucket>
              <bucket>&quot;Kean Thornton&quot;</bucket>
              <bucket>&quot;Sample Company A&quot;</bucket>
              <bucket>&quot;Eugene Moren&quot;</bucket>
              <bucket>&quot;Dave Brooks&quot;</bucket>
              <bucket>&quot;Anthony Rawles&quot;</bucket>
              <bucket>&quot;Arthur Gainer&quot;</bucket>
              <bucket>&quot;Anthony Johnson&quot;</bucket>
              <bucket>&quot;Linda Cazamias&quot;</bucket>
              <bucket>&quot;Stewart Carmichael&quot;</bucket>
              <bucket>&quot;Theone Pippenger&quot;</bucket>
              <bucket>&quot;Mark Cousins&quot;</bucket>
              <bucket>&quot;Jamie Kunitz&quot;</bucket>
              <bucket>&quot;Katrina Willman&quot;</bucket>
              <bucket>&quot;Bradley Drucker&quot;</bucket>
              <bucket>&quot;Arianne Irving&quot;</bucket>
              <bucket>&quot;Scot Coram&quot;</bucket>
              <bucket>&quot;Ellis Ballard&quot;</bucket>
              <bucket>&quot;Gary Zandusky&quot;</bucket>
              <bucket>&quot;Steven Roelle&quot;</bucket>
              <bucket>&quot;Natalie DeCherney&quot;</bucket>
              <bucket>&quot;Matt Abelman&quot;</bucket>
              <bucket>&quot;Sung Pak&quot;</bucket>
              <bucket>&quot;Dana Kaydos&quot;</bucket>
              <bucket>&quot;Rick Duston&quot;</bucket>
              <bucket>&quot;Toby Carlisle&quot;</bucket>
              <bucket>&quot;Alan Schoenberger&quot;</bucket>
              <bucket>&quot;Frank Hawley&quot;</bucket>
              <bucket>&quot;Claudia Bergmann&quot;</bucket>
              <bucket>&quot;Tracy Hopkins&quot;</bucket>
              <bucket>&quot;Bill Eplett&quot;</bucket>
              <bucket>&quot;Jill Fjeld&quot;</bucket>
              <bucket>&quot;Gary Hwang&quot;</bucket>
              <bucket>&quot;Roland Schwarz&quot;</bucket>
              <bucket>&quot;Muhammed Yedwab&quot;</bucket>
              <bucket>&quot;Peter McVee&quot;</bucket>
              <bucket>&quot;Stewart Visinsky&quot;</bucket>
              <bucket>&quot;Denise Monton&quot;</bucket>
              <bucket>&quot;Frank Preis&quot;</bucket>
              <bucket>&quot;Susan Pistek&quot;</bucket>
              <bucket>&quot;Craig Molinari&quot;</bucket>
              <bucket>&quot;Michael Paige&quot;</bucket>
              <bucket>&quot;Sean Christensen&quot;</bucket>
              <bucket>&quot;Sanjit Jacobs&quot;</bucket>
              <bucket>&quot;Luke Foster&quot;</bucket>
              <bucket>&quot;Pierre Wener&quot;</bucket>
              <bucket>&quot;George Ashbrook&quot;</bucket>
              <bucket>&quot;Ken Heidel&quot;</bucket>
              <bucket>&quot;Chris Cortes&quot;</bucket>
              <bucket>&quot;Dorothy Badders&quot;</bucket>
              <bucket>&quot;Nora Paige&quot;</bucket>
              <bucket>&quot;Kelly Collister&quot;</bucket>
              <bucket>&quot;Fred Chung&quot;</bucket>
              <bucket>&quot;Bill Stewart&quot;</bucket>
              <bucket>&quot;John Stevenson&quot;</bucket>
              <bucket>&quot;Ruben Ausman&quot;</bucket>
              <bucket>&quot;Annie Thurman&quot;</bucket>
              <bucket>&quot;Olvera Toch&quot;</bucket>
              <bucket>&quot;Rose O&apos;Brian&quot;</bucket>
              <bucket>&quot;Michael Chen&quot;</bucket>
              <bucket>&quot;Michael Moore&quot;</bucket>
              <bucket>&quot;Carol Adams&quot;</bucket>
              <bucket>&quot;Matthew Grinstein&quot;</bucket>
              <bucket>&quot;Maribeth Dona&quot;</bucket>
              <bucket>&quot;Jim Karlsson&quot;</bucket>
              <bucket>&quot;Juliana Krohn&quot;</bucket>
              <bucket>&quot;Frank Merwin&quot;</bucket>
              <bucket>&quot;Scott Cohen&quot;</bucket>
              <bucket>&quot;Hunter Glantz&quot;</bucket>
              <bucket>&quot;Ben Peterman&quot;</bucket>
              <bucket>&quot;Liz Preis&quot;</bucket>
              <bucket>&quot;Christopher Schild&quot;</bucket>
              <bucket>&quot;Ed Braxton&quot;</bucket>
              <bucket>&quot;Jeremy Pistek&quot;</bucket>
              <bucket>&quot;Sam Zeldin&quot;</bucket>
              <bucket>&quot;Rick Hansen&quot;</bucket>
              <bucket>&quot;Thomas Boland&quot;</bucket>
              <bucket>&quot;Gary McGarr&quot;</bucket>
              <bucket>&quot;Dionis Lloyd&quot;</bucket>
              <bucket>&quot;Erica Smith&quot;</bucket>
              <bucket>&quot;Robert Waldorf&quot;</bucket>
              <bucket>&quot;Anna Gayman&quot;</bucket>
              <bucket>&quot;Emily Ducich&quot;</bucket>
              <bucket>&quot;Pauline Webber&quot;</bucket>
              <bucket>&quot;Sarah Foster&quot;</bucket>
              <bucket>&quot;Frank Carlisle&quot;</bucket>
              <bucket>&quot;Sally Hughsby&quot;</bucket>
              <bucket>&quot;Sandra Glassco&quot;</bucket>
              <bucket>&quot;Trudy Schmidt&quot;</bucket>
              <bucket>&quot;Sam Craven&quot;</bucket>
              <bucket>&quot;Victoria Pisteka&quot;</bucket>
              <bucket>&quot;Doug Jacobs&quot;</bucket>
              <bucket>&quot;Dianna Vittorini&quot;</bucket>
              <bucket>&quot;Sylvia Foulston&quot;</bucket>
              <bucket>&quot;Dan Campbell&quot;</bucket>
              <bucket>&quot;Arthur Prichep&quot;</bucket>
              <bucket>&quot;Dennis Kane&quot;</bucket>
              <bucket>&quot;Katharine Harms&quot;</bucket>
              <bucket>&quot;Randy Ferguson&quot;</bucket>
              <bucket>&quot;Rick Reed&quot;</bucket>
              <bucket>&quot;Brian Dahlen&quot;</bucket>
              <bucket>&quot;Brian Stugart&quot;</bucket>
              <bucket>&quot;Rob Williams&quot;</bucket>
              <bucket>&quot;Daniel Lacy&quot;</bucket>
              <bucket>&quot;Damala Kotsonis&quot;</bucket>
              <bucket>&quot;Adam Shillingsburg&quot;</bucket>
              <bucket>&quot;Jack O&apos;Briant&quot;</bucket>
              <bucket>&quot;Adam Hart&quot;</bucket>
              <bucket>&quot;Henry Goldwyn&quot;</bucket>
              <bucket>&quot;Lindsay Castell&quot;</bucket>
              <bucket>&quot;Carol Triggs&quot;</bucket>
              <bucket>&quot;Edward Becker&quot;</bucket>
              <bucket>&quot;Sharelle Roach&quot;</bucket>
              <bucket>&quot;Lindsay Williams&quot;</bucket>
              <bucket>&quot;Ricardo Sperren&quot;</bucket>
              <bucket>&quot;Alejandro Savely&quot;</bucket>
              <bucket>&quot;Mark Packer&quot;</bucket>
              <bucket>&quot;Christine Sundaresam&quot;</bucket>
              <bucket>&quot;Brian Thompson&quot;</bucket>
              <bucket>&quot;Deirdre Greer&quot;</bucket>
              <bucket>&quot;Jeremy Lonsdale&quot;</bucket>
              <bucket>&quot;Greg Matthias&quot;</bucket>
              <bucket>&quot;Janet Martin&quot;</bucket>
              <bucket>&quot;Chloris Kastensmidt&quot;</bucket>
              <bucket>&quot;Karen Bern&quot;</bucket>
              <bucket>&quot;Maxwell Schwartz&quot;</bucket>
              <bucket>&quot;Ruben Dartt&quot;</bucket>
              <bucket>&quot;Tanja Norvell&quot;</bucket>
              <bucket>&quot;Steve Nguyen&quot;</bucket>
              <bucket>&quot;Speros Goranitis&quot;</bucket>
              <bucket>&quot;Katherine Hughes&quot;</bucket>
              <bucket>&quot;Patrick Gardner&quot;</bucket>
              <bucket>&quot;Eugene Hildebrand&quot;</bucket>
              <bucket>&quot;Gary Mitchum&quot;</bucket>
              <bucket>&quot;Eugene Barchas&quot;</bucket>
              <bucket>&quot;Mike Gockenbach&quot;</bucket>
              <bucket>&quot;Toby Gnade&quot;</bucket>
              <bucket>&quot;Kean Takahito&quot;</bucket>
              <bucket>&quot;Shahid Shariari&quot;</bucket>
              <bucket>&quot;Sara Luxemburg&quot;</bucket>
              <bucket>&quot;Aaron Smayling&quot;</bucket>
              <bucket>&quot;Cynthia Arntzen&quot;</bucket>
              <bucket>&quot;Carlos Soltero&quot;</bucket>
              <bucket>&quot;Lindsay Shagiari&quot;</bucket>
              <bucket>&quot;Michelle Huthwaite&quot;</bucket>
              <bucket>&quot;Frank Atkinson&quot;</bucket>
              <bucket>&quot;David Bremer&quot;</bucket>
              <bucket>&quot;Noel Staavos&quot;</bucket>
              <bucket>&quot;Tamara Manning&quot;</bucket>
              <bucket>&quot;Christine Kargatis&quot;</bucket>
              <bucket>&quot;Thea Hudgings&quot;</bucket>
              <bucket>&quot;Liz Thompson&quot;</bucket>
              <bucket>&quot;Becky Castell&quot;</bucket>
              <bucket>&quot;Julie Kriz&quot;</bucket>
              <bucket>&quot;Shaun Weien&quot;</bucket>
              <bucket>&quot;Maris LaWare&quot;</bucket>
              <bucket>&quot;Rob Dowd&quot;</bucket>
              <bucket>&quot;Craig Yedwab&quot;</bucket>
              <bucket>&quot;Neil Ducich&quot;</bucket>
              <bucket>&quot;Meg Tillman&quot;</bucket>
              <bucket>&quot;Barry Französisch&quot;</bucket>
              <bucket>&quot;David Smith&quot;</bucket>
              <bucket>&quot;Paul Van Hugh&quot;</bucket>
              <bucket>&quot;Ionia McGrath&quot;</bucket>
              <bucket>&quot;Chuck Clark&quot;</bucket>
              <bucket>&quot;Craig Carroll&quot;</bucket>
              <bucket>&quot;Arthur Wiediger&quot;</bucket>
              <bucket>&quot;Erin Ashbrook&quot;</bucket>
              <bucket>&quot;Linda Southworth&quot;</bucket>
              <bucket>&quot;Darren Budd&quot;</bucket>
              <bucket>&quot;Justin MacKendrick&quot;</bucket>
              <bucket>&quot;Christina VanderZanden&quot;</bucket>
              <bucket>&quot;Troy Staebel&quot;</bucket>
              <bucket>&quot;Gary Hansen&quot;</bucket>
              <bucket>&quot;Barry Gonzalez&quot;</bucket>
              <bucket>&quot;Trudy Brown&quot;</bucket>
              <bucket>&quot;Robert Dilbeck&quot;</bucket>
              <bucket>&quot;John Castell&quot;</bucket>
              <bucket>&quot;Philip Fox&quot;</bucket>
              <bucket>&quot;Emily Burns&quot;</bucket>
              <bucket>&quot;Chris Selesnick&quot;</bucket>
              <bucket>&quot;Michelle Moray&quot;</bucket>
              <bucket>&quot;Ken Black&quot;</bucket>
              <bucket>&quot;Lauren Leatherbury&quot;</bucket>
              <bucket>&quot;Marc Crier&quot;</bucket>
              <bucket>&quot;John Lucas&quot;</bucket>
              <bucket>&quot;Marina Lichtenstein&quot;</bucket>
              <bucket>&quot;Jay Kimmel&quot;</bucket>
              <bucket>&quot;Justin Ellison&quot;</bucket>
              <bucket>&quot;Bradley Talbott&quot;</bucket>
              <bucket>&quot;Bill Overfelt&quot;</bucket>
              <bucket>&quot;Frank Olsen&quot;</bucket>
              <bucket>&quot;Nicole Hansen&quot;</bucket>
              <bucket>&quot;Richard Bierner&quot;</bucket>
              <bucket>&quot;Eva Jacobs&quot;</bucket>
              <bucket>&quot;Dave Kipp&quot;</bucket>
              <bucket>&quot;Christina Anderson&quot;</bucket>
              <bucket>&quot;Logan Currie&quot;</bucket>
              <bucket>&quot;Ralph Arnett&quot;</bucket>
              <bucket>&quot;Katherine Nockton&quot;</bucket>
              <bucket>&quot;Sean O&apos;Donnell&quot;</bucket>
              <bucket>&quot;Stephanie Ulpright&quot;</bucket>
              <bucket>&quot;Helen Andreada&quot;</bucket>
              <bucket>&quot;Alejandro Grove&quot;</bucket>
              <bucket>&quot;Lena Cacioppo&quot;</bucket>
              <bucket>&quot;Steve Chapman&quot;</bucket>
              <bucket>&quot;Neola Schneider&quot;</bucket>
              <bucket>&quot;Beth Thompson&quot;</bucket>
              <bucket>&quot;Eleni McCrary&quot;</bucket>
              <bucket>&quot;Mary Zewe&quot;</bucket>
              <bucket>&quot;Bruce Stewart&quot;</bucket>
              <bucket>&quot;Deanra Eno&quot;</bucket>
              <bucket>&quot;Corey Catlett&quot;</bucket>
              <bucket>&quot;Ann Chong&quot;</bucket>
              <bucket>&quot;Charles McCrossin&quot;</bucket>
              <bucket>&quot;Herbert Flentye&quot;</bucket>
              <bucket>&quot;Fred McMath&quot;</bucket>
              <bucket>&quot;Julia Barnett&quot;</bucket>
              <bucket>&quot;Joy Smith&quot;</bucket>
              <bucket>&quot;Don Jones&quot;</bucket>
              <bucket>&quot;Amy Hunt&quot;</bucket>
              <bucket>&quot;Patrick O&apos;Donnell&quot;</bucket>
              <bucket>&quot;Nick Zandusky&quot;</bucket>
              <bucket>&quot;Michael Nguyen&quot;</bucket>
              <bucket>&quot;Beth Paige&quot;</bucket>
              <bucket>&quot;Charles Crestani&quot;</bucket>
              <bucket>&quot;Nat Carroll&quot;</bucket>
              <bucket>&quot;Filia McAdams&quot;</bucket>
              <bucket>&quot;Mark Hamilton&quot;</bucket>
              <bucket>&quot;Brendan Sweed&quot;</bucket>
              <bucket>&quot;Valerie Mitchum&quot;</bucket>
              <bucket>&quot;George Zrebassa&quot;</bucket>
              <bucket>&quot;Michelle Arnett&quot;</bucket>
              <bucket>&quot;Bart Pistole&quot;</bucket>
              <bucket>&quot;Matt Collister&quot;</bucket>
              <bucket>&quot;Thea Hendricks&quot;</bucket>
              <bucket>&quot;Marc Harrigan&quot;</bucket>
              <bucket>&quot;David Flashing&quot;</bucket>
              <bucket>&quot;Xylona Preis&quot;</bucket>
              <bucket>&quot;Clytie Kelty&quot;</bucket>
              <bucket>&quot;Jennifer Ferguson&quot;</bucket>
              <bucket>&quot;Cynthia Voltz&quot;</bucket>
              <bucket>&quot;Nick Radford&quot;</bucket>
              <bucket>&quot;Jack Garza&quot;</bucket>
              <bucket>&quot;Andrew Gjertsen&quot;</bucket>
              <bucket>&quot;Craig Leslie&quot;</bucket>
              <bucket>&quot;Maureen Gastineau&quot;</bucket>
              <bucket>&quot;Roland Fjeld&quot;</bucket>
              <bucket>&quot;Elizabeth Moffitt&quot;</bucket>
              <bucket>&quot;Dean Braden&quot;</bucket>
              <bucket>&quot;Chris McAfee&quot;</bucket>
              <bucket>&quot;Michael Kennedy&quot;</bucket>
              <bucket>&quot;Lena Hernandez&quot;</bucket>
              <bucket>&quot;Kristina Nunn&quot;</bucket>
              <bucket>&quot;Jamie Frazer&quot;</bucket>
              <bucket>&quot;Fred Harton&quot;</bucket>
              <bucket>&quot;Craig Carreira&quot;</bucket>
              <bucket>&quot;Bobby Elias&quot;</bucket>
              <bucket>&quot;Kalyca Meade&quot;</bucket>
              <bucket>&quot;Matt Connell&quot;</bucket>
              <bucket>&quot;Justin Hirsh&quot;</bucket>
              <bucket>&quot;Maribeth Yedwab&quot;</bucket>
              <bucket>&quot;Ken Dana&quot;</bucket>
              <bucket>&quot;Tony Sayre&quot;</bucket>
              <bucket>&quot;Jason Gross&quot;</bucket>
              <bucket>&quot;Laurel Workman&quot;</bucket>
              <bucket>&quot;Allen Rosenblatt&quot;</bucket>
              <bucket>&quot;Greg Guthrie&quot;</bucket>
              <bucket>&quot;Nathan Cano&quot;</bucket>
              <bucket>&quot;Mick Crebagga&quot;</bucket>
              <bucket>&quot;Dave Poirier&quot;</bucket>
              <bucket>&quot;Phillip Flathmann&quot;</bucket>
              <bucket>&quot;Maya Herman&quot;</bucket>
              <bucket>&quot;Janet Lee&quot;</bucket>
              <bucket>&quot;Justin Ritter&quot;</bucket>
              <bucket>&quot;Edward Nazzal&quot;</bucket>
              <bucket>&quot;Toby Braunhardt&quot;</bucket>
              <bucket>&quot;Giulietta Weimer&quot;</bucket>
              <bucket>&quot;Bill Tyler&quot;</bucket>
              <bucket>&quot;Pamela Stobb&quot;</bucket>
              <bucket>&quot;Shahid Hopkins&quot;</bucket>
              <bucket>&quot;Kean Nguyen&quot;</bucket>
              <bucket>&quot;Daniel Byrd&quot;</bucket>
              <bucket>&quot;Roy Phan&quot;</bucket>
              <bucket>&quot;Theresa Swint&quot;</bucket>
              <bucket>&quot;Helen Abelman&quot;</bucket>
              <bucket>&quot;Ed Jacobs&quot;</bucket>
              <bucket>&quot;Neoma Murray&quot;</bucket>
              <bucket>&quot;John Dryer&quot;</bucket>
              <bucket>&quot;Clay Rozendal&quot;</bucket>
              <bucket>&quot;Duane Noonan&quot;</bucket>
              <bucket>&quot;Karen Carlisle&quot;</bucket>
              <bucket>&quot;Stefanie Holloman&quot;</bucket>
              <bucket>&quot;Liz Carlisle&quot;</bucket>
              <bucket>&quot;Rob Haberlin&quot;</bucket>
              <bucket>&quot;Trudy Glocke&quot;</bucket>
              <bucket>&quot;Max Ludwig&quot;</bucket>
              <bucket>&quot;Roger Barcio&quot;</bucket>
              <bucket>&quot;Tom Stivers&quot;</bucket>
              <bucket>&quot;Art Ferguson&quot;</bucket>
              <bucket>&quot;Carlos Daly&quot;</bucket>
              <bucket>&quot;Nicole Fjeld&quot;</bucket>
              <bucket>&quot;Denny Joy&quot;</bucket>
              <bucket>&quot;Victoria Brennan&quot;</bucket>
              <bucket>&quot;Harold Pawlan&quot;</bucket>
              <bucket>&quot;Doug Bickford&quot;</bucket>
              <bucket>&quot;Paul Gonzalez&quot;</bucket>
              <bucket>&quot;Nona Balk&quot;</bucket>
              <bucket>&quot;Scott Williamson&quot;</bucket>
              <bucket>&quot;Lisa DeCherney&quot;</bucket>
              <bucket>&quot;Christy Brittain&quot;</bucket>
              <bucket>&quot;Tracy Poddar&quot;</bucket>
              <bucket>&quot;Jas O&apos;Carroll&quot;</bucket>
              <bucket>&quot;Jay Fein&quot;</bucket>
              <bucket>&quot;Max Engle&quot;</bucket>
              <bucket>&quot;Susan Vittorini&quot;</bucket>
              <bucket>&quot;Katherine Ducich&quot;</bucket>
              <bucket>&quot;Giulietta Dortch&quot;</bucket>
              <bucket>&quot;Sheri Gordon&quot;</bucket>
              <bucket>&quot;Lisa Ryan&quot;</bucket>
              <bucket>&quot;Shaun Chance&quot;</bucket>
              <bucket>&quot;Brooke Gillingham&quot;</bucket>
              <bucket>&quot;Stephanie Phelps&quot;</bucket>
              <bucket>&quot;Nat Gilpin&quot;</bucket>
              <bucket>&quot;Cynthia Delaney&quot;</bucket>
              <bucket>&quot;Skye Norling&quot;</bucket>
              <bucket>&quot;Patrick Ryan&quot;</bucket>
              <bucket>&quot;Ashley Jarboe&quot;</bucket>
              <bucket>&quot;Pamela Coakley&quot;</bucket>
              <bucket>&quot;Emily Grady&quot;</bucket>
              <bucket>&quot;Pauline Johnson&quot;</bucket>
              <bucket>&quot;Noah Childs&quot;</bucket>
              <bucket>&quot;Janet Molinari&quot;</bucket>
              <bucket>&quot;Jennifer Braxton&quot;</bucket>
              <bucket>&quot;Andrew Allen&quot;</bucket>
              <bucket>&quot;Chad Cunningham&quot;</bucket>
              <bucket>&quot;Darrin Sayre&quot;</bucket>
              <bucket>&quot;Monica Federle&quot;</bucket>
              <bucket>&quot;Aaron Hawkins&quot;</bucket>
              <bucket>&quot;Logan Haushalter&quot;</bucket>
              <bucket>&quot;Ben Wallace&quot;</bucket>
              <bucket>&quot;Valerie Takahito&quot;</bucket>
              <bucket>&quot;Adrian Hane&quot;</bucket>
              <bucket>&quot;Mike Vittorini&quot;</bucket>
              <bucket>&quot;Jessica Myrick&quot;</bucket>
              <bucket>&quot;Brad Eason&quot;</bucket>
              <bucket>&quot;Denny Blanton&quot;</bucket>
              <bucket>&quot;Julie Prescott&quot;</bucket>
              <bucket>&quot;Tracy Zic&quot;</bucket>
              <bucket>&quot;Becky Pak&quot;</bucket>
              <bucket>&quot;Darren Koutras&quot;</bucket>
              <bucket>&quot;Meg O&apos;Connel&quot;</bucket>
              <bucket>&quot;Ryan Akin&quot;</bucket>
              <bucket>&quot;Katrina Edelman&quot;</bucket>
              <bucket>&quot;Cathy Armstrong&quot;</bucket>
              <bucket>&quot;Candace McMahon&quot;</bucket>
              <bucket>&quot;Jennifer Patt&quot;</bucket>
              <bucket>&quot;Chad McGuire&quot;</bucket>
              <bucket>&quot;Cindy Chapman&quot;</bucket>
              <bucket>&quot;Erica Bern&quot;</bucket>
              <bucket>&quot;Anne Pryor&quot;</bucket>
              <bucket>&quot;Annie Zypern&quot;</bucket>
              <bucket>&quot;Maurice Satty&quot;</bucket>
              <bucket>&quot;Tim Brockman&quot;</bucket>
              <bucket>&quot;Craig Reiter&quot;</bucket>
              <bucket>&quot;Alan Haines&quot;</bucket>
              <bucket>&quot;Benjamin Farhat&quot;</bucket>
              <bucket>&quot;Cyma Kinney&quot;</bucket>
              <bucket>&quot;Mike Caudle&quot;</bucket>
              <bucket>&quot;James Lanier&quot;</bucket>
              <bucket>&quot;Karl Braun&quot;</bucket>
              <bucket>&quot;George Bell&quot;</bucket>
              <bucket>&quot;Odella Nelson&quot;</bucket>
              <bucket>&quot;Mark Van Huff&quot;</bucket>
              <bucket>&quot;Maria Bertelson&quot;</bucket>
              <bucket>&quot;Brian DeCherney&quot;</bucket>
              <bucket>&quot;Cathy Hwang&quot;</bucket>
              <bucket>&quot;Bruce Degenhardt&quot;</bucket>
              <bucket>&quot;Benjamin Venier&quot;</bucket>
              <bucket>&quot;Kelly Andreada&quot;</bucket>
              <bucket>&quot;Ann Blume&quot;</bucket>
              <bucket>&quot;John Grady&quot;</bucket>
              <bucket>&quot;Dan Lawera&quot;</bucket>
              <bucket>&quot;Zuschuss Donatelli&quot;</bucket>
              <bucket>&quot;Charlotte Melton&quot;</bucket>
              <bucket>&quot;Laurel Elliston&quot;</bucket>
              <bucket>&quot;Ted Butterfield&quot;</bucket>
              <bucket>&quot;Parhena Norris&quot;</bucket>
              <bucket>&quot;Ralph Kennedy&quot;</bucket>
              <bucket>&quot;Bradley Nguyen&quot;</bucket>
              <bucket>&quot;Delfina Latchford&quot;</bucket>
              <bucket>&quot;Philip Brown&quot;</bucket>
              <bucket>&quot;Andy Gerbode&quot;</bucket>
              <bucket>&quot;Raymond Messe&quot;</bucket>
              <bucket>&quot;Paul Knutson&quot;</bucket>
              <bucket>&quot;Tamara Dahlen&quot;</bucket>
              <bucket>&quot;Julia West&quot;</bucket>
              <bucket>&quot;Mick Brown&quot;</bucket>
              <bucket>&quot;Thomas Thornton&quot;</bucket>
              <bucket>&quot;Christine Abelman&quot;</bucket>
              <bucket>&quot;Roger Demir&quot;</bucket>
              <bucket>&quot;Nancy Lomonaco&quot;</bucket>
              <bucket>&quot;Jill Stevenson&quot;</bucket>
              <bucket>&quot;Paul MacIntyre&quot;</bucket>
              <bucket>&quot;Guy Armstrong&quot;</bucket>
              <bucket>&quot;Cyra Reiten&quot;</bucket>
              <bucket>&quot;Nathan Gelder&quot;</bucket>
              <bucket>&quot;Jeremy Ellison&quot;</bucket>
              <bucket>&quot;Troy Blackwell&quot;</bucket>
              <bucket>&quot;Frank Gastineau&quot;</bucket>
              <bucket>&quot;Don Miller&quot;</bucket>
              <bucket>&quot;Gene Hale&quot;</bucket>
              <bucket>&quot;Sarah Bern&quot;</bucket>
              <bucket>&quot;Liz MacKendrick&quot;</bucket>
              <bucket>&quot;Maureen Gnade&quot;</bucket>
              <bucket>&quot;Sarah Jordon&quot;</bucket>
              <bucket>&quot;Bryan Mills&quot;</bucket>
              <bucket>&quot;Barry Franz&quot;</bucket>
              <bucket>&quot;Saphhira Shifley&quot;</bucket>
              <bucket>&quot;Dario Medina&quot;</bucket>
              <bucket>&quot;Michelle Tran&quot;</bucket>
              <bucket>&quot;Shirley Jackson&quot;</bucket>
              <bucket>&quot;Magdelene Morse&quot;</bucket>
              <bucket>&quot;Sibella Parks&quot;</bucket>
              <bucket>&quot;Matt Collins&quot;</bucket>
              <bucket>&quot;Eileen Kiefer&quot;</bucket>
              <bucket>&quot;Corey-Lock&quot;</bucket>
              <bucket>&quot;Denny Ordway&quot;</bucket>
              <bucket>&quot;Hallie Redmond&quot;</bucket>
              <bucket>&quot;Georgia Rosenberg&quot;</bucket>
              <bucket>&quot;Cari Sayre&quot;</bucket>
              <bucket>&quot;Paul Stevenson&quot;</bucket>
              <bucket>&quot;Stuart Van&quot;</bucket>
              <bucket>&quot;Doug O&apos;Connell&quot;</bucket>
              <bucket>&quot;Carl Ludwig&quot;</bucket>
              <bucket>&quot;Liz Willingham&quot;</bucket>
              <bucket>&quot;Michelle Ellison&quot;</bucket>
              <bucket>&quot;Gene McClure&quot;</bucket>
              <bucket>&quot;Steve Carroll&quot;</bucket>
              <bucket>&quot;Matt Hagelstein&quot;</bucket>
              <bucket>&quot;Elpida Rittenbach&quot;</bucket>
              <bucket>&quot;Tony Chapman&quot;</bucket>
              <bucket>&quot;Joni Wasserman&quot;</bucket>
              <bucket>&quot;Michael Grace&quot;</bucket>
              <bucket>&quot;Nora Pelletier&quot;</bucket>
              <bucket>&quot;Patrick Jones&quot;</bucket>
              <bucket>&quot;Erica Hernandez&quot;</bucket>
              <bucket>&quot;Jack Lebron&quot;</bucket>
              <bucket>&quot;Christina DeMoss&quot;</bucket>
              <bucket>&quot;Michael Dominguez&quot;</bucket>
              <bucket>&quot;Dorothy Wardle&quot;</bucket>
              <bucket>&quot;Evan Bailliet&quot;</bucket>
              <bucket>&quot;Benjamin Patterson&quot;</bucket>
              <bucket>&quot;Debra Catini&quot;</bucket>
              <bucket>&quot;Alyssa Tate&quot;</bucket>
              <bucket>&quot;Jim Radford&quot;</bucket>
              <bucket>&quot;Duane Benoit&quot;</bucket>
              <bucket>&quot;Claire Gute&quot;</bucket>
              <bucket>&quot;Kimberly Carter&quot;</bucket>
              <bucket>&quot;Ross DeVincentis&quot;</bucket>
              <bucket>&quot;Carl Weiss&quot;</bucket>
              <bucket>&quot;Jim Sink&quot;</bucket>
              <bucket>&quot;Darrin Van Huff&quot;</bucket>
              <bucket>&quot;Alan Barnes&quot;</bucket>
              <bucket>&quot;Tony Molinari&quot;</bucket>
              <bucket>&quot;Jesus Ocampo&quot;</bucket>
              <bucket>&quot;Scot Wooten&quot;</bucket>
              <bucket>&quot;Jeremy Farry&quot;</bucket>
              <bucket>&quot;Dennis Bolton&quot;</bucket>
              <bucket>&quot;David Wiener&quot;</bucket>
              <bucket>&quot;Cindy Schnelling&quot;</bucket>
              <bucket>&quot;Pauline Chand&quot;</bucket>
              <bucket>&quot;David Philippe&quot;</bucket>
              <bucket>&quot;Jenna Caffey&quot;</bucket>
              <bucket>&quot;Phillina Ober&quot;</bucket>
              <bucket>&quot;Allen Armold&quot;</bucket>
              <bucket>&quot;Vivek Sundaresam&quot;</bucket>
              <bucket>&quot;Alex Russell&quot;</bucket>
              <bucket>&quot;Darren Powers&quot;</bucket>
              <bucket>&quot;Duane Huffman&quot;</bucket>
              <bucket>&quot;Susan MacKendrick&quot;</bucket>
              <bucket>&quot;Eudokia Martin&quot;</bucket>
              <bucket>&quot;Theresa Coyne&quot;</bucket>
              <bucket>&quot;Mike Kennedy&quot;</bucket>
              <bucket>&quot;Tiffany House&quot;</bucket>
              <bucket>&quot;Sean Wendt&quot;</bucket>
              <bucket>&quot;Luke Schmidt&quot;</bucket>
              <bucket>&quot;Randy Bradley&quot;</bucket>
              <bucket>&quot;Lynn Smith&quot;</bucket>
              <bucket>&quot;Bruce Geld&quot;</bucket>
              <bucket>&quot;Victor Preis&quot;</bucket>
              <bucket>&quot;Ken Brennan&quot;</bucket>
              <bucket>&quot;Barry Pond&quot;</bucket>
              <bucket>&quot;Toby Swindell&quot;</bucket>
              <bucket>&quot;Russell D&apos;Ascenzo&quot;</bucket>
              <bucket>&quot;Aimee Bixby&quot;</bucket>
              <bucket>&quot;Roy Collins&quot;</bucket>
              <bucket>&quot;Sung Shariari&quot;</bucket>
              <bucket>&quot;Jonathan Howell&quot;</bucket>
              <bucket>&quot;Jason Fortune-&quot;</bucket>
              <bucket>&quot;Rachel Payne&quot;</bucket>
              <bucket>&quot;Bryan Spruell&quot;</bucket>
              <bucket>&quot;Roy Französisch&quot;</bucket>
              <bucket>&quot;Eric Barreto&quot;</bucket>
              <bucket>&quot;Maureen Fritzler&quot;</bucket>
              <bucket>&quot;Eric Murdock&quot;</bucket>
              <bucket>&quot;Alyssa Crouse&quot;</bucket>
              <bucket>&quot;Evan Henry&quot;</bucket>
              <bucket>&quot;Mary O&apos;Rourke&quot;</bucket>
              <bucket>&quot;Alejandro Ballentine&quot;</bucket>
              <bucket>&quot;Katrina Bavinger&quot;</bucket>
              <bucket>&quot;Catherine Glotzbach&quot;</bucket>
              <bucket>&quot;Sonia Cooley&quot;</bucket>
              <bucket>&quot;Joni Blumstein&quot;</bucket>
              <bucket>&quot;Henia Zydlo&quot;</bucket>
              <bucket>&quot;Aaron Bergman&quot;</bucket>
              <bucket>&quot;Ryan Crowe&quot;</bucket>
              <bucket>&quot;Chad Sievert&quot;</bucket>
              <bucket>&quot;Harold Engle&quot;</bucket>
              <bucket>&quot;Sally Knutson&quot;</bucket>
              <bucket>&quot;Richard Eichhorn&quot;</bucket>
              <bucket>&quot;Jim Mitchum&quot;</bucket>
              <bucket>&quot;Jocasta Rupert&quot;</bucket>
              <bucket>&quot;Art Foster&quot;</bucket>
              <bucket>&quot;Julie Creighton&quot;</bucket>
              <bucket>&quot;Michael Stewart&quot;</bucket>
              <bucket>&quot;Vicky Freymann&quot;</bucket>
              <bucket>&quot;Vivek Gonzalez&quot;</bucket>
              <bucket>&quot;Charles Sheldon&quot;</bucket>
              <bucket>&quot;Todd Boyes&quot;</bucket>
              <bucket>&quot;Ann Steele&quot;</bucket>
              <bucket>&quot;Erica Hackney&quot;</bucket>
              <bucket>&quot;Thomas Brumley&quot;</bucket>
              <bucket>&quot;Alice McCarthy&quot;</bucket>
              <bucket>&quot;Brendan Murry&quot;</bucket>
              <bucket>&quot;David Kendrick&quot;</bucket>
              <bucket>&quot;Matthew Clasen&quot;</bucket>
              <bucket>&quot;Beth Fritzler&quot;</bucket>
              <bucket>&quot;Harry Greene&quot;</bucket>
              <bucket>&quot;Michael Granlund&quot;</bucket>
              <bucket>&quot;Muhammed MacIntyre&quot;</bucket>
              <bucket>&quot;Sandra Flanagan&quot;</bucket>
              <bucket>&quot;Steven Ward&quot;</bucket>
              <bucket>&quot;Liz Pelletier&quot;</bucket>
              <bucket>&quot;Dorris liebe&quot;</bucket>
              <bucket>&quot;Ivan Gibson&quot;</bucket>
              <bucket>&quot;Barry Blumstein&quot;</bucket>
              <bucket>&quot;Tracy Collins&quot;</bucket>
              <bucket>&quot;Michelle Lonsdale&quot;</bucket>
              <bucket>&quot;Ritsa Hightower&quot;</bucket>
              <bucket>&quot;Patrick Bzostek&quot;</bucket>
              <bucket>&quot;Angele Hood&quot;</bucket>
              <bucket>&quot;Henry MacAllister&quot;</bucket>
              <bucket>&quot;Patricia Hirasaki&quot;</bucket>
              <bucket>&quot;Pete Armstrong&quot;</bucket>
              <bucket>&quot;Jennifer Jackson&quot;</bucket>
              <bucket>&quot;Julia Dunbar&quot;</bucket>
              <bucket>&quot;Peter Bühler&quot;</bucket>
              <bucket>&quot;Eric Hoffmann&quot;</bucket>
              <bucket>&quot;Toby Ritter&quot;</bucket>
              <bucket>&quot;Alex Grayson&quot;</bucket>
              <bucket>&quot;Berenike Kampe&quot;</bucket>
              <bucket>&quot;Bryan Davis&quot;</bucket>
              <bucket>&quot;Anna Chung&quot;</bucket>
              <bucket>&quot;Anthony Witt&quot;</bucket>
              <bucket>&quot;Lori Olson&quot;</bucket>
              <bucket>&quot;Joy Bell-&quot;</bucket>
              <bucket>&quot;Carol Darley&quot;</bucket>
              <bucket>&quot;Mathew Reese&quot;</bucket>
              <bucket>&quot;Astrea Jones&quot;</bucket>
              <bucket>&quot;Ralph Ritter&quot;</bucket>
              <bucket>&quot;Shirley Schmidt&quot;</bucket>
              <bucket>&quot;Bobby Trafton&quot;</bucket>
              <bucket>&quot;Barbara Fisher&quot;</bucket>
              <bucket>&quot;Maria Zettner&quot;</bucket>
              <bucket>&quot;Denise Leinenbach&quot;</bucket>
              <bucket>&quot;Alan Shonely&quot;</bucket>
              <bucket>&quot;Brian Derr&quot;</bucket>
              <bucket>&quot;Neil Knudson&quot;</bucket>
              <bucket>&quot;Carlos Meador&quot;</bucket>
              <bucket>&quot;Chuck Sachs&quot;</bucket>
              <bucket>&quot;Cari Schnelling&quot;</bucket>
              <bucket>&quot;John Huston&quot;</bucket>
              <bucket>&quot;Rob Beeghly&quot;</bucket>
              <bucket>&quot;Andy Yotov&quot;</bucket>
              <bucket>&quot;Corey Roper&quot;</bucket>
              <bucket>&quot;MaryBeth Skach&quot;</bucket>
              <bucket>&quot;Joni Sundaresam&quot;</bucket>
              <bucket>&quot;Erin Creighton&quot;</bucket>
              <bucket>&quot;Khloe Miller&quot;</bucket>
              <bucket>&quot;Kelly Williams&quot;</bucket>
              <bucket>&quot;Tim Taslimi&quot;</bucket>
              <bucket>&quot;Shui Tom&quot;</bucket>
              <bucket>&quot;Vivek Grady&quot;</bucket>
              <bucket>&quot;Sonia Sunley&quot;</bucket>
              <bucket>&quot;Brad Thomas&quot;</bucket>
              <bucket>&quot;Mark Haberlin&quot;</bucket>
              <bucket>&quot;Barry Weirich&quot;</bucket>
              <bucket>&quot;Joy Daniels&quot;</bucket>
              <bucket>&quot;Jason Klamczynski&quot;</bucket>
              <bucket>&quot;Vivian Mathis&quot;</bucket>
              <bucket>&quot;Neil Französisch&quot;</bucket>
              <bucket>&quot;Melanie Seite&quot;</bucket>
              <bucket>&quot;Lycoris Saunders&quot;</bucket>
              <bucket>&quot;Aleksandra Gannaway&quot;</bucket>
              <bucket>&quot;Evan Minnotte&quot;</bucket>
              <bucket>&quot;Heather Jas&quot;</bucket>
              <bucket>&quot;Don Weiss&quot;</bucket>
              <bucket>&quot;Larry Tron&quot;</bucket>
              <bucket>&quot;Brendan Dodson&quot;</bucket>
              <bucket>&quot;Lisa Hazard&quot;</bucket>
              <bucket>&quot;Jennifer Halladay&quot;</bucket>
              <bucket>&quot;Jill Matthias&quot;</bucket>
              <bucket>&quot;Chuck Magee&quot;</bucket>
              <bucket>&quot;Larry Hughes&quot;</bucket>
              <bucket>&quot;Sung Chung&quot;</bucket>
              <bucket>&quot;Stuart Calhoun&quot;</bucket>
              <bucket>&quot;Nicole Brennan&quot;</bucket>
              <bucket>&quot;Bart Folk&quot;</bucket>
              <bucket>&quot;Dorothy Dickinson&quot;</bucket>
              <bucket>&quot;Brad Norvell&quot;</bucket>
              <bucket>&quot;Andrew Roberts&quot;</bucket>
              <bucket>&quot;Harold Dahlen&quot;</bucket>
              <bucket>&quot;Sally Matthias&quot;</bucket>
              <bucket>&quot;Paul Lucas&quot;</bucket>
              <bucket>&quot;Guy Phonely&quot;</bucket>
              <bucket>&quot;Erin Mull&quot;</bucket>
              <bucket>&quot;Guy Thornton&quot;</bucket>
              <bucket>&quot;Robert Barroso&quot;</bucket>
              <bucket>&quot;Hilary Holden&quot;</bucket>
              <bucket>&quot;Allen Goldenen&quot;</bucket>
              <bucket>&quot;Joel Jenkins&quot;</bucket>
              <bucket>&quot;Anthony Garverick&quot;</bucket>
              <bucket>&quot;Muhammed Lee&quot;</bucket>
              <bucket>&quot;Anthony O&apos;Donnell&quot;</bucket>
              <bucket>&quot;Pete Takahito&quot;</bucket>
              <bucket>&quot;Dianna Arnett&quot;</bucket>
              <bucket>&quot;Michael Oakman&quot;</bucket>
              <bucket>&quot;Greg Hansen&quot;</bucket>
              <bucket>&quot;Phillip Breyer&quot;</bucket>
              <bucket>&quot;Bobby Odegard&quot;</bucket>
              <bucket>&quot;Ed Ludwig&quot;</bucket>
              <bucket>&quot;Clay Cheatham&quot;</bucket>
              <bucket>&quot;Roland Murray&quot;</bucket>
              <bucket>&quot;Karen Seio&quot;</bucket>
              <bucket>&quot;Anemone Ratner&quot;</bucket>
              <bucket>&quot;Fred Wasserman&quot;</bucket>
              <bucket>&quot;Jasper Cacioppo&quot;</bucket>
              <bucket>&quot;Adrian Shami&quot;</bucket>
              <bucket>&quot;Larry Blacks&quot;</bucket>
              <bucket>&quot;Ricardo Emerson&quot;</bucket>
              <bucket>&quot;Susan Gilcrest&quot;</bucket>
              <bucket>&quot;Roy Skaria&quot;</bucket>
              <bucket>&quot;Mitch Gastineau&quot;</bucket>
              <bucket>&quot;Carl Jackson&quot;</bucket>
              <bucket>&quot;Lela Donovan&quot;</bucket>
              <bucket>&quot;Thais Sissman&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' value='*#' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-family' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]' value='Times New Roman' />
            <format attr='font-weight' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]' value='bold' />
            <format attr='font-size' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]' value='12' />
            <format attr='color' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]' value='#333333' />
            <format attr='text-format' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' value='N' />
            <format attr='font-family' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' value='Times New Roman' />
            <format attr='font-size' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' value='12' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]</rows>
        <cols>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[:Measure Names]</cols>
      </table>
      <simple-id uuid='{71A34A8D-06C5-4FF2-BB58-E63726EF4A74}' />
    </worksheet>
    <worksheet name='Mon vs Cat Yr by Sales heat'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (Sample - Superstore)' name='federated.1dsfepz0bnjcff1cg85u60g2ae1k' />
          </datasources>
          <datasource-dependencies datasource='federated.1dsfepz0bnjcff1cg85u60g2ae1k'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Order Date]' derivation='Month' name='[mn:Order Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Order Date]' derivation='Year' name='[yr:Order Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:City:nk]'>
            <groupfilter from='&quot;Aberdeen&quot;' function='range' level='[none:City:nk]' to='&quot;Yuma&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='text-orientation' data-class='subtotal' scope='rows' value='0' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' value='0' />
            <format attr='text-orientation' scope='rows' value='0' />
            <format attr='text-orientation' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk]' value='-90' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='12' />
            <format attr='color' value='#4e79a7' />
            <format attr='font-family' value='Tamil Sangam MN' />
            <format attr='background-color' value='#f9e9e0' />
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
            <format attr='color' value='#4e79a7' />
            <format attr='font-weight' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Square' />
            <encodings>
              <color column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' />
              <text column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
                <format attr='has-stroke' value='false' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk] / [federated.1dsfepz0bnjcff1cg85u60g2ae1k].[yr:Order Date:ok])</rows>
        <cols>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[mn:Order Date:ok]</cols>
      </table>
      <simple-id uuid='{E2D0A275-8CBC-4BC1-890E-C41F84778883}' />
    </worksheet>
    <worksheet name='Month vs Cat, Sales by Cat. Forecast'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
          </datasources>
          <datasource-dependencies datasource='dataengine.42019.618651678240'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' forecast-column-base='[sum:Sales:qk]' forecast-column-type='forecast-value' name='[fVal:sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Order Date]' derivation='Month-Trunc' name='[tmn:Order Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Category:nk]' />
              <color column='[dataengine.42019.618651678240].[none:Forecast Indicator:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
        </panes>
        <rows>([dataengine.42019.618651678240].[none:Category:nk] * [dataengine.42019.618651678240].[fVal:sum:Sales:qk])</rows>
        <cols>[dataengine.42019.618651678240].[tmn:Order Date:qk]</cols>
        <forecast-specification auto-forecast-agg='true' band-confidence-level='95.000000' enabled='true' fill-type='fill-missing' ignore-last='1' model-type='auto-season' range-type='auto' show-prediction-bands='true' />
      </table>
      <simple-id uuid='{BC80EAA6-6093-4847-9412-E11FC90E4CA8}' />
    </worksheet>
    <worksheet name='OrderDate vs Cat by City, Sales'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (Sample - Superstore)' name='federated.1dsfepz0bnjcff1cg85u60g2ae1k' />
          </datasources>
          <datasource-dependencies datasource='federated.1dsfepz0bnjcff1cg85u60g2ae1k'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='string' name='[City]' role='dimension' semantic-role='[City].[Name]' type='nominal' />
            <column datatype='date' name='[Order Date]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[City]' derivation='None' name='[none:City:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Order Date]' derivation='Day-Trunc' name='[tdy:Order Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:City:nk]'>
            <groupfilter from='&quot;Aberdeen&quot;' function='range' level='[none:City:nk]' to='&quot;Yuma&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:City:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='font-size' value='12' />
          </style-rule>
          <style-rule element='header'>
            <format attr='text-orientation' data-class='subtotal' scope='rows' value='0' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-orientation' value='0' />
            <format attr='text-orientation' scope='rows' value='0' />
            <format attr='text-orientation' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk]' value='-90' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='size-bar' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' field-type='quantitative' max-size='1' min-size='0.005' type='centersize' />
          </style-rule>
          <style-rule element='worksheet'>
            <format attr='display-field-labels' scope='cols' value='false' />
            <format attr='display-field-labels' scope='rows' value='false' />
          </style-rule>
          <style-rule element='quick-filter'>
            <format attr='font-size' value='12' />
            <format attr='color' value='#4e79a7' />
            <format attr='font-family' value='Tamil Sangam MN' />
            <format attr='background-color' value='#f9e9e0' />
            <format attr='font-weight' value='bold' />
          </style-rule>
          <style-rule element='quick-filter-title'>
            <format attr='font-size' value='12' />
            <format attr='color' value='#4e79a7' />
            <format attr='font-weight' value='bold' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <text column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk]</rows>
        <cols>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[tdy:Order Date:ok]</cols>
      </table>
      <simple-id uuid='{720B7726-EED2-45D6-8FED-38EB7439143A}' />
    </worksheet>
    <worksheet name='Profit vs Sales by Cat, PrName scatter'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
          </datasources>
          <datasource-dependencies datasource='dataengine.42019.618651678240'>
            <column datatype='string' name='[Category]' role='dimension' type='nominal' />
            <column datatype='string' name='[Product Name]' role='dimension' type='nominal' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Category]' derivation='None' name='[none:Category:nk]' pivot='key' type='nominal' />
            <column-instance column='[Product Name]' derivation='None' name='[none:Product Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[dataengine.42019.618651678240].[none:Category:nk]'>
            <groupfilter from='&quot;Furniture&quot;' function='range' level='[none:Category:nk]' to='&quot;Technology&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[dataengine.42019.618651678240].[none:Category:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:Category:nk]' />
              <lod column='[dataengine.42019.618651678240].[none:Product Name:nk]' />
            </encodings>
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
        </panes>
        <rows>[dataengine.42019.618651678240].[sum:Profit:qk]</rows>
        <cols>[dataengine.42019.618651678240].[sum:Sales:qk]</cols>
      </table>
      <simple-id uuid='{FBB79B47-3A3C-4F8A-97B8-8517867913D3}' />
    </worksheet>
    <worksheet name='Sales CustomerName by Profit Ratio, Sales bar'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (Sample - Superstore)' name='federated.1dsfepz0bnjcff1cg85u60g2ae1k' />
          </datasources>
          <datasource-dependencies datasource='federated.1dsfepz0bnjcff1cg85u60g2ae1k'>
            <column caption='Profit Ratio' datatype='real' name='[Calculation_3626875487110770688]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='sum([Profit]) / sum([Sales])' />
            </column>
            <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Customer Name]' derivation='None' name='[none:Customer Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_3626875487110770688]' derivation='User' name='[usr:Calculation_3626875487110770688:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <manual-sort column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Sean Miller&quot;</bucket>
              <bucket>&quot;Tamara Chand&quot;</bucket>
              <bucket>&quot;Raymond Buch&quot;</bucket>
              <bucket>&quot;Tom Ashbrook&quot;</bucket>
              <bucket>&quot;Adrian Barton&quot;</bucket>
              <bucket>&quot;Ken Lonsdale&quot;</bucket>
              <bucket>&quot;Sanjit Chand&quot;</bucket>
              <bucket>&quot;Hunter Lopez&quot;</bucket>
              <bucket>&quot;Sanjit Engle&quot;</bucket>
              <bucket>&quot;Christopher Conant&quot;</bucket>
              <bucket>&quot;Todd Sumrall&quot;</bucket>
              <bucket>&quot;Greg Tran&quot;</bucket>
              <bucket>&quot;Becky Martin&quot;</bucket>
              <bucket>&quot;Seth Vernon&quot;</bucket>
              <bucket>&quot;Caroline Jumper&quot;</bucket>
              <bucket>&quot;Clay Ludtke&quot;</bucket>
              <bucket>&quot;Maria Etezadi&quot;</bucket>
              <bucket>&quot;Karen Ferguson&quot;</bucket>
              <bucket>&quot;Bill Shonely&quot;</bucket>
              <bucket>&quot;Edward Hooks&quot;</bucket>
              <bucket>&quot;John Lee&quot;</bucket>
              <bucket>&quot;Grant Thornton&quot;</bucket>
              <bucket>&quot;Helen Wasserman&quot;</bucket>
              <bucket>&quot;Tom Boeckenhauer&quot;</bucket>
              <bucket>&quot;Peter Fuller&quot;</bucket>
              <bucket>&quot;Christopher Martinez&quot;</bucket>
              <bucket>&quot;Justin Deggeller&quot;</bucket>
              <bucket>&quot;Joe Elijah&quot;</bucket>
              <bucket>&quot;Laura Armstrong&quot;</bucket>
              <bucket>&quot;Pete Kriz&quot;</bucket>
              <bucket>&quot;Daniel Raglin&quot;</bucket>
              <bucket>&quot;Natalie Fritzler&quot;</bucket>
              <bucket>&quot;Karen Daniels&quot;</bucket>
              <bucket>&quot;Nick Crebassa&quot;</bucket>
              <bucket>&quot;Harry Marie&quot;</bucket>
              <bucket>&quot;Keith Dawkins&quot;</bucket>
              <bucket>&quot;Sean Braxton&quot;</bucket>
              <bucket>&quot;Zuschuss Carroll&quot;</bucket>
              <bucket>&quot;Joseph Holt&quot;</bucket>
              <bucket>&quot;Nora Preis&quot;</bucket>
              <bucket>&quot;Anna Häberlin&quot;</bucket>
              <bucket>&quot;Adam Bellavance&quot;</bucket>
              <bucket>&quot;Jim Epp&quot;</bucket>
              <bucket>&quot;Jane Waco&quot;</bucket>
              <bucket>&quot;Lena Creighton&quot;</bucket>
              <bucket>&quot;John Murray&quot;</bucket>
              <bucket>&quot;Jonathan Doherty&quot;</bucket>
              <bucket>&quot;Patrick O&apos;Brill&quot;</bucket>
              <bucket>&quot;Maribeth Schnelling&quot;</bucket>
              <bucket>&quot;Rick Wilson&quot;</bucket>
              <bucket>&quot;Brian Moss&quot;</bucket>
              <bucket>&quot;Paul Prost&quot;</bucket>
              <bucket>&quot;Natalie Webber&quot;</bucket>
              <bucket>&quot;Dean percer&quot;</bucket>
              <bucket>&quot;Fred Hopkins&quot;</bucket>
              <bucket>&quot;Rick Huthwaite&quot;</bucket>
              <bucket>&quot;Penelope Sewall&quot;</bucket>
              <bucket>&quot;Brenda Bowman&quot;</bucket>
              <bucket>&quot;Joel Eaton&quot;</bucket>
              <bucket>&quot;Yana Sorensen&quot;</bucket>
              <bucket>&quot;Andy Reiter&quot;</bucket>
              <bucket>&quot;Dan Reichenbach&quot;</bucket>
              <bucket>&quot;Grace Kelly&quot;</bucket>
              <bucket>&quot;Joseph Airdo&quot;</bucket>
              <bucket>&quot;Nathan Mautz&quot;</bucket>
              <bucket>&quot;Valerie Dominguez&quot;</bucket>
              <bucket>&quot;Sarah Brown&quot;</bucket>
              <bucket>&quot;James Galang&quot;</bucket>
              <bucket>&quot;Darrin Martin&quot;</bucket>
              <bucket>&quot;Corinna Mitchell&quot;</bucket>
              <bucket>&quot;Max Jones&quot;</bucket>
              <bucket>&quot;Brosina Hoffman&quot;</bucket>
              <bucket>&quot;Rob Lucas&quot;</bucket>
              <bucket>&quot;William Brown&quot;</bucket>
              <bucket>&quot;Victoria Wilson&quot;</bucket>
              <bucket>&quot;Shirley Daniels&quot;</bucket>
              <bucket>&quot;Quincy Jones&quot;</bucket>
              <bucket>&quot;Alan Dominguez&quot;</bucket>
              <bucket>&quot;Cassandra Brandow&quot;</bucket>
              <bucket>&quot;Greg Maxwell&quot;</bucket>
              <bucket>&quot;Shahid Collister&quot;</bucket>
              <bucket>&quot;Kristen Hastings&quot;</bucket>
              <bucket>&quot;Robert Marley&quot;</bucket>
              <bucket>&quot;Keith Herrera&quot;</bucket>
              <bucket>&quot;Ben Ferrer&quot;</bucket>
              <bucket>&quot;Christine Phan&quot;</bucket>
              <bucket>&quot;Bill Donatelli&quot;</bucket>
              <bucket>&quot;Cindy Stewart&quot;</bucket>
              <bucket>&quot;Anne McFarland&quot;</bucket>
              <bucket>&quot;Ross Baird&quot;</bucket>
              <bucket>&quot;Katherine Murray&quot;</bucket>
              <bucket>&quot;Alex Avila&quot;</bucket>
              <bucket>&quot;Suzanne McNair&quot;</bucket>
              <bucket>&quot;Naresj Patel&quot;</bucket>
              <bucket>&quot;Amy Cox&quot;</bucket>
              <bucket>&quot;Mick Hernandez&quot;</bucket>
              <bucket>&quot;Dennis Pardue&quot;</bucket>
              <bucket>&quot;Emily Phan&quot;</bucket>
              <bucket>&quot;Yoseph Carroll&quot;</bucket>
              <bucket>&quot;Stefania Perrino&quot;</bucket>
              <bucket>&quot;Luke Weiss&quot;</bucket>
              <bucket>&quot;Cathy Prescott&quot;</bucket>
              <bucket>&quot;Thomas Seio&quot;</bucket>
              <bucket>&quot;Tonja Turnell&quot;</bucket>
              <bucket>&quot;Mitch Webber&quot;</bucket>
              <bucket>&quot;Tom Prescott&quot;</bucket>
              <bucket>&quot;Tamara Willingham&quot;</bucket>
              <bucket>&quot;Dianna Wilson&quot;</bucket>
              <bucket>&quot;Mitch Willingham&quot;</bucket>
              <bucket>&quot;Harold Ryan&quot;</bucket>
              <bucket>&quot;Steven Cartwright&quot;</bucket>
              <bucket>&quot;Resi Pölking&quot;</bucket>
              <bucket>&quot;Lena Radford&quot;</bucket>
              <bucket>&quot;Mike Pelletier&quot;</bucket>
              <bucket>&quot;Anna Andreadi&quot;</bucket>
              <bucket>&quot;Ivan Liston&quot;</bucket>
              <bucket>&quot;Kelly Lampkin&quot;</bucket>
              <bucket>&quot;Laurel Beltran&quot;</bucket>
              <bucket>&quot;Dave Hallsten&quot;</bucket>
              <bucket>&quot;Irene Maddox&quot;</bucket>
              <bucket>&quot;Ted Trevino&quot;</bucket>
              <bucket>&quot;Kunst Miller&quot;</bucket>
              <bucket>&quot;Philisse Overcash&quot;</bucket>
              <bucket>&quot;Heather Kirkland&quot;</bucket>
              <bucket>&quot;Anthony Jacobs&quot;</bucket>
              <bucket>&quot;Joe Kamberova&quot;</bucket>
              <bucket>&quot;Alan Hwang&quot;</bucket>
              <bucket>&quot;Dean Katz&quot;</bucket>
              <bucket>&quot;Russell Applegate&quot;</bucket>
              <bucket>&quot;Sue Ann Reed&quot;</bucket>
              <bucket>&quot;Jim Kriz&quot;</bucket>
              <bucket>&quot;Bart Watters&quot;</bucket>
              <bucket>&quot;Tracy Blumstein&quot;</bucket>
              <bucket>&quot;Giulietta Baptist&quot;</bucket>
              <bucket>&quot;Rick Bensley&quot;</bucket>
              <bucket>&quot;Erin Smith&quot;</bucket>
              <bucket>&quot;Deborah Brumfield&quot;</bucket>
              <bucket>&quot;Kean Thornton&quot;</bucket>
              <bucket>&quot;Sample Company A&quot;</bucket>
              <bucket>&quot;Eugene Moren&quot;</bucket>
              <bucket>&quot;Dave Brooks&quot;</bucket>
              <bucket>&quot;Anthony Rawles&quot;</bucket>
              <bucket>&quot;Arthur Gainer&quot;</bucket>
              <bucket>&quot;Anthony Johnson&quot;</bucket>
              <bucket>&quot;Linda Cazamias&quot;</bucket>
              <bucket>&quot;Stewart Carmichael&quot;</bucket>
              <bucket>&quot;Theone Pippenger&quot;</bucket>
              <bucket>&quot;Mark Cousins&quot;</bucket>
              <bucket>&quot;Jamie Kunitz&quot;</bucket>
              <bucket>&quot;Katrina Willman&quot;</bucket>
              <bucket>&quot;Bradley Drucker&quot;</bucket>
              <bucket>&quot;Arianne Irving&quot;</bucket>
              <bucket>&quot;Scot Coram&quot;</bucket>
              <bucket>&quot;Ellis Ballard&quot;</bucket>
              <bucket>&quot;Gary Zandusky&quot;</bucket>
              <bucket>&quot;Steven Roelle&quot;</bucket>
              <bucket>&quot;Natalie DeCherney&quot;</bucket>
              <bucket>&quot;Matt Abelman&quot;</bucket>
              <bucket>&quot;Sung Pak&quot;</bucket>
              <bucket>&quot;Dana Kaydos&quot;</bucket>
              <bucket>&quot;Rick Duston&quot;</bucket>
              <bucket>&quot;Toby Carlisle&quot;</bucket>
              <bucket>&quot;Alan Schoenberger&quot;</bucket>
              <bucket>&quot;Frank Hawley&quot;</bucket>
              <bucket>&quot;Claudia Bergmann&quot;</bucket>
              <bucket>&quot;Tracy Hopkins&quot;</bucket>
              <bucket>&quot;Bill Eplett&quot;</bucket>
              <bucket>&quot;Jill Fjeld&quot;</bucket>
              <bucket>&quot;Gary Hwang&quot;</bucket>
              <bucket>&quot;Roland Schwarz&quot;</bucket>
              <bucket>&quot;Muhammed Yedwab&quot;</bucket>
              <bucket>&quot;Peter McVee&quot;</bucket>
              <bucket>&quot;Stewart Visinsky&quot;</bucket>
              <bucket>&quot;Denise Monton&quot;</bucket>
              <bucket>&quot;Frank Preis&quot;</bucket>
              <bucket>&quot;Susan Pistek&quot;</bucket>
              <bucket>&quot;Craig Molinari&quot;</bucket>
              <bucket>&quot;Michael Paige&quot;</bucket>
              <bucket>&quot;Sean Christensen&quot;</bucket>
              <bucket>&quot;Sanjit Jacobs&quot;</bucket>
              <bucket>&quot;Luke Foster&quot;</bucket>
              <bucket>&quot;Pierre Wener&quot;</bucket>
              <bucket>&quot;George Ashbrook&quot;</bucket>
              <bucket>&quot;Ken Heidel&quot;</bucket>
              <bucket>&quot;Chris Cortes&quot;</bucket>
              <bucket>&quot;Dorothy Badders&quot;</bucket>
              <bucket>&quot;Nora Paige&quot;</bucket>
              <bucket>&quot;Kelly Collister&quot;</bucket>
              <bucket>&quot;Fred Chung&quot;</bucket>
              <bucket>&quot;Bill Stewart&quot;</bucket>
              <bucket>&quot;John Stevenson&quot;</bucket>
              <bucket>&quot;Ruben Ausman&quot;</bucket>
              <bucket>&quot;Annie Thurman&quot;</bucket>
              <bucket>&quot;Olvera Toch&quot;</bucket>
              <bucket>&quot;Rose O&apos;Brian&quot;</bucket>
              <bucket>&quot;Michael Chen&quot;</bucket>
              <bucket>&quot;Michael Moore&quot;</bucket>
              <bucket>&quot;Carol Adams&quot;</bucket>
              <bucket>&quot;Matthew Grinstein&quot;</bucket>
              <bucket>&quot;Maribeth Dona&quot;</bucket>
              <bucket>&quot;Jim Karlsson&quot;</bucket>
              <bucket>&quot;Juliana Krohn&quot;</bucket>
              <bucket>&quot;Frank Merwin&quot;</bucket>
              <bucket>&quot;Scott Cohen&quot;</bucket>
              <bucket>&quot;Hunter Glantz&quot;</bucket>
              <bucket>&quot;Ben Peterman&quot;</bucket>
              <bucket>&quot;Liz Preis&quot;</bucket>
              <bucket>&quot;Christopher Schild&quot;</bucket>
              <bucket>&quot;Ed Braxton&quot;</bucket>
              <bucket>&quot;Jeremy Pistek&quot;</bucket>
              <bucket>&quot;Sam Zeldin&quot;</bucket>
              <bucket>&quot;Rick Hansen&quot;</bucket>
              <bucket>&quot;Thomas Boland&quot;</bucket>
              <bucket>&quot;Gary McGarr&quot;</bucket>
              <bucket>&quot;Dionis Lloyd&quot;</bucket>
              <bucket>&quot;Erica Smith&quot;</bucket>
              <bucket>&quot;Robert Waldorf&quot;</bucket>
              <bucket>&quot;Anna Gayman&quot;</bucket>
              <bucket>&quot;Emily Ducich&quot;</bucket>
              <bucket>&quot;Pauline Webber&quot;</bucket>
              <bucket>&quot;Sarah Foster&quot;</bucket>
              <bucket>&quot;Frank Carlisle&quot;</bucket>
              <bucket>&quot;Sally Hughsby&quot;</bucket>
              <bucket>&quot;Sandra Glassco&quot;</bucket>
              <bucket>&quot;Trudy Schmidt&quot;</bucket>
              <bucket>&quot;Sam Craven&quot;</bucket>
              <bucket>&quot;Victoria Pisteka&quot;</bucket>
              <bucket>&quot;Doug Jacobs&quot;</bucket>
              <bucket>&quot;Dianna Vittorini&quot;</bucket>
              <bucket>&quot;Sylvia Foulston&quot;</bucket>
              <bucket>&quot;Dan Campbell&quot;</bucket>
              <bucket>&quot;Arthur Prichep&quot;</bucket>
              <bucket>&quot;Dennis Kane&quot;</bucket>
              <bucket>&quot;Katharine Harms&quot;</bucket>
              <bucket>&quot;Randy Ferguson&quot;</bucket>
              <bucket>&quot;Rick Reed&quot;</bucket>
              <bucket>&quot;Brian Dahlen&quot;</bucket>
              <bucket>&quot;Brian Stugart&quot;</bucket>
              <bucket>&quot;Rob Williams&quot;</bucket>
              <bucket>&quot;Daniel Lacy&quot;</bucket>
              <bucket>&quot;Damala Kotsonis&quot;</bucket>
              <bucket>&quot;Adam Shillingsburg&quot;</bucket>
              <bucket>&quot;Jack O&apos;Briant&quot;</bucket>
              <bucket>&quot;Adam Hart&quot;</bucket>
              <bucket>&quot;Henry Goldwyn&quot;</bucket>
              <bucket>&quot;Lindsay Castell&quot;</bucket>
              <bucket>&quot;Carol Triggs&quot;</bucket>
              <bucket>&quot;Edward Becker&quot;</bucket>
              <bucket>&quot;Sharelle Roach&quot;</bucket>
              <bucket>&quot;Lindsay Williams&quot;</bucket>
              <bucket>&quot;Ricardo Sperren&quot;</bucket>
              <bucket>&quot;Alejandro Savely&quot;</bucket>
              <bucket>&quot;Mark Packer&quot;</bucket>
              <bucket>&quot;Christine Sundaresam&quot;</bucket>
              <bucket>&quot;Brian Thompson&quot;</bucket>
              <bucket>&quot;Deirdre Greer&quot;</bucket>
              <bucket>&quot;Jeremy Lonsdale&quot;</bucket>
              <bucket>&quot;Greg Matthias&quot;</bucket>
              <bucket>&quot;Janet Martin&quot;</bucket>
              <bucket>&quot;Chloris Kastensmidt&quot;</bucket>
              <bucket>&quot;Karen Bern&quot;</bucket>
              <bucket>&quot;Maxwell Schwartz&quot;</bucket>
              <bucket>&quot;Ruben Dartt&quot;</bucket>
              <bucket>&quot;Tanja Norvell&quot;</bucket>
              <bucket>&quot;Steve Nguyen&quot;</bucket>
              <bucket>&quot;Speros Goranitis&quot;</bucket>
              <bucket>&quot;Katherine Hughes&quot;</bucket>
              <bucket>&quot;Patrick Gardner&quot;</bucket>
              <bucket>&quot;Eugene Hildebrand&quot;</bucket>
              <bucket>&quot;Gary Mitchum&quot;</bucket>
              <bucket>&quot;Eugene Barchas&quot;</bucket>
              <bucket>&quot;Mike Gockenbach&quot;</bucket>
              <bucket>&quot;Toby Gnade&quot;</bucket>
              <bucket>&quot;Kean Takahito&quot;</bucket>
              <bucket>&quot;Shahid Shariari&quot;</bucket>
              <bucket>&quot;Sara Luxemburg&quot;</bucket>
              <bucket>&quot;Aaron Smayling&quot;</bucket>
              <bucket>&quot;Cynthia Arntzen&quot;</bucket>
              <bucket>&quot;Carlos Soltero&quot;</bucket>
              <bucket>&quot;Lindsay Shagiari&quot;</bucket>
              <bucket>&quot;Michelle Huthwaite&quot;</bucket>
              <bucket>&quot;Frank Atkinson&quot;</bucket>
              <bucket>&quot;David Bremer&quot;</bucket>
              <bucket>&quot;Noel Staavos&quot;</bucket>
              <bucket>&quot;Tamara Manning&quot;</bucket>
              <bucket>&quot;Christine Kargatis&quot;</bucket>
              <bucket>&quot;Thea Hudgings&quot;</bucket>
              <bucket>&quot;Liz Thompson&quot;</bucket>
              <bucket>&quot;Becky Castell&quot;</bucket>
              <bucket>&quot;Julie Kriz&quot;</bucket>
              <bucket>&quot;Shaun Weien&quot;</bucket>
              <bucket>&quot;Maris LaWare&quot;</bucket>
              <bucket>&quot;Rob Dowd&quot;</bucket>
              <bucket>&quot;Craig Yedwab&quot;</bucket>
              <bucket>&quot;Neil Ducich&quot;</bucket>
              <bucket>&quot;Meg Tillman&quot;</bucket>
              <bucket>&quot;Barry Französisch&quot;</bucket>
              <bucket>&quot;David Smith&quot;</bucket>
              <bucket>&quot;Paul Van Hugh&quot;</bucket>
              <bucket>&quot;Ionia McGrath&quot;</bucket>
              <bucket>&quot;Chuck Clark&quot;</bucket>
              <bucket>&quot;Craig Carroll&quot;</bucket>
              <bucket>&quot;Arthur Wiediger&quot;</bucket>
              <bucket>&quot;Erin Ashbrook&quot;</bucket>
              <bucket>&quot;Linda Southworth&quot;</bucket>
              <bucket>&quot;Darren Budd&quot;</bucket>
              <bucket>&quot;Justin MacKendrick&quot;</bucket>
              <bucket>&quot;Christina VanderZanden&quot;</bucket>
              <bucket>&quot;Troy Staebel&quot;</bucket>
              <bucket>&quot;Gary Hansen&quot;</bucket>
              <bucket>&quot;Barry Gonzalez&quot;</bucket>
              <bucket>&quot;Trudy Brown&quot;</bucket>
              <bucket>&quot;Robert Dilbeck&quot;</bucket>
              <bucket>&quot;John Castell&quot;</bucket>
              <bucket>&quot;Philip Fox&quot;</bucket>
              <bucket>&quot;Emily Burns&quot;</bucket>
              <bucket>&quot;Chris Selesnick&quot;</bucket>
              <bucket>&quot;Michelle Moray&quot;</bucket>
              <bucket>&quot;Ken Black&quot;</bucket>
              <bucket>&quot;Lauren Leatherbury&quot;</bucket>
              <bucket>&quot;Marc Crier&quot;</bucket>
              <bucket>&quot;John Lucas&quot;</bucket>
              <bucket>&quot;Marina Lichtenstein&quot;</bucket>
              <bucket>&quot;Jay Kimmel&quot;</bucket>
              <bucket>&quot;Justin Ellison&quot;</bucket>
              <bucket>&quot;Bradley Talbott&quot;</bucket>
              <bucket>&quot;Bill Overfelt&quot;</bucket>
              <bucket>&quot;Frank Olsen&quot;</bucket>
              <bucket>&quot;Nicole Hansen&quot;</bucket>
              <bucket>&quot;Richard Bierner&quot;</bucket>
              <bucket>&quot;Eva Jacobs&quot;</bucket>
              <bucket>&quot;Dave Kipp&quot;</bucket>
              <bucket>&quot;Christina Anderson&quot;</bucket>
              <bucket>&quot;Logan Currie&quot;</bucket>
              <bucket>&quot;Ralph Arnett&quot;</bucket>
              <bucket>&quot;Katherine Nockton&quot;</bucket>
              <bucket>&quot;Sean O&apos;Donnell&quot;</bucket>
              <bucket>&quot;Stephanie Ulpright&quot;</bucket>
              <bucket>&quot;Helen Andreada&quot;</bucket>
              <bucket>&quot;Alejandro Grove&quot;</bucket>
              <bucket>&quot;Lena Cacioppo&quot;</bucket>
              <bucket>&quot;Steve Chapman&quot;</bucket>
              <bucket>&quot;Neola Schneider&quot;</bucket>
              <bucket>&quot;Beth Thompson&quot;</bucket>
              <bucket>&quot;Eleni McCrary&quot;</bucket>
              <bucket>&quot;Mary Zewe&quot;</bucket>
              <bucket>&quot;Bruce Stewart&quot;</bucket>
              <bucket>&quot;Deanra Eno&quot;</bucket>
              <bucket>&quot;Corey Catlett&quot;</bucket>
              <bucket>&quot;Ann Chong&quot;</bucket>
              <bucket>&quot;Charles McCrossin&quot;</bucket>
              <bucket>&quot;Herbert Flentye&quot;</bucket>
              <bucket>&quot;Fred McMath&quot;</bucket>
              <bucket>&quot;Julia Barnett&quot;</bucket>
              <bucket>&quot;Joy Smith&quot;</bucket>
              <bucket>&quot;Don Jones&quot;</bucket>
              <bucket>&quot;Amy Hunt&quot;</bucket>
              <bucket>&quot;Patrick O&apos;Donnell&quot;</bucket>
              <bucket>&quot;Nick Zandusky&quot;</bucket>
              <bucket>&quot;Michael Nguyen&quot;</bucket>
              <bucket>&quot;Beth Paige&quot;</bucket>
              <bucket>&quot;Charles Crestani&quot;</bucket>
              <bucket>&quot;Nat Carroll&quot;</bucket>
              <bucket>&quot;Filia McAdams&quot;</bucket>
              <bucket>&quot;Mark Hamilton&quot;</bucket>
              <bucket>&quot;Brendan Sweed&quot;</bucket>
              <bucket>&quot;Valerie Mitchum&quot;</bucket>
              <bucket>&quot;George Zrebassa&quot;</bucket>
              <bucket>&quot;Michelle Arnett&quot;</bucket>
              <bucket>&quot;Bart Pistole&quot;</bucket>
              <bucket>&quot;Matt Collister&quot;</bucket>
              <bucket>&quot;Thea Hendricks&quot;</bucket>
              <bucket>&quot;Marc Harrigan&quot;</bucket>
              <bucket>&quot;David Flashing&quot;</bucket>
              <bucket>&quot;Xylona Preis&quot;</bucket>
              <bucket>&quot;Clytie Kelty&quot;</bucket>
              <bucket>&quot;Jennifer Ferguson&quot;</bucket>
              <bucket>&quot;Cynthia Voltz&quot;</bucket>
              <bucket>&quot;Nick Radford&quot;</bucket>
              <bucket>&quot;Jack Garza&quot;</bucket>
              <bucket>&quot;Andrew Gjertsen&quot;</bucket>
              <bucket>&quot;Craig Leslie&quot;</bucket>
              <bucket>&quot;Maureen Gastineau&quot;</bucket>
              <bucket>&quot;Roland Fjeld&quot;</bucket>
              <bucket>&quot;Elizabeth Moffitt&quot;</bucket>
              <bucket>&quot;Dean Braden&quot;</bucket>
              <bucket>&quot;Chris McAfee&quot;</bucket>
              <bucket>&quot;Michael Kennedy&quot;</bucket>
              <bucket>&quot;Lena Hernandez&quot;</bucket>
              <bucket>&quot;Kristina Nunn&quot;</bucket>
              <bucket>&quot;Jamie Frazer&quot;</bucket>
              <bucket>&quot;Fred Harton&quot;</bucket>
              <bucket>&quot;Craig Carreira&quot;</bucket>
              <bucket>&quot;Bobby Elias&quot;</bucket>
              <bucket>&quot;Kalyca Meade&quot;</bucket>
              <bucket>&quot;Matt Connell&quot;</bucket>
              <bucket>&quot;Justin Hirsh&quot;</bucket>
              <bucket>&quot;Maribeth Yedwab&quot;</bucket>
              <bucket>&quot;Ken Dana&quot;</bucket>
              <bucket>&quot;Tony Sayre&quot;</bucket>
              <bucket>&quot;Jason Gross&quot;</bucket>
              <bucket>&quot;Laurel Workman&quot;</bucket>
              <bucket>&quot;Allen Rosenblatt&quot;</bucket>
              <bucket>&quot;Greg Guthrie&quot;</bucket>
              <bucket>&quot;Nathan Cano&quot;</bucket>
              <bucket>&quot;Mick Crebagga&quot;</bucket>
              <bucket>&quot;Dave Poirier&quot;</bucket>
              <bucket>&quot;Phillip Flathmann&quot;</bucket>
              <bucket>&quot;Maya Herman&quot;</bucket>
              <bucket>&quot;Janet Lee&quot;</bucket>
              <bucket>&quot;Justin Ritter&quot;</bucket>
              <bucket>&quot;Edward Nazzal&quot;</bucket>
              <bucket>&quot;Toby Braunhardt&quot;</bucket>
              <bucket>&quot;Giulietta Weimer&quot;</bucket>
              <bucket>&quot;Bill Tyler&quot;</bucket>
              <bucket>&quot;Pamela Stobb&quot;</bucket>
              <bucket>&quot;Shahid Hopkins&quot;</bucket>
              <bucket>&quot;Kean Nguyen&quot;</bucket>
              <bucket>&quot;Daniel Byrd&quot;</bucket>
              <bucket>&quot;Roy Phan&quot;</bucket>
              <bucket>&quot;Theresa Swint&quot;</bucket>
              <bucket>&quot;Helen Abelman&quot;</bucket>
              <bucket>&quot;Ed Jacobs&quot;</bucket>
              <bucket>&quot;Neoma Murray&quot;</bucket>
              <bucket>&quot;John Dryer&quot;</bucket>
              <bucket>&quot;Clay Rozendal&quot;</bucket>
              <bucket>&quot;Duane Noonan&quot;</bucket>
              <bucket>&quot;Karen Carlisle&quot;</bucket>
              <bucket>&quot;Stefanie Holloman&quot;</bucket>
              <bucket>&quot;Liz Carlisle&quot;</bucket>
              <bucket>&quot;Rob Haberlin&quot;</bucket>
              <bucket>&quot;Trudy Glocke&quot;</bucket>
              <bucket>&quot;Max Ludwig&quot;</bucket>
              <bucket>&quot;Roger Barcio&quot;</bucket>
              <bucket>&quot;Tom Stivers&quot;</bucket>
              <bucket>&quot;Art Ferguson&quot;</bucket>
              <bucket>&quot;Carlos Daly&quot;</bucket>
              <bucket>&quot;Nicole Fjeld&quot;</bucket>
              <bucket>&quot;Denny Joy&quot;</bucket>
              <bucket>&quot;Victoria Brennan&quot;</bucket>
              <bucket>&quot;Harold Pawlan&quot;</bucket>
              <bucket>&quot;Doug Bickford&quot;</bucket>
              <bucket>&quot;Paul Gonzalez&quot;</bucket>
              <bucket>&quot;Nona Balk&quot;</bucket>
              <bucket>&quot;Scott Williamson&quot;</bucket>
              <bucket>&quot;Lisa DeCherney&quot;</bucket>
              <bucket>&quot;Christy Brittain&quot;</bucket>
              <bucket>&quot;Tracy Poddar&quot;</bucket>
              <bucket>&quot;Jas O&apos;Carroll&quot;</bucket>
              <bucket>&quot;Jay Fein&quot;</bucket>
              <bucket>&quot;Max Engle&quot;</bucket>
              <bucket>&quot;Susan Vittorini&quot;</bucket>
              <bucket>&quot;Katherine Ducich&quot;</bucket>
              <bucket>&quot;Giulietta Dortch&quot;</bucket>
              <bucket>&quot;Sheri Gordon&quot;</bucket>
              <bucket>&quot;Lisa Ryan&quot;</bucket>
              <bucket>&quot;Shaun Chance&quot;</bucket>
              <bucket>&quot;Brooke Gillingham&quot;</bucket>
              <bucket>&quot;Stephanie Phelps&quot;</bucket>
              <bucket>&quot;Nat Gilpin&quot;</bucket>
              <bucket>&quot;Cynthia Delaney&quot;</bucket>
              <bucket>&quot;Skye Norling&quot;</bucket>
              <bucket>&quot;Patrick Ryan&quot;</bucket>
              <bucket>&quot;Ashley Jarboe&quot;</bucket>
              <bucket>&quot;Pamela Coakley&quot;</bucket>
              <bucket>&quot;Emily Grady&quot;</bucket>
              <bucket>&quot;Pauline Johnson&quot;</bucket>
              <bucket>&quot;Noah Childs&quot;</bucket>
              <bucket>&quot;Janet Molinari&quot;</bucket>
              <bucket>&quot;Jennifer Braxton&quot;</bucket>
              <bucket>&quot;Andrew Allen&quot;</bucket>
              <bucket>&quot;Chad Cunningham&quot;</bucket>
              <bucket>&quot;Darrin Sayre&quot;</bucket>
              <bucket>&quot;Monica Federle&quot;</bucket>
              <bucket>&quot;Aaron Hawkins&quot;</bucket>
              <bucket>&quot;Logan Haushalter&quot;</bucket>
              <bucket>&quot;Ben Wallace&quot;</bucket>
              <bucket>&quot;Valerie Takahito&quot;</bucket>
              <bucket>&quot;Adrian Hane&quot;</bucket>
              <bucket>&quot;Mike Vittorini&quot;</bucket>
              <bucket>&quot;Jessica Myrick&quot;</bucket>
              <bucket>&quot;Brad Eason&quot;</bucket>
              <bucket>&quot;Denny Blanton&quot;</bucket>
              <bucket>&quot;Julie Prescott&quot;</bucket>
              <bucket>&quot;Tracy Zic&quot;</bucket>
              <bucket>&quot;Becky Pak&quot;</bucket>
              <bucket>&quot;Darren Koutras&quot;</bucket>
              <bucket>&quot;Meg O&apos;Connel&quot;</bucket>
              <bucket>&quot;Ryan Akin&quot;</bucket>
              <bucket>&quot;Katrina Edelman&quot;</bucket>
              <bucket>&quot;Cathy Armstrong&quot;</bucket>
              <bucket>&quot;Candace McMahon&quot;</bucket>
              <bucket>&quot;Jennifer Patt&quot;</bucket>
              <bucket>&quot;Chad McGuire&quot;</bucket>
              <bucket>&quot;Cindy Chapman&quot;</bucket>
              <bucket>&quot;Erica Bern&quot;</bucket>
              <bucket>&quot;Anne Pryor&quot;</bucket>
              <bucket>&quot;Annie Zypern&quot;</bucket>
              <bucket>&quot;Maurice Satty&quot;</bucket>
              <bucket>&quot;Tim Brockman&quot;</bucket>
              <bucket>&quot;Craig Reiter&quot;</bucket>
              <bucket>&quot;Alan Haines&quot;</bucket>
              <bucket>&quot;Benjamin Farhat&quot;</bucket>
              <bucket>&quot;Cyma Kinney&quot;</bucket>
              <bucket>&quot;Mike Caudle&quot;</bucket>
              <bucket>&quot;James Lanier&quot;</bucket>
              <bucket>&quot;Karl Braun&quot;</bucket>
              <bucket>&quot;George Bell&quot;</bucket>
              <bucket>&quot;Odella Nelson&quot;</bucket>
              <bucket>&quot;Mark Van Huff&quot;</bucket>
              <bucket>&quot;Maria Bertelson&quot;</bucket>
              <bucket>&quot;Brian DeCherney&quot;</bucket>
              <bucket>&quot;Cathy Hwang&quot;</bucket>
              <bucket>&quot;Bruce Degenhardt&quot;</bucket>
              <bucket>&quot;Benjamin Venier&quot;</bucket>
              <bucket>&quot;Kelly Andreada&quot;</bucket>
              <bucket>&quot;Ann Blume&quot;</bucket>
              <bucket>&quot;John Grady&quot;</bucket>
              <bucket>&quot;Dan Lawera&quot;</bucket>
              <bucket>&quot;Zuschuss Donatelli&quot;</bucket>
              <bucket>&quot;Charlotte Melton&quot;</bucket>
              <bucket>&quot;Laurel Elliston&quot;</bucket>
              <bucket>&quot;Ted Butterfield&quot;</bucket>
              <bucket>&quot;Parhena Norris&quot;</bucket>
              <bucket>&quot;Ralph Kennedy&quot;</bucket>
              <bucket>&quot;Bradley Nguyen&quot;</bucket>
              <bucket>&quot;Delfina Latchford&quot;</bucket>
              <bucket>&quot;Philip Brown&quot;</bucket>
              <bucket>&quot;Andy Gerbode&quot;</bucket>
              <bucket>&quot;Raymond Messe&quot;</bucket>
              <bucket>&quot;Paul Knutson&quot;</bucket>
              <bucket>&quot;Tamara Dahlen&quot;</bucket>
              <bucket>&quot;Julia West&quot;</bucket>
              <bucket>&quot;Mick Brown&quot;</bucket>
              <bucket>&quot;Thomas Thornton&quot;</bucket>
              <bucket>&quot;Christine Abelman&quot;</bucket>
              <bucket>&quot;Roger Demir&quot;</bucket>
              <bucket>&quot;Nancy Lomonaco&quot;</bucket>
              <bucket>&quot;Jill Stevenson&quot;</bucket>
              <bucket>&quot;Paul MacIntyre&quot;</bucket>
              <bucket>&quot;Guy Armstrong&quot;</bucket>
              <bucket>&quot;Cyra Reiten&quot;</bucket>
              <bucket>&quot;Nathan Gelder&quot;</bucket>
              <bucket>&quot;Jeremy Ellison&quot;</bucket>
              <bucket>&quot;Troy Blackwell&quot;</bucket>
              <bucket>&quot;Frank Gastineau&quot;</bucket>
              <bucket>&quot;Don Miller&quot;</bucket>
              <bucket>&quot;Gene Hale&quot;</bucket>
              <bucket>&quot;Sarah Bern&quot;</bucket>
              <bucket>&quot;Liz MacKendrick&quot;</bucket>
              <bucket>&quot;Maureen Gnade&quot;</bucket>
              <bucket>&quot;Sarah Jordon&quot;</bucket>
              <bucket>&quot;Bryan Mills&quot;</bucket>
              <bucket>&quot;Barry Franz&quot;</bucket>
              <bucket>&quot;Saphhira Shifley&quot;</bucket>
              <bucket>&quot;Dario Medina&quot;</bucket>
              <bucket>&quot;Michelle Tran&quot;</bucket>
              <bucket>&quot;Shirley Jackson&quot;</bucket>
              <bucket>&quot;Magdelene Morse&quot;</bucket>
              <bucket>&quot;Sibella Parks&quot;</bucket>
              <bucket>&quot;Matt Collins&quot;</bucket>
              <bucket>&quot;Eileen Kiefer&quot;</bucket>
              <bucket>&quot;Corey-Lock&quot;</bucket>
              <bucket>&quot;Denny Ordway&quot;</bucket>
              <bucket>&quot;Hallie Redmond&quot;</bucket>
              <bucket>&quot;Georgia Rosenberg&quot;</bucket>
              <bucket>&quot;Cari Sayre&quot;</bucket>
              <bucket>&quot;Paul Stevenson&quot;</bucket>
              <bucket>&quot;Stuart Van&quot;</bucket>
              <bucket>&quot;Doug O&apos;Connell&quot;</bucket>
              <bucket>&quot;Carl Ludwig&quot;</bucket>
              <bucket>&quot;Liz Willingham&quot;</bucket>
              <bucket>&quot;Michelle Ellison&quot;</bucket>
              <bucket>&quot;Gene McClure&quot;</bucket>
              <bucket>&quot;Steve Carroll&quot;</bucket>
              <bucket>&quot;Matt Hagelstein&quot;</bucket>
              <bucket>&quot;Elpida Rittenbach&quot;</bucket>
              <bucket>&quot;Tony Chapman&quot;</bucket>
              <bucket>&quot;Joni Wasserman&quot;</bucket>
              <bucket>&quot;Michael Grace&quot;</bucket>
              <bucket>&quot;Nora Pelletier&quot;</bucket>
              <bucket>&quot;Patrick Jones&quot;</bucket>
              <bucket>&quot;Erica Hernandez&quot;</bucket>
              <bucket>&quot;Jack Lebron&quot;</bucket>
              <bucket>&quot;Christina DeMoss&quot;</bucket>
              <bucket>&quot;Michael Dominguez&quot;</bucket>
              <bucket>&quot;Dorothy Wardle&quot;</bucket>
              <bucket>&quot;Evan Bailliet&quot;</bucket>
              <bucket>&quot;Benjamin Patterson&quot;</bucket>
              <bucket>&quot;Debra Catini&quot;</bucket>
              <bucket>&quot;Alyssa Tate&quot;</bucket>
              <bucket>&quot;Jim Radford&quot;</bucket>
              <bucket>&quot;Duane Benoit&quot;</bucket>
              <bucket>&quot;Claire Gute&quot;</bucket>
              <bucket>&quot;Kimberly Carter&quot;</bucket>
              <bucket>&quot;Ross DeVincentis&quot;</bucket>
              <bucket>&quot;Carl Weiss&quot;</bucket>
              <bucket>&quot;Jim Sink&quot;</bucket>
              <bucket>&quot;Darrin Van Huff&quot;</bucket>
              <bucket>&quot;Alan Barnes&quot;</bucket>
              <bucket>&quot;Tony Molinari&quot;</bucket>
              <bucket>&quot;Jesus Ocampo&quot;</bucket>
              <bucket>&quot;Scot Wooten&quot;</bucket>
              <bucket>&quot;Jeremy Farry&quot;</bucket>
              <bucket>&quot;Dennis Bolton&quot;</bucket>
              <bucket>&quot;David Wiener&quot;</bucket>
              <bucket>&quot;Cindy Schnelling&quot;</bucket>
              <bucket>&quot;Pauline Chand&quot;</bucket>
              <bucket>&quot;David Philippe&quot;</bucket>
              <bucket>&quot;Jenna Caffey&quot;</bucket>
              <bucket>&quot;Phillina Ober&quot;</bucket>
              <bucket>&quot;Allen Armold&quot;</bucket>
              <bucket>&quot;Vivek Sundaresam&quot;</bucket>
              <bucket>&quot;Alex Russell&quot;</bucket>
              <bucket>&quot;Darren Powers&quot;</bucket>
              <bucket>&quot;Duane Huffman&quot;</bucket>
              <bucket>&quot;Susan MacKendrick&quot;</bucket>
              <bucket>&quot;Eudokia Martin&quot;</bucket>
              <bucket>&quot;Theresa Coyne&quot;</bucket>
              <bucket>&quot;Mike Kennedy&quot;</bucket>
              <bucket>&quot;Tiffany House&quot;</bucket>
              <bucket>&quot;Sean Wendt&quot;</bucket>
              <bucket>&quot;Luke Schmidt&quot;</bucket>
              <bucket>&quot;Randy Bradley&quot;</bucket>
              <bucket>&quot;Lynn Smith&quot;</bucket>
              <bucket>&quot;Bruce Geld&quot;</bucket>
              <bucket>&quot;Victor Preis&quot;</bucket>
              <bucket>&quot;Ken Brennan&quot;</bucket>
              <bucket>&quot;Barry Pond&quot;</bucket>
              <bucket>&quot;Toby Swindell&quot;</bucket>
              <bucket>&quot;Russell D&apos;Ascenzo&quot;</bucket>
              <bucket>&quot;Aimee Bixby&quot;</bucket>
              <bucket>&quot;Roy Collins&quot;</bucket>
              <bucket>&quot;Sung Shariari&quot;</bucket>
              <bucket>&quot;Jonathan Howell&quot;</bucket>
              <bucket>&quot;Jason Fortune-&quot;</bucket>
              <bucket>&quot;Rachel Payne&quot;</bucket>
              <bucket>&quot;Bryan Spruell&quot;</bucket>
              <bucket>&quot;Roy Französisch&quot;</bucket>
              <bucket>&quot;Eric Barreto&quot;</bucket>
              <bucket>&quot;Maureen Fritzler&quot;</bucket>
              <bucket>&quot;Eric Murdock&quot;</bucket>
              <bucket>&quot;Alyssa Crouse&quot;</bucket>
              <bucket>&quot;Evan Henry&quot;</bucket>
              <bucket>&quot;Mary O&apos;Rourke&quot;</bucket>
              <bucket>&quot;Alejandro Ballentine&quot;</bucket>
              <bucket>&quot;Katrina Bavinger&quot;</bucket>
              <bucket>&quot;Catherine Glotzbach&quot;</bucket>
              <bucket>&quot;Sonia Cooley&quot;</bucket>
              <bucket>&quot;Joni Blumstein&quot;</bucket>
              <bucket>&quot;Henia Zydlo&quot;</bucket>
              <bucket>&quot;Aaron Bergman&quot;</bucket>
              <bucket>&quot;Ryan Crowe&quot;</bucket>
              <bucket>&quot;Chad Sievert&quot;</bucket>
              <bucket>&quot;Harold Engle&quot;</bucket>
              <bucket>&quot;Sally Knutson&quot;</bucket>
              <bucket>&quot;Richard Eichhorn&quot;</bucket>
              <bucket>&quot;Jim Mitchum&quot;</bucket>
              <bucket>&quot;Jocasta Rupert&quot;</bucket>
              <bucket>&quot;Art Foster&quot;</bucket>
              <bucket>&quot;Julie Creighton&quot;</bucket>
              <bucket>&quot;Michael Stewart&quot;</bucket>
              <bucket>&quot;Vicky Freymann&quot;</bucket>
              <bucket>&quot;Vivek Gonzalez&quot;</bucket>
              <bucket>&quot;Charles Sheldon&quot;</bucket>
              <bucket>&quot;Todd Boyes&quot;</bucket>
              <bucket>&quot;Ann Steele&quot;</bucket>
              <bucket>&quot;Erica Hackney&quot;</bucket>
              <bucket>&quot;Thomas Brumley&quot;</bucket>
              <bucket>&quot;Alice McCarthy&quot;</bucket>
              <bucket>&quot;Brendan Murry&quot;</bucket>
              <bucket>&quot;David Kendrick&quot;</bucket>
              <bucket>&quot;Matthew Clasen&quot;</bucket>
              <bucket>&quot;Beth Fritzler&quot;</bucket>
              <bucket>&quot;Harry Greene&quot;</bucket>
              <bucket>&quot;Michael Granlund&quot;</bucket>
              <bucket>&quot;Muhammed MacIntyre&quot;</bucket>
              <bucket>&quot;Sandra Flanagan&quot;</bucket>
              <bucket>&quot;Steven Ward&quot;</bucket>
              <bucket>&quot;Liz Pelletier&quot;</bucket>
              <bucket>&quot;Dorris liebe&quot;</bucket>
              <bucket>&quot;Ivan Gibson&quot;</bucket>
              <bucket>&quot;Barry Blumstein&quot;</bucket>
              <bucket>&quot;Tracy Collins&quot;</bucket>
              <bucket>&quot;Michelle Lonsdale&quot;</bucket>
              <bucket>&quot;Ritsa Hightower&quot;</bucket>
              <bucket>&quot;Patrick Bzostek&quot;</bucket>
              <bucket>&quot;Angele Hood&quot;</bucket>
              <bucket>&quot;Henry MacAllister&quot;</bucket>
              <bucket>&quot;Patricia Hirasaki&quot;</bucket>
              <bucket>&quot;Pete Armstrong&quot;</bucket>
              <bucket>&quot;Jennifer Jackson&quot;</bucket>
              <bucket>&quot;Julia Dunbar&quot;</bucket>
              <bucket>&quot;Peter Bühler&quot;</bucket>
              <bucket>&quot;Eric Hoffmann&quot;</bucket>
              <bucket>&quot;Toby Ritter&quot;</bucket>
              <bucket>&quot;Alex Grayson&quot;</bucket>
              <bucket>&quot;Berenike Kampe&quot;</bucket>
              <bucket>&quot;Bryan Davis&quot;</bucket>
              <bucket>&quot;Anna Chung&quot;</bucket>
              <bucket>&quot;Anthony Witt&quot;</bucket>
              <bucket>&quot;Lori Olson&quot;</bucket>
              <bucket>&quot;Joy Bell-&quot;</bucket>
              <bucket>&quot;Carol Darley&quot;</bucket>
              <bucket>&quot;Mathew Reese&quot;</bucket>
              <bucket>&quot;Astrea Jones&quot;</bucket>
              <bucket>&quot;Ralph Ritter&quot;</bucket>
              <bucket>&quot;Shirley Schmidt&quot;</bucket>
              <bucket>&quot;Bobby Trafton&quot;</bucket>
              <bucket>&quot;Barbara Fisher&quot;</bucket>
              <bucket>&quot;Maria Zettner&quot;</bucket>
              <bucket>&quot;Denise Leinenbach&quot;</bucket>
              <bucket>&quot;Alan Shonely&quot;</bucket>
              <bucket>&quot;Brian Derr&quot;</bucket>
              <bucket>&quot;Neil Knudson&quot;</bucket>
              <bucket>&quot;Carlos Meador&quot;</bucket>
              <bucket>&quot;Chuck Sachs&quot;</bucket>
              <bucket>&quot;Cari Schnelling&quot;</bucket>
              <bucket>&quot;John Huston&quot;</bucket>
              <bucket>&quot;Rob Beeghly&quot;</bucket>
              <bucket>&quot;Andy Yotov&quot;</bucket>
              <bucket>&quot;Corey Roper&quot;</bucket>
              <bucket>&quot;MaryBeth Skach&quot;</bucket>
              <bucket>&quot;Joni Sundaresam&quot;</bucket>
              <bucket>&quot;Erin Creighton&quot;</bucket>
              <bucket>&quot;Khloe Miller&quot;</bucket>
              <bucket>&quot;Kelly Williams&quot;</bucket>
              <bucket>&quot;Tim Taslimi&quot;</bucket>
              <bucket>&quot;Shui Tom&quot;</bucket>
              <bucket>&quot;Vivek Grady&quot;</bucket>
              <bucket>&quot;Sonia Sunley&quot;</bucket>
              <bucket>&quot;Brad Thomas&quot;</bucket>
              <bucket>&quot;Mark Haberlin&quot;</bucket>
              <bucket>&quot;Barry Weirich&quot;</bucket>
              <bucket>&quot;Joy Daniels&quot;</bucket>
              <bucket>&quot;Jason Klamczynski&quot;</bucket>
              <bucket>&quot;Vivian Mathis&quot;</bucket>
              <bucket>&quot;Neil Französisch&quot;</bucket>
              <bucket>&quot;Melanie Seite&quot;</bucket>
              <bucket>&quot;Lycoris Saunders&quot;</bucket>
              <bucket>&quot;Aleksandra Gannaway&quot;</bucket>
              <bucket>&quot;Evan Minnotte&quot;</bucket>
              <bucket>&quot;Heather Jas&quot;</bucket>
              <bucket>&quot;Don Weiss&quot;</bucket>
              <bucket>&quot;Larry Tron&quot;</bucket>
              <bucket>&quot;Brendan Dodson&quot;</bucket>
              <bucket>&quot;Lisa Hazard&quot;</bucket>
              <bucket>&quot;Jennifer Halladay&quot;</bucket>
              <bucket>&quot;Jill Matthias&quot;</bucket>
              <bucket>&quot;Chuck Magee&quot;</bucket>
              <bucket>&quot;Larry Hughes&quot;</bucket>
              <bucket>&quot;Sung Chung&quot;</bucket>
              <bucket>&quot;Stuart Calhoun&quot;</bucket>
              <bucket>&quot;Nicole Brennan&quot;</bucket>
              <bucket>&quot;Bart Folk&quot;</bucket>
              <bucket>&quot;Dorothy Dickinson&quot;</bucket>
              <bucket>&quot;Brad Norvell&quot;</bucket>
              <bucket>&quot;Andrew Roberts&quot;</bucket>
              <bucket>&quot;Harold Dahlen&quot;</bucket>
              <bucket>&quot;Sally Matthias&quot;</bucket>
              <bucket>&quot;Paul Lucas&quot;</bucket>
              <bucket>&quot;Guy Phonely&quot;</bucket>
              <bucket>&quot;Erin Mull&quot;</bucket>
              <bucket>&quot;Guy Thornton&quot;</bucket>
              <bucket>&quot;Robert Barroso&quot;</bucket>
              <bucket>&quot;Hilary Holden&quot;</bucket>
              <bucket>&quot;Allen Goldenen&quot;</bucket>
              <bucket>&quot;Joel Jenkins&quot;</bucket>
              <bucket>&quot;Anthony Garverick&quot;</bucket>
              <bucket>&quot;Muhammed Lee&quot;</bucket>
              <bucket>&quot;Anthony O&apos;Donnell&quot;</bucket>
              <bucket>&quot;Pete Takahito&quot;</bucket>
              <bucket>&quot;Dianna Arnett&quot;</bucket>
              <bucket>&quot;Michael Oakman&quot;</bucket>
              <bucket>&quot;Greg Hansen&quot;</bucket>
              <bucket>&quot;Phillip Breyer&quot;</bucket>
              <bucket>&quot;Bobby Odegard&quot;</bucket>
              <bucket>&quot;Ed Ludwig&quot;</bucket>
              <bucket>&quot;Clay Cheatham&quot;</bucket>
              <bucket>&quot;Roland Murray&quot;</bucket>
              <bucket>&quot;Karen Seio&quot;</bucket>
              <bucket>&quot;Anemone Ratner&quot;</bucket>
              <bucket>&quot;Fred Wasserman&quot;</bucket>
              <bucket>&quot;Jasper Cacioppo&quot;</bucket>
              <bucket>&quot;Adrian Shami&quot;</bucket>
              <bucket>&quot;Larry Blacks&quot;</bucket>
              <bucket>&quot;Ricardo Emerson&quot;</bucket>
              <bucket>&quot;Susan Gilcrest&quot;</bucket>
              <bucket>&quot;Roy Skaria&quot;</bucket>
              <bucket>&quot;Mitch Gastineau&quot;</bucket>
              <bucket>&quot;Carl Jackson&quot;</bucket>
              <bucket>&quot;Lela Donovan&quot;</bucket>
              <bucket>&quot;Thais Sissman&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' field-type='quantitative' major-origin='0.0' major-spacing='1000.0' minor-origin='0.0' minor-spacing='5000.0' scope='cols' type='space' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='text-format' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' value='*#' />
          </style-rule>
          <style-rule element='label'>
            <format attr='font-family' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]' value='Times New Roman' />
            <format attr='font-weight' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]' value='bold' />
            <format attr='font-size' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]' value='12' />
            <format attr='color' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]' value='#333333' />
            <format attr='text-format' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' value='N' />
            <format attr='font-family' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' value='Times New Roman' />
            <format attr='font-size' field='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' value='12' />
          </style-rule>
          <style-rule element='gridline'>
            <format attr='line-visibility' scope='rows' value='on' />
            <format attr='line-pattern-only' scope='rows' value='solid' />
            <format attr='stroke-color' scope='rows' value='#e157595d' />
            <format attr='stroke-color' scope='cols' value='#e157592d' />
          </style-rule>
          <style-rule element='table-div'>
            <format attr='stroke-color' scope='rows' value='#72b966' />
            <format attr='stroke-size' scope='rows' value='4' />
            <format attr='line-visibility' scope='rows' value='on' />
            <format attr='line-pattern-only' scope='rows' value='dashed' />
          </style-rule>
        </style>
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[usr:Calculation_3626875487110770688:qk]' />
              <text column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]</rows>
        <cols>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]</cols>
      </table>
      <simple-id uuid='{98E19099-7225-482A-8128-8E6A08B9D479}' />
    </worksheet>
    <worksheet name='Sales CustomerName by Profit bar (original)'>
      <table>
        <view>
          <datasources>
            <datasource caption='Orders (Sample - Superstore)' name='federated.1dsfepz0bnjcff1cg85u60g2ae1k' />
          </datasources>
          <datasource-dependencies datasource='federated.1dsfepz0bnjcff1cg85u60g2ae1k'>
            <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
            <column datatype='real' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' name='[Sales]' role='measure' type='quantitative' />
            <column-instance column='[Customer Name]' derivation='None' name='[none:Customer Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <manual-sort column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Sean Miller&quot;</bucket>
              <bucket>&quot;Tamara Chand&quot;</bucket>
              <bucket>&quot;Raymond Buch&quot;</bucket>
              <bucket>&quot;Tom Ashbrook&quot;</bucket>
              <bucket>&quot;Adrian Barton&quot;</bucket>
              <bucket>&quot;Ken Lonsdale&quot;</bucket>
              <bucket>&quot;Sanjit Chand&quot;</bucket>
              <bucket>&quot;Hunter Lopez&quot;</bucket>
              <bucket>&quot;Sanjit Engle&quot;</bucket>
              <bucket>&quot;Christopher Conant&quot;</bucket>
              <bucket>&quot;Todd Sumrall&quot;</bucket>
              <bucket>&quot;Greg Tran&quot;</bucket>
              <bucket>&quot;Becky Martin&quot;</bucket>
              <bucket>&quot;Seth Vernon&quot;</bucket>
              <bucket>&quot;Caroline Jumper&quot;</bucket>
              <bucket>&quot;Clay Ludtke&quot;</bucket>
              <bucket>&quot;Maria Etezadi&quot;</bucket>
              <bucket>&quot;Karen Ferguson&quot;</bucket>
              <bucket>&quot;Bill Shonely&quot;</bucket>
              <bucket>&quot;Edward Hooks&quot;</bucket>
              <bucket>&quot;John Lee&quot;</bucket>
              <bucket>&quot;Grant Thornton&quot;</bucket>
              <bucket>&quot;Helen Wasserman&quot;</bucket>
              <bucket>&quot;Tom Boeckenhauer&quot;</bucket>
              <bucket>&quot;Peter Fuller&quot;</bucket>
              <bucket>&quot;Christopher Martinez&quot;</bucket>
              <bucket>&quot;Justin Deggeller&quot;</bucket>
              <bucket>&quot;Joe Elijah&quot;</bucket>
              <bucket>&quot;Laura Armstrong&quot;</bucket>
              <bucket>&quot;Pete Kriz&quot;</bucket>
              <bucket>&quot;Daniel Raglin&quot;</bucket>
              <bucket>&quot;Natalie Fritzler&quot;</bucket>
              <bucket>&quot;Karen Daniels&quot;</bucket>
              <bucket>&quot;Nick Crebassa&quot;</bucket>
              <bucket>&quot;Harry Marie&quot;</bucket>
              <bucket>&quot;Keith Dawkins&quot;</bucket>
              <bucket>&quot;Sean Braxton&quot;</bucket>
              <bucket>&quot;Zuschuss Carroll&quot;</bucket>
              <bucket>&quot;Joseph Holt&quot;</bucket>
              <bucket>&quot;Nora Preis&quot;</bucket>
              <bucket>&quot;Anna Häberlin&quot;</bucket>
              <bucket>&quot;Adam Bellavance&quot;</bucket>
              <bucket>&quot;Jim Epp&quot;</bucket>
              <bucket>&quot;Jane Waco&quot;</bucket>
              <bucket>&quot;Lena Creighton&quot;</bucket>
              <bucket>&quot;John Murray&quot;</bucket>
              <bucket>&quot;Jonathan Doherty&quot;</bucket>
              <bucket>&quot;Patrick O&apos;Brill&quot;</bucket>
              <bucket>&quot;Maribeth Schnelling&quot;</bucket>
              <bucket>&quot;Rick Wilson&quot;</bucket>
              <bucket>&quot;Brian Moss&quot;</bucket>
              <bucket>&quot;Paul Prost&quot;</bucket>
              <bucket>&quot;Natalie Webber&quot;</bucket>
              <bucket>&quot;Dean percer&quot;</bucket>
              <bucket>&quot;Fred Hopkins&quot;</bucket>
              <bucket>&quot;Rick Huthwaite&quot;</bucket>
              <bucket>&quot;Penelope Sewall&quot;</bucket>
              <bucket>&quot;Brenda Bowman&quot;</bucket>
              <bucket>&quot;Joel Eaton&quot;</bucket>
              <bucket>&quot;Yana Sorensen&quot;</bucket>
              <bucket>&quot;Andy Reiter&quot;</bucket>
              <bucket>&quot;Dan Reichenbach&quot;</bucket>
              <bucket>&quot;Grace Kelly&quot;</bucket>
              <bucket>&quot;Joseph Airdo&quot;</bucket>
              <bucket>&quot;Nathan Mautz&quot;</bucket>
              <bucket>&quot;Valerie Dominguez&quot;</bucket>
              <bucket>&quot;Sarah Brown&quot;</bucket>
              <bucket>&quot;James Galang&quot;</bucket>
              <bucket>&quot;Darrin Martin&quot;</bucket>
              <bucket>&quot;Corinna Mitchell&quot;</bucket>
              <bucket>&quot;Max Jones&quot;</bucket>
              <bucket>&quot;Brosina Hoffman&quot;</bucket>
              <bucket>&quot;Rob Lucas&quot;</bucket>
              <bucket>&quot;William Brown&quot;</bucket>
              <bucket>&quot;Victoria Wilson&quot;</bucket>
              <bucket>&quot;Shirley Daniels&quot;</bucket>
              <bucket>&quot;Quincy Jones&quot;</bucket>
              <bucket>&quot;Alan Dominguez&quot;</bucket>
              <bucket>&quot;Cassandra Brandow&quot;</bucket>
              <bucket>&quot;Greg Maxwell&quot;</bucket>
              <bucket>&quot;Shahid Collister&quot;</bucket>
              <bucket>&quot;Kristen Hastings&quot;</bucket>
              <bucket>&quot;Robert Marley&quot;</bucket>
              <bucket>&quot;Keith Herrera&quot;</bucket>
              <bucket>&quot;Ben Ferrer&quot;</bucket>
              <bucket>&quot;Christine Phan&quot;</bucket>
              <bucket>&quot;Bill Donatelli&quot;</bucket>
              <bucket>&quot;Cindy Stewart&quot;</bucket>
              <bucket>&quot;Anne McFarland&quot;</bucket>
              <bucket>&quot;Ross Baird&quot;</bucket>
              <bucket>&quot;Katherine Murray&quot;</bucket>
              <bucket>&quot;Alex Avila&quot;</bucket>
              <bucket>&quot;Suzanne McNair&quot;</bucket>
              <bucket>&quot;Naresj Patel&quot;</bucket>
              <bucket>&quot;Amy Cox&quot;</bucket>
              <bucket>&quot;Mick Hernandez&quot;</bucket>
              <bucket>&quot;Dennis Pardue&quot;</bucket>
              <bucket>&quot;Emily Phan&quot;</bucket>
              <bucket>&quot;Yoseph Carroll&quot;</bucket>
              <bucket>&quot;Stefania Perrino&quot;</bucket>
              <bucket>&quot;Luke Weiss&quot;</bucket>
              <bucket>&quot;Cathy Prescott&quot;</bucket>
              <bucket>&quot;Thomas Seio&quot;</bucket>
              <bucket>&quot;Tonja Turnell&quot;</bucket>
              <bucket>&quot;Mitch Webber&quot;</bucket>
              <bucket>&quot;Tom Prescott&quot;</bucket>
              <bucket>&quot;Tamara Willingham&quot;</bucket>
              <bucket>&quot;Dianna Wilson&quot;</bucket>
              <bucket>&quot;Mitch Willingham&quot;</bucket>
              <bucket>&quot;Harold Ryan&quot;</bucket>
              <bucket>&quot;Steven Cartwright&quot;</bucket>
              <bucket>&quot;Resi Pölking&quot;</bucket>
              <bucket>&quot;Lena Radford&quot;</bucket>
              <bucket>&quot;Mike Pelletier&quot;</bucket>
              <bucket>&quot;Anna Andreadi&quot;</bucket>
              <bucket>&quot;Ivan Liston&quot;</bucket>
              <bucket>&quot;Kelly Lampkin&quot;</bucket>
              <bucket>&quot;Laurel Beltran&quot;</bucket>
              <bucket>&quot;Dave Hallsten&quot;</bucket>
              <bucket>&quot;Irene Maddox&quot;</bucket>
              <bucket>&quot;Ted Trevino&quot;</bucket>
              <bucket>&quot;Kunst Miller&quot;</bucket>
              <bucket>&quot;Philisse Overcash&quot;</bucket>
              <bucket>&quot;Heather Kirkland&quot;</bucket>
              <bucket>&quot;Anthony Jacobs&quot;</bucket>
              <bucket>&quot;Joe Kamberova&quot;</bucket>
              <bucket>&quot;Alan Hwang&quot;</bucket>
              <bucket>&quot;Dean Katz&quot;</bucket>
              <bucket>&quot;Russell Applegate&quot;</bucket>
              <bucket>&quot;Sue Ann Reed&quot;</bucket>
              <bucket>&quot;Jim Kriz&quot;</bucket>
              <bucket>&quot;Bart Watters&quot;</bucket>
              <bucket>&quot;Tracy Blumstein&quot;</bucket>
              <bucket>&quot;Giulietta Baptist&quot;</bucket>
              <bucket>&quot;Rick Bensley&quot;</bucket>
              <bucket>&quot;Erin Smith&quot;</bucket>
              <bucket>&quot;Deborah Brumfield&quot;</bucket>
              <bucket>&quot;Kean Thornton&quot;</bucket>
              <bucket>&quot;Sample Company A&quot;</bucket>
              <bucket>&quot;Eugene Moren&quot;</bucket>
              <bucket>&quot;Dave Brooks&quot;</bucket>
              <bucket>&quot;Anthony Rawles&quot;</bucket>
              <bucket>&quot;Arthur Gainer&quot;</bucket>
              <bucket>&quot;Anthony Johnson&quot;</bucket>
              <bucket>&quot;Linda Cazamias&quot;</bucket>
              <bucket>&quot;Stewart Carmichael&quot;</bucket>
              <bucket>&quot;Theone Pippenger&quot;</bucket>
              <bucket>&quot;Mark Cousins&quot;</bucket>
              <bucket>&quot;Jamie Kunitz&quot;</bucket>
              <bucket>&quot;Katrina Willman&quot;</bucket>
              <bucket>&quot;Bradley Drucker&quot;</bucket>
              <bucket>&quot;Arianne Irving&quot;</bucket>
              <bucket>&quot;Scot Coram&quot;</bucket>
              <bucket>&quot;Ellis Ballard&quot;</bucket>
              <bucket>&quot;Gary Zandusky&quot;</bucket>
              <bucket>&quot;Steven Roelle&quot;</bucket>
              <bucket>&quot;Natalie DeCherney&quot;</bucket>
              <bucket>&quot;Matt Abelman&quot;</bucket>
              <bucket>&quot;Sung Pak&quot;</bucket>
              <bucket>&quot;Dana Kaydos&quot;</bucket>
              <bucket>&quot;Rick Duston&quot;</bucket>
              <bucket>&quot;Toby Carlisle&quot;</bucket>
              <bucket>&quot;Alan Schoenberger&quot;</bucket>
              <bucket>&quot;Frank Hawley&quot;</bucket>
              <bucket>&quot;Claudia Bergmann&quot;</bucket>
              <bucket>&quot;Tracy Hopkins&quot;</bucket>
              <bucket>&quot;Bill Eplett&quot;</bucket>
              <bucket>&quot;Jill Fjeld&quot;</bucket>
              <bucket>&quot;Gary Hwang&quot;</bucket>
              <bucket>&quot;Roland Schwarz&quot;</bucket>
              <bucket>&quot;Muhammed Yedwab&quot;</bucket>
              <bucket>&quot;Peter McVee&quot;</bucket>
              <bucket>&quot;Stewart Visinsky&quot;</bucket>
              <bucket>&quot;Denise Monton&quot;</bucket>
              <bucket>&quot;Frank Preis&quot;</bucket>
              <bucket>&quot;Susan Pistek&quot;</bucket>
              <bucket>&quot;Craig Molinari&quot;</bucket>
              <bucket>&quot;Michael Paige&quot;</bucket>
              <bucket>&quot;Sean Christensen&quot;</bucket>
              <bucket>&quot;Sanjit Jacobs&quot;</bucket>
              <bucket>&quot;Luke Foster&quot;</bucket>
              <bucket>&quot;Pierre Wener&quot;</bucket>
              <bucket>&quot;George Ashbrook&quot;</bucket>
              <bucket>&quot;Ken Heidel&quot;</bucket>
              <bucket>&quot;Chris Cortes&quot;</bucket>
              <bucket>&quot;Dorothy Badders&quot;</bucket>
              <bucket>&quot;Nora Paige&quot;</bucket>
              <bucket>&quot;Kelly Collister&quot;</bucket>
              <bucket>&quot;Fred Chung&quot;</bucket>
              <bucket>&quot;Bill Stewart&quot;</bucket>
              <bucket>&quot;John Stevenson&quot;</bucket>
              <bucket>&quot;Ruben Ausman&quot;</bucket>
              <bucket>&quot;Annie Thurman&quot;</bucket>
              <bucket>&quot;Olvera Toch&quot;</bucket>
              <bucket>&quot;Rose O&apos;Brian&quot;</bucket>
              <bucket>&quot;Michael Chen&quot;</bucket>
              <bucket>&quot;Michael Moore&quot;</bucket>
              <bucket>&quot;Carol Adams&quot;</bucket>
              <bucket>&quot;Matthew Grinstein&quot;</bucket>
              <bucket>&quot;Maribeth Dona&quot;</bucket>
              <bucket>&quot;Jim Karlsson&quot;</bucket>
              <bucket>&quot;Juliana Krohn&quot;</bucket>
              <bucket>&quot;Frank Merwin&quot;</bucket>
              <bucket>&quot;Scott Cohen&quot;</bucket>
              <bucket>&quot;Hunter Glantz&quot;</bucket>
              <bucket>&quot;Ben Peterman&quot;</bucket>
              <bucket>&quot;Liz Preis&quot;</bucket>
              <bucket>&quot;Christopher Schild&quot;</bucket>
              <bucket>&quot;Ed Braxton&quot;</bucket>
              <bucket>&quot;Jeremy Pistek&quot;</bucket>
              <bucket>&quot;Sam Zeldin&quot;</bucket>
              <bucket>&quot;Rick Hansen&quot;</bucket>
              <bucket>&quot;Thomas Boland&quot;</bucket>
              <bucket>&quot;Gary McGarr&quot;</bucket>
              <bucket>&quot;Dionis Lloyd&quot;</bucket>
              <bucket>&quot;Erica Smith&quot;</bucket>
              <bucket>&quot;Robert Waldorf&quot;</bucket>
              <bucket>&quot;Anna Gayman&quot;</bucket>
              <bucket>&quot;Emily Ducich&quot;</bucket>
              <bucket>&quot;Pauline Webber&quot;</bucket>
              <bucket>&quot;Sarah Foster&quot;</bucket>
              <bucket>&quot;Frank Carlisle&quot;</bucket>
              <bucket>&quot;Sally Hughsby&quot;</bucket>
              <bucket>&quot;Sandra Glassco&quot;</bucket>
              <bucket>&quot;Trudy Schmidt&quot;</bucket>
              <bucket>&quot;Sam Craven&quot;</bucket>
              <bucket>&quot;Victoria Pisteka&quot;</bucket>
              <bucket>&quot;Doug Jacobs&quot;</bucket>
              <bucket>&quot;Dianna Vittorini&quot;</bucket>
              <bucket>&quot;Sylvia Foulston&quot;</bucket>
              <bucket>&quot;Dan Campbell&quot;</bucket>
              <bucket>&quot;Arthur Prichep&quot;</bucket>
              <bucket>&quot;Dennis Kane&quot;</bucket>
              <bucket>&quot;Katharine Harms&quot;</bucket>
              <bucket>&quot;Randy Ferguson&quot;</bucket>
              <bucket>&quot;Rick Reed&quot;</bucket>
              <bucket>&quot;Brian Dahlen&quot;</bucket>
              <bucket>&quot;Brian Stugart&quot;</bucket>
              <bucket>&quot;Rob Williams&quot;</bucket>
              <bucket>&quot;Daniel Lacy&quot;</bucket>
              <bucket>&quot;Damala Kotsonis&quot;</bucket>
              <bucket>&quot;Adam Shillingsburg&quot;</bucket>
              <bucket>&quot;Jack O&apos;Briant&quot;</bucket>
              <bucket>&quot;Adam Hart&quot;</bucket>
              <bucket>&quot;Henry Goldwyn&quot;</bucket>
              <bucket>&quot;Lindsay Castell&quot;</bucket>
              <bucket>&quot;Carol Triggs&quot;</bucket>
              <bucket>&quot;Edward Becker&quot;</bucket>
              <bucket>&quot;Sharelle Roach&quot;</bucket>
              <bucket>&quot;Lindsay Williams&quot;</bucket>
              <bucket>&quot;Ricardo Sperren&quot;</bucket>
              <bucket>&quot;Alejandro Savely&quot;</bucket>
              <bucket>&quot;Mark Packer&quot;</bucket>
              <bucket>&quot;Christine Sundaresam&quot;</bucket>
              <bucket>&quot;Brian Thompson&quot;</bucket>
              <bucket>&quot;Deirdre Greer&quot;</bucket>
              <bucket>&quot;Jeremy Lonsdale&quot;</bucket>
              <bucket>&quot;Greg Matthias&quot;</bucket>
              <bucket>&quot;Janet Martin&quot;</bucket>
              <bucket>&quot;Chloris Kastensmidt&quot;</bucket>
              <bucket>&quot;Karen Bern&quot;</bucket>
              <bucket>&quot;Maxwell Schwartz&quot;</bucket>
              <bucket>&quot;Ruben Dartt&quot;</bucket>
              <bucket>&quot;Tanja Norvell&quot;</bucket>
              <bucket>&quot;Steve Nguyen&quot;</bucket>
              <bucket>&quot;Speros Goranitis&quot;</bucket>
              <bucket>&quot;Katherine Hughes&quot;</bucket>
              <bucket>&quot;Patrick Gardner&quot;</bucket>
              <bucket>&quot;Eugene Hildebrand&quot;</bucket>
              <bucket>&quot;Gary Mitchum&quot;</bucket>
              <bucket>&quot;Eugene Barchas&quot;</bucket>
              <bucket>&quot;Mike Gockenbach&quot;</bucket>
              <bucket>&quot;Toby Gnade&quot;</bucket>
              <bucket>&quot;Kean Takahito&quot;</bucket>
              <bucket>&quot;Shahid Shariari&quot;</bucket>
              <bucket>&quot;Sara Luxemburg&quot;</bucket>
              <bucket>&quot;Aaron Smayling&quot;</bucket>
              <bucket>&quot;Cynthia Arntzen&quot;</bucket>
              <bucket>&quot;Carlos Soltero&quot;</bucket>
              <bucket>&quot;Lindsay Shagiari&quot;</bucket>
              <bucket>&quot;Michelle Huthwaite&quot;</bucket>
              <bucket>&quot;Frank Atkinson&quot;</bucket>
              <bucket>&quot;David Bremer&quot;</bucket>
              <bucket>&quot;Noel Staavos&quot;</bucket>
              <bucket>&quot;Tamara Manning&quot;</bucket>
              <bucket>&quot;Christine Kargatis&quot;</bucket>
              <bucket>&quot;Thea Hudgings&quot;</bucket>
              <bucket>&quot;Liz Thompson&quot;</bucket>
              <bucket>&quot;Becky Castell&quot;</bucket>
              <bucket>&quot;Julie Kriz&quot;</bucket>
              <bucket>&quot;Shaun Weien&quot;</bucket>
              <bucket>&quot;Maris LaWare&quot;</bucket>
              <bucket>&quot;Rob Dowd&quot;</bucket>
              <bucket>&quot;Craig Yedwab&quot;</bucket>
              <bucket>&quot;Neil Ducich&quot;</bucket>
              <bucket>&quot;Meg Tillman&quot;</bucket>
              <bucket>&quot;Barry Französisch&quot;</bucket>
              <bucket>&quot;David Smith&quot;</bucket>
              <bucket>&quot;Paul Van Hugh&quot;</bucket>
              <bucket>&quot;Ionia McGrath&quot;</bucket>
              <bucket>&quot;Chuck Clark&quot;</bucket>
              <bucket>&quot;Craig Carroll&quot;</bucket>
              <bucket>&quot;Arthur Wiediger&quot;</bucket>
              <bucket>&quot;Erin Ashbrook&quot;</bucket>
              <bucket>&quot;Linda Southworth&quot;</bucket>
              <bucket>&quot;Darren Budd&quot;</bucket>
              <bucket>&quot;Justin MacKendrick&quot;</bucket>
              <bucket>&quot;Christina VanderZanden&quot;</bucket>
              <bucket>&quot;Troy Staebel&quot;</bucket>
              <bucket>&quot;Gary Hansen&quot;</bucket>
              <bucket>&quot;Barry Gonzalez&quot;</bucket>
              <bucket>&quot;Trudy Brown&quot;</bucket>
              <bucket>&quot;Robert Dilbeck&quot;</bucket>
              <bucket>&quot;John Castell&quot;</bucket>
              <bucket>&quot;Philip Fox&quot;</bucket>
              <bucket>&quot;Emily Burns&quot;</bucket>
              <bucket>&quot;Chris Selesnick&quot;</bucket>
              <bucket>&quot;Michelle Moray&quot;</bucket>
              <bucket>&quot;Ken Black&quot;</bucket>
              <bucket>&quot;Lauren Leatherbury&quot;</bucket>
              <bucket>&quot;Marc Crier&quot;</bucket>
              <bucket>&quot;John Lucas&quot;</bucket>
              <bucket>&quot;Marina Lichtenstein&quot;</bucket>
              <bucket>&quot;Jay Kimmel&quot;</bucket>
              <bucket>&quot;Justin Ellison&quot;</bucket>
              <bucket>&quot;Bradley Talbott&quot;</bucket>
              <bucket>&quot;Bill Overfelt&quot;</bucket>
              <bucket>&quot;Frank Olsen&quot;</bucket>
              <bucket>&quot;Nicole Hansen&quot;</bucket>
              <bucket>&quot;Richard Bierner&quot;</bucket>
              <bucket>&quot;Eva Jacobs&quot;</bucket>
              <bucket>&quot;Dave Kipp&quot;</bucket>
              <bucket>&quot;Christina Anderson&quot;</bucket>
              <bucket>&quot;Logan Currie&quot;</bucket>
              <bucket>&quot;Ralph Arnett&quot;</bucket>
              <bucket>&quot;Katherine Nockton&quot;</bucket>
              <bucket>&quot;Sean O&apos;Donnell&quot;</bucket>
              <bucket>&quot;Stephanie Ulpright&quot;</bucket>
              <bucket>&quot;Helen Andreada&quot;</bucket>
              <bucket>&quot;Alejandro Grove&quot;</bucket>
              <bucket>&quot;Lena Cacioppo&quot;</bucket>
              <bucket>&quot;Steve Chapman&quot;</bucket>
              <bucket>&quot;Neola Schneider&quot;</bucket>
              <bucket>&quot;Beth Thompson&quot;</bucket>
              <bucket>&quot;Eleni McCrary&quot;</bucket>
              <bucket>&quot;Mary Zewe&quot;</bucket>
              <bucket>&quot;Bruce Stewart&quot;</bucket>
              <bucket>&quot;Deanra Eno&quot;</bucket>
              <bucket>&quot;Corey Catlett&quot;</bucket>
              <bucket>&quot;Ann Chong&quot;</bucket>
              <bucket>&quot;Charles McCrossin&quot;</bucket>
              <bucket>&quot;Herbert Flentye&quot;</bucket>
              <bucket>&quot;Fred McMath&quot;</bucket>
              <bucket>&quot;Julia Barnett&quot;</bucket>
              <bucket>&quot;Joy Smith&quot;</bucket>
              <bucket>&quot;Don Jones&quot;</bucket>
              <bucket>&quot;Amy Hunt&quot;</bucket>
              <bucket>&quot;Patrick O&apos;Donnell&quot;</bucket>
              <bucket>&quot;Nick Zandusky&quot;</bucket>
              <bucket>&quot;Michael Nguyen&quot;</bucket>
              <bucket>&quot;Beth Paige&quot;</bucket>
              <bucket>&quot;Charles Crestani&quot;</bucket>
              <bucket>&quot;Nat Carroll&quot;</bucket>
              <bucket>&quot;Filia McAdams&quot;</bucket>
              <bucket>&quot;Mark Hamilton&quot;</bucket>
              <bucket>&quot;Brendan Sweed&quot;</bucket>
              <bucket>&quot;Valerie Mitchum&quot;</bucket>
              <bucket>&quot;George Zrebassa&quot;</bucket>
              <bucket>&quot;Michelle Arnett&quot;</bucket>
              <bucket>&quot;Bart Pistole&quot;</bucket>
              <bucket>&quot;Matt Collister&quot;</bucket>
              <bucket>&quot;Thea Hendricks&quot;</bucket>
              <bucket>&quot;Marc Harrigan&quot;</bucket>
              <bucket>&quot;David Flashing&quot;</bucket>
              <bucket>&quot;Xylona Preis&quot;</bucket>
              <bucket>&quot;Clytie Kelty&quot;</bucket>
              <bucket>&quot;Jennifer Ferguson&quot;</bucket>
              <bucket>&quot;Cynthia Voltz&quot;</bucket>
              <bucket>&quot;Nick Radford&quot;</bucket>
              <bucket>&quot;Jack Garza&quot;</bucket>
              <bucket>&quot;Andrew Gjertsen&quot;</bucket>
              <bucket>&quot;Craig Leslie&quot;</bucket>
              <bucket>&quot;Maureen Gastineau&quot;</bucket>
              <bucket>&quot;Roland Fjeld&quot;</bucket>
              <bucket>&quot;Elizabeth Moffitt&quot;</bucket>
              <bucket>&quot;Dean Braden&quot;</bucket>
              <bucket>&quot;Chris McAfee&quot;</bucket>
              <bucket>&quot;Michael Kennedy&quot;</bucket>
              <bucket>&quot;Lena Hernandez&quot;</bucket>
              <bucket>&quot;Kristina Nunn&quot;</bucket>
              <bucket>&quot;Jamie Frazer&quot;</bucket>
              <bucket>&quot;Fred Harton&quot;</bucket>
              <bucket>&quot;Craig Carreira&quot;</bucket>
              <bucket>&quot;Bobby Elias&quot;</bucket>
              <bucket>&quot;Kalyca Meade&quot;</bucket>
              <bucket>&quot;Matt Connell&quot;</bucket>
              <bucket>&quot;Justin Hirsh&quot;</bucket>
              <bucket>&quot;Maribeth Yedwab&quot;</bucket>
              <bucket>&quot;Ken Dana&quot;</bucket>
              <bucket>&quot;Tony Sayre&quot;</bucket>
              <bucket>&quot;Jason Gross&quot;</bucket>
              <bucket>&quot;Laurel Workman&quot;</bucket>
              <bucket>&quot;Allen Rosenblatt&quot;</bucket>
              <bucket>&quot;Greg Guthrie&quot;</bucket>
              <bucket>&quot;Nathan Cano&quot;</bucket>
              <bucket>&quot;Mick Crebagga&quot;</bucket>
              <bucket>&quot;Dave Poirier&quot;</bucket>
              <bucket>&quot;Phillip Flathmann&quot;</bucket>
              <bucket>&quot;Maya Herman&quot;</bucket>
              <bucket>&quot;Janet Lee&quot;</bucket>
              <bucket>&quot;Justin Ritter&quot;</bucket>
              <bucket>&quot;Edward Nazzal&quot;</bucket>
              <bucket>&quot;Toby Braunhardt&quot;</bucket>
              <bucket>&quot;Giulietta Weimer&quot;</bucket>
              <bucket>&quot;Bill Tyler&quot;</bucket>
              <bucket>&quot;Pamela Stobb&quot;</bucket>
              <bucket>&quot;Shahid Hopkins&quot;</bucket>
              <bucket>&quot;Kean Nguyen&quot;</bucket>
              <bucket>&quot;Daniel Byrd&quot;</bucket>
              <bucket>&quot;Roy Phan&quot;</bucket>
              <bucket>&quot;Theresa Swint&quot;</bucket>
              <bucket>&quot;Helen Abelman&quot;</bucket>
              <bucket>&quot;Ed Jacobs&quot;</bucket>
              <bucket>&quot;Neoma Murray&quot;</bucket>
              <bucket>&quot;John Dryer&quot;</bucket>
              <bucket>&quot;Clay Rozendal&quot;</bucket>
              <bucket>&quot;Duane Noonan&quot;</bucket>
              <bucket>&quot;Karen Carlisle&quot;</bucket>
              <bucket>&quot;Stefanie Holloman&quot;</bucket>
              <bucket>&quot;Liz Carlisle&quot;</bucket>
              <bucket>&quot;Rob Haberlin&quot;</bucket>
              <bucket>&quot;Trudy Glocke&quot;</bucket>
              <bucket>&quot;Max Ludwig&quot;</bucket>
              <bucket>&quot;Roger Barcio&quot;</bucket>
              <bucket>&quot;Tom Stivers&quot;</bucket>
              <bucket>&quot;Art Ferguson&quot;</bucket>
              <bucket>&quot;Carlos Daly&quot;</bucket>
              <bucket>&quot;Nicole Fjeld&quot;</bucket>
              <bucket>&quot;Denny Joy&quot;</bucket>
              <bucket>&quot;Victoria Brennan&quot;</bucket>
              <bucket>&quot;Harold Pawlan&quot;</bucket>
              <bucket>&quot;Doug Bickford&quot;</bucket>
              <bucket>&quot;Paul Gonzalez&quot;</bucket>
              <bucket>&quot;Nona Balk&quot;</bucket>
              <bucket>&quot;Scott Williamson&quot;</bucket>
              <bucket>&quot;Lisa DeCherney&quot;</bucket>
              <bucket>&quot;Christy Brittain&quot;</bucket>
              <bucket>&quot;Tracy Poddar&quot;</bucket>
              <bucket>&quot;Jas O&apos;Carroll&quot;</bucket>
              <bucket>&quot;Jay Fein&quot;</bucket>
              <bucket>&quot;Max Engle&quot;</bucket>
              <bucket>&quot;Susan Vittorini&quot;</bucket>
              <bucket>&quot;Katherine Ducich&quot;</bucket>
              <bucket>&quot;Giulietta Dortch&quot;</bucket>
              <bucket>&quot;Sheri Gordon&quot;</bucket>
              <bucket>&quot;Lisa Ryan&quot;</bucket>
              <bucket>&quot;Shaun Chance&quot;</bucket>
              <bucket>&quot;Brooke Gillingham&quot;</bucket>
              <bucket>&quot;Stephanie Phelps&quot;</bucket>
              <bucket>&quot;Nat Gilpin&quot;</bucket>
              <bucket>&quot;Cynthia Delaney&quot;</bucket>
              <bucket>&quot;Skye Norling&quot;</bucket>
              <bucket>&quot;Patrick Ryan&quot;</bucket>
              <bucket>&quot;Ashley Jarboe&quot;</bucket>
              <bucket>&quot;Pamela Coakley&quot;</bucket>
              <bucket>&quot;Emily Grady&quot;</bucket>
              <bucket>&quot;Pauline Johnson&quot;</bucket>
              <bucket>&quot;Noah Childs&quot;</bucket>
              <bucket>&quot;Janet Molinari&quot;</bucket>
              <bucket>&quot;Jennifer Braxton&quot;</bucket>
              <bucket>&quot;Andrew Allen&quot;</bucket>
              <bucket>&quot;Chad Cunningham&quot;</bucket>
              <bucket>&quot;Darrin Sayre&quot;</bucket>
              <bucket>&quot;Monica Federle&quot;</bucket>
              <bucket>&quot;Aaron Hawkins&quot;</bucket>
              <bucket>&quot;Logan Haushalter&quot;</bucket>
              <bucket>&quot;Ben Wallace&quot;</bucket>
              <bucket>&quot;Valerie Takahito&quot;</bucket>
              <bucket>&quot;Adrian Hane&quot;</bucket>
              <bucket>&quot;Mike Vittorini&quot;</bucket>
              <bucket>&quot;Jessica Myrick&quot;</bucket>
              <bucket>&quot;Brad Eason&quot;</bucket>
              <bucket>&quot;Denny Blanton&quot;</bucket>
              <bucket>&quot;Julie Prescott&quot;</bucket>
              <bucket>&quot;Tracy Zic&quot;</bucket>
              <bucket>&quot;Becky Pak&quot;</bucket>
              <bucket>&quot;Darren Koutras&quot;</bucket>
              <bucket>&quot;Meg O&apos;Connel&quot;</bucket>
              <bucket>&quot;Ryan Akin&quot;</bucket>
              <bucket>&quot;Katrina Edelman&quot;</bucket>
              <bucket>&quot;Cathy Armstrong&quot;</bucket>
              <bucket>&quot;Candace McMahon&quot;</bucket>
              <bucket>&quot;Jennifer Patt&quot;</bucket>
              <bucket>&quot;Chad McGuire&quot;</bucket>
              <bucket>&quot;Cindy Chapman&quot;</bucket>
              <bucket>&quot;Erica Bern&quot;</bucket>
              <bucket>&quot;Anne Pryor&quot;</bucket>
              <bucket>&quot;Annie Zypern&quot;</bucket>
              <bucket>&quot;Maurice Satty&quot;</bucket>
              <bucket>&quot;Tim Brockman&quot;</bucket>
              <bucket>&quot;Craig Reiter&quot;</bucket>
              <bucket>&quot;Alan Haines&quot;</bucket>
              <bucket>&quot;Benjamin Farhat&quot;</bucket>
              <bucket>&quot;Cyma Kinney&quot;</bucket>
              <bucket>&quot;Mike Caudle&quot;</bucket>
              <bucket>&quot;James Lanier&quot;</bucket>
              <bucket>&quot;Karl Braun&quot;</bucket>
              <bucket>&quot;George Bell&quot;</bucket>
              <bucket>&quot;Odella Nelson&quot;</bucket>
              <bucket>&quot;Mark Van Huff&quot;</bucket>
              <bucket>&quot;Maria Bertelson&quot;</bucket>
              <bucket>&quot;Brian DeCherney&quot;</bucket>
              <bucket>&quot;Cathy Hwang&quot;</bucket>
              <bucket>&quot;Bruce Degenhardt&quot;</bucket>
              <bucket>&quot;Benjamin Venier&quot;</bucket>
              <bucket>&quot;Kelly Andreada&quot;</bucket>
              <bucket>&quot;Ann Blume&quot;</bucket>
              <bucket>&quot;John Grady&quot;</bucket>
              <bucket>&quot;Dan Lawera&quot;</bucket>
              <bucket>&quot;Zuschuss Donatelli&quot;</bucket>
              <bucket>&quot;Charlotte Melton&quot;</bucket>
              <bucket>&quot;Laurel Elliston&quot;</bucket>
              <bucket>&quot;Ted Butterfield&quot;</bucket>
              <bucket>&quot;Parhena Norris&quot;</bucket>
              <bucket>&quot;Ralph Kennedy&quot;</bucket>
              <bucket>&quot;Bradley Nguyen&quot;</bucket>
              <bucket>&quot;Delfina Latchford&quot;</bucket>
              <bucket>&quot;Philip Brown&quot;</bucket>
              <bucket>&quot;Andy Gerbode&quot;</bucket>
              <bucket>&quot;Raymond Messe&quot;</bucket>
              <bucket>&quot;Paul Knutson&quot;</bucket>
              <bucket>&quot;Tamara Dahlen&quot;</bucket>
              <bucket>&quot;Julia West&quot;</bucket>
              <bucket>&quot;Mick Brown&quot;</bucket>
              <bucket>&quot;Thomas Thornton&quot;</bucket>
              <bucket>&quot;Christine Abelman&quot;</bucket>
              <bucket>&quot;Roger Demir&quot;</bucket>
              <bucket>&quot;Nancy Lomonaco&quot;</bucket>
              <bucket>&quot;Jill Stevenson&quot;</bucket>
              <bucket>&quot;Paul MacIntyre&quot;</bucket>
              <bucket>&quot;Guy Armstrong&quot;</bucket>
              <bucket>&quot;Cyra Reiten&quot;</bucket>
              <bucket>&quot;Nathan Gelder&quot;</bucket>
              <bucket>&quot;Jeremy Ellison&quot;</bucket>
              <bucket>&quot;Troy Blackwell&quot;</bucket>
              <bucket>&quot;Frank Gastineau&quot;</bucket>
              <bucket>&quot;Don Miller&quot;</bucket>
              <bucket>&quot;Gene Hale&quot;</bucket>
              <bucket>&quot;Sarah Bern&quot;</bucket>
              <bucket>&quot;Liz MacKendrick&quot;</bucket>
              <bucket>&quot;Maureen Gnade&quot;</bucket>
              <bucket>&quot;Sarah Jordon&quot;</bucket>
              <bucket>&quot;Bryan Mills&quot;</bucket>
              <bucket>&quot;Barry Franz&quot;</bucket>
              <bucket>&quot;Saphhira Shifley&quot;</bucket>
              <bucket>&quot;Dario Medina&quot;</bucket>
              <bucket>&quot;Michelle Tran&quot;</bucket>
              <bucket>&quot;Shirley Jackson&quot;</bucket>
              <bucket>&quot;Magdelene Morse&quot;</bucket>
              <bucket>&quot;Sibella Parks&quot;</bucket>
              <bucket>&quot;Matt Collins&quot;</bucket>
              <bucket>&quot;Eileen Kiefer&quot;</bucket>
              <bucket>&quot;Corey-Lock&quot;</bucket>
              <bucket>&quot;Denny Ordway&quot;</bucket>
              <bucket>&quot;Hallie Redmond&quot;</bucket>
              <bucket>&quot;Georgia Rosenberg&quot;</bucket>
              <bucket>&quot;Cari Sayre&quot;</bucket>
              <bucket>&quot;Paul Stevenson&quot;</bucket>
              <bucket>&quot;Stuart Van&quot;</bucket>
              <bucket>&quot;Doug O&apos;Connell&quot;</bucket>
              <bucket>&quot;Carl Ludwig&quot;</bucket>
              <bucket>&quot;Liz Willingham&quot;</bucket>
              <bucket>&quot;Michelle Ellison&quot;</bucket>
              <bucket>&quot;Gene McClure&quot;</bucket>
              <bucket>&quot;Steve Carroll&quot;</bucket>
              <bucket>&quot;Matt Hagelstein&quot;</bucket>
              <bucket>&quot;Elpida Rittenbach&quot;</bucket>
              <bucket>&quot;Tony Chapman&quot;</bucket>
              <bucket>&quot;Joni Wasserman&quot;</bucket>
              <bucket>&quot;Michael Grace&quot;</bucket>
              <bucket>&quot;Nora Pelletier&quot;</bucket>
              <bucket>&quot;Patrick Jones&quot;</bucket>
              <bucket>&quot;Erica Hernandez&quot;</bucket>
              <bucket>&quot;Jack Lebron&quot;</bucket>
              <bucket>&quot;Christina DeMoss&quot;</bucket>
              <bucket>&quot;Michael Dominguez&quot;</bucket>
              <bucket>&quot;Dorothy Wardle&quot;</bucket>
              <bucket>&quot;Evan Bailliet&quot;</bucket>
              <bucket>&quot;Benjamin Patterson&quot;</bucket>
              <bucket>&quot;Debra Catini&quot;</bucket>
              <bucket>&quot;Alyssa Tate&quot;</bucket>
              <bucket>&quot;Jim Radford&quot;</bucket>
              <bucket>&quot;Duane Benoit&quot;</bucket>
              <bucket>&quot;Claire Gute&quot;</bucket>
              <bucket>&quot;Kimberly Carter&quot;</bucket>
              <bucket>&quot;Ross DeVincentis&quot;</bucket>
              <bucket>&quot;Carl Weiss&quot;</bucket>
              <bucket>&quot;Jim Sink&quot;</bucket>
              <bucket>&quot;Darrin Van Huff&quot;</bucket>
              <bucket>&quot;Alan Barnes&quot;</bucket>
              <bucket>&quot;Tony Molinari&quot;</bucket>
              <bucket>&quot;Jesus Ocampo&quot;</bucket>
              <bucket>&quot;Scot Wooten&quot;</bucket>
              <bucket>&quot;Jeremy Farry&quot;</bucket>
              <bucket>&quot;Dennis Bolton&quot;</bucket>
              <bucket>&quot;David Wiener&quot;</bucket>
              <bucket>&quot;Cindy Schnelling&quot;</bucket>
              <bucket>&quot;Pauline Chand&quot;</bucket>
              <bucket>&quot;David Philippe&quot;</bucket>
              <bucket>&quot;Jenna Caffey&quot;</bucket>
              <bucket>&quot;Phillina Ober&quot;</bucket>
              <bucket>&quot;Allen Armold&quot;</bucket>
              <bucket>&quot;Vivek Sundaresam&quot;</bucket>
              <bucket>&quot;Alex Russell&quot;</bucket>
              <bucket>&quot;Darren Powers&quot;</bucket>
              <bucket>&quot;Duane Huffman&quot;</bucket>
              <bucket>&quot;Susan MacKendrick&quot;</bucket>
              <bucket>&quot;Eudokia Martin&quot;</bucket>
              <bucket>&quot;Theresa Coyne&quot;</bucket>
              <bucket>&quot;Mike Kennedy&quot;</bucket>
              <bucket>&quot;Tiffany House&quot;</bucket>
              <bucket>&quot;Sean Wendt&quot;</bucket>
              <bucket>&quot;Luke Schmidt&quot;</bucket>
              <bucket>&quot;Randy Bradley&quot;</bucket>
              <bucket>&quot;Lynn Smith&quot;</bucket>
              <bucket>&quot;Bruce Geld&quot;</bucket>
              <bucket>&quot;Victor Preis&quot;</bucket>
              <bucket>&quot;Ken Brennan&quot;</bucket>
              <bucket>&quot;Barry Pond&quot;</bucket>
              <bucket>&quot;Toby Swindell&quot;</bucket>
              <bucket>&quot;Russell D&apos;Ascenzo&quot;</bucket>
              <bucket>&quot;Aimee Bixby&quot;</bucket>
              <bucket>&quot;Roy Collins&quot;</bucket>
              <bucket>&quot;Sung Shariari&quot;</bucket>
              <bucket>&quot;Jonathan Howell&quot;</bucket>
              <bucket>&quot;Jason Fortune-&quot;</bucket>
              <bucket>&quot;Rachel Payne&quot;</bucket>
              <bucket>&quot;Bryan Spruell&quot;</bucket>
              <bucket>&quot;Roy Französisch&quot;</bucket>
              <bucket>&quot;Eric Barreto&quot;</bucket>
              <bucket>&quot;Maureen Fritzler&quot;</bucket>
              <bucket>&quot;Eric Murdock&quot;</bucket>
              <bucket>&quot;Alyssa Crouse&quot;</bucket>
              <bucket>&quot;Evan Henry&quot;</bucket>
              <bucket>&quot;Mary O&apos;Rourke&quot;</bucket>
              <bucket>&quot;Alejandro Ballentine&quot;</bucket>
              <bucket>&quot;Katrina Bavinger&quot;</bucket>
              <bucket>&quot;Catherine Glotzbach&quot;</bucket>
              <bucket>&quot;Sonia Cooley&quot;</bucket>
              <bucket>&quot;Joni Blumstein&quot;</bucket>
              <bucket>&quot;Henia Zydlo&quot;</bucket>
              <bucket>&quot;Aaron Bergman&quot;</bucket>
              <bucket>&quot;Ryan Crowe&quot;</bucket>
              <bucket>&quot;Chad Sievert&quot;</bucket>
              <bucket>&quot;Harold Engle&quot;</bucket>
              <bucket>&quot;Sally Knutson&quot;</bucket>
              <bucket>&quot;Richard Eichhorn&quot;</bucket>
              <bucket>&quot;Jim Mitchum&quot;</bucket>
              <bucket>&quot;Jocasta Rupert&quot;</bucket>
              <bucket>&quot;Art Foster&quot;</bucket>
              <bucket>&quot;Julie Creighton&quot;</bucket>
              <bucket>&quot;Michael Stewart&quot;</bucket>
              <bucket>&quot;Vicky Freymann&quot;</bucket>
              <bucket>&quot;Vivek Gonzalez&quot;</bucket>
              <bucket>&quot;Charles Sheldon&quot;</bucket>
              <bucket>&quot;Todd Boyes&quot;</bucket>
              <bucket>&quot;Ann Steele&quot;</bucket>
              <bucket>&quot;Erica Hackney&quot;</bucket>
              <bucket>&quot;Thomas Brumley&quot;</bucket>
              <bucket>&quot;Alice McCarthy&quot;</bucket>
              <bucket>&quot;Brendan Murry&quot;</bucket>
              <bucket>&quot;David Kendrick&quot;</bucket>
              <bucket>&quot;Matthew Clasen&quot;</bucket>
              <bucket>&quot;Beth Fritzler&quot;</bucket>
              <bucket>&quot;Harry Greene&quot;</bucket>
              <bucket>&quot;Michael Granlund&quot;</bucket>
              <bucket>&quot;Muhammed MacIntyre&quot;</bucket>
              <bucket>&quot;Sandra Flanagan&quot;</bucket>
              <bucket>&quot;Steven Ward&quot;</bucket>
              <bucket>&quot;Liz Pelletier&quot;</bucket>
              <bucket>&quot;Dorris liebe&quot;</bucket>
              <bucket>&quot;Ivan Gibson&quot;</bucket>
              <bucket>&quot;Barry Blumstein&quot;</bucket>
              <bucket>&quot;Tracy Collins&quot;</bucket>
              <bucket>&quot;Michelle Lonsdale&quot;</bucket>
              <bucket>&quot;Ritsa Hightower&quot;</bucket>
              <bucket>&quot;Patrick Bzostek&quot;</bucket>
              <bucket>&quot;Angele Hood&quot;</bucket>
              <bucket>&quot;Henry MacAllister&quot;</bucket>
              <bucket>&quot;Patricia Hirasaki&quot;</bucket>
              <bucket>&quot;Pete Armstrong&quot;</bucket>
              <bucket>&quot;Jennifer Jackson&quot;</bucket>
              <bucket>&quot;Julia Dunbar&quot;</bucket>
              <bucket>&quot;Peter Bühler&quot;</bucket>
              <bucket>&quot;Eric Hoffmann&quot;</bucket>
              <bucket>&quot;Toby Ritter&quot;</bucket>
              <bucket>&quot;Alex Grayson&quot;</bucket>
              <bucket>&quot;Berenike Kampe&quot;</bucket>
              <bucket>&quot;Bryan Davis&quot;</bucket>
              <bucket>&quot;Anna Chung&quot;</bucket>
              <bucket>&quot;Anthony Witt&quot;</bucket>
              <bucket>&quot;Lori Olson&quot;</bucket>
              <bucket>&quot;Joy Bell-&quot;</bucket>
              <bucket>&quot;Carol Darley&quot;</bucket>
              <bucket>&quot;Mathew Reese&quot;</bucket>
              <bucket>&quot;Astrea Jones&quot;</bucket>
              <bucket>&quot;Ralph Ritter&quot;</bucket>
              <bucket>&quot;Shirley Schmidt&quot;</bucket>
              <bucket>&quot;Bobby Trafton&quot;</bucket>
              <bucket>&quot;Barbara Fisher&quot;</bucket>
              <bucket>&quot;Maria Zettner&quot;</bucket>
              <bucket>&quot;Denise Leinenbach&quot;</bucket>
              <bucket>&quot;Alan Shonely&quot;</bucket>
              <bucket>&quot;Brian Derr&quot;</bucket>
              <bucket>&quot;Neil Knudson&quot;</bucket>
              <bucket>&quot;Carlos Meador&quot;</bucket>
              <bucket>&quot;Chuck Sachs&quot;</bucket>
              <bucket>&quot;Cari Schnelling&quot;</bucket>
              <bucket>&quot;John Huston&quot;</bucket>
              <bucket>&quot;Rob Beeghly&quot;</bucket>
              <bucket>&quot;Andy Yotov&quot;</bucket>
              <bucket>&quot;Corey Roper&quot;</bucket>
              <bucket>&quot;MaryBeth Skach&quot;</bucket>
              <bucket>&quot;Joni Sundaresam&quot;</bucket>
              <bucket>&quot;Erin Creighton&quot;</bucket>
              <bucket>&quot;Khloe Miller&quot;</bucket>
              <bucket>&quot;Kelly Williams&quot;</bucket>
              <bucket>&quot;Tim Taslimi&quot;</bucket>
              <bucket>&quot;Shui Tom&quot;</bucket>
              <bucket>&quot;Vivek Grady&quot;</bucket>
              <bucket>&quot;Sonia Sunley&quot;</bucket>
              <bucket>&quot;Brad Thomas&quot;</bucket>
              <bucket>&quot;Mark Haberlin&quot;</bucket>
              <bucket>&quot;Barry Weirich&quot;</bucket>
              <bucket>&quot;Joy Daniels&quot;</bucket>
              <bucket>&quot;Jason Klamczynski&quot;</bucket>
              <bucket>&quot;Vivian Mathis&quot;</bucket>
              <bucket>&quot;Neil Französisch&quot;</bucket>
              <bucket>&quot;Melanie Seite&quot;</bucket>
              <bucket>&quot;Lycoris Saunders&quot;</bucket>
              <bucket>&quot;Aleksandra Gannaway&quot;</bucket>
              <bucket>&quot;Evan Minnotte&quot;</bucket>
              <bucket>&quot;Heather Jas&quot;</bucket>
              <bucket>&quot;Don Weiss&quot;</bucket>
              <bucket>&quot;Larry Tron&quot;</bucket>
              <bucket>&quot;Brendan Dodson&quot;</bucket>
              <bucket>&quot;Lisa Hazard&quot;</bucket>
              <bucket>&quot;Jennifer Halladay&quot;</bucket>
              <bucket>&quot;Jill Matthias&quot;</bucket>
              <bucket>&quot;Chuck Magee&quot;</bucket>
              <bucket>&quot;Larry Hughes&quot;</bucket>
              <bucket>&quot;Sung Chung&quot;</bucket>
              <bucket>&quot;Stuart Calhoun&quot;</bucket>
              <bucket>&quot;Nicole Brennan&quot;</bucket>
              <bucket>&quot;Bart Folk&quot;</bucket>
              <bucket>&quot;Dorothy Dickinson&quot;</bucket>
              <bucket>&quot;Brad Norvell&quot;</bucket>
              <bucket>&quot;Andrew Roberts&quot;</bucket>
              <bucket>&quot;Harold Dahlen&quot;</bucket>
              <bucket>&quot;Sally Matthias&quot;</bucket>
              <bucket>&quot;Paul Lucas&quot;</bucket>
              <bucket>&quot;Guy Phonely&quot;</bucket>
              <bucket>&quot;Erin Mull&quot;</bucket>
              <bucket>&quot;Guy Thornton&quot;</bucket>
              <bucket>&quot;Robert Barroso&quot;</bucket>
              <bucket>&quot;Hilary Holden&quot;</bucket>
              <bucket>&quot;Allen Goldenen&quot;</bucket>
              <bucket>&quot;Joel Jenkins&quot;</bucket>
              <bucket>&quot;Anthony Garverick&quot;</bucket>
              <bucket>&quot;Muhammed Lee&quot;</bucket>
              <bucket>&quot;Anthony O&apos;Donnell&quot;</bucket>
              <bucket>&quot;Pete Takahito&quot;</bucket>
              <bucket>&quot;Dianna Arnett&quot;</bucket>
              <bucket>&quot;Michael Oakman&quot;</bucket>
              <bucket>&quot;Greg Hansen&quot;</bucket>
              <bucket>&quot;Phillip Breyer&quot;</bucket>
              <bucket>&quot;Bobby Odegard&quot;</bucket>
              <bucket>&quot;Ed Ludwig&quot;</bucket>
              <bucket>&quot;Clay Cheatham&quot;</bucket>
              <bucket>&quot;Roland Murray&quot;</bucket>
              <bucket>&quot;Karen Seio&quot;</bucket>
              <bucket>&quot;Anemone Ratner&quot;</bucket>
              <bucket>&quot;Fred Wasserman&quot;</bucket>
              <bucket>&quot;Jasper Cacioppo&quot;</bucket>
              <bucket>&quot;Adrian Shami&quot;</bucket>
              <bucket>&quot;Larry Blacks&quot;</bucket>
              <bucket>&quot;Ricardo Emerson&quot;</bucket>
              <bucket>&quot;Susan Gilcrest&quot;</bucket>
              <bucket>&quot;Roy Skaria&quot;</bucket>
              <bucket>&quot;Mitch Gastineau&quot;</bucket>
              <bucket>&quot;Carl Jackson&quot;</bucket>
              <bucket>&quot;Lela Donovan&quot;</bucket>
              <bucket>&quot;Thais Sissman&quot;</bucket>
              <bucket>%all%</bucket>
            </dictionary>
          </manual-sort>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Profit:qk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]</rows>
        <cols>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]</cols>
      </table>
      <simple-id uuid='{0391A79E-FA99-43AA-82AB-B76845D41E1F}' />
    </worksheet>
    <worksheet name='Sales vs Profit; clusters by Customer Name'>
      <table>
        <view>
          <datasources>
            <datasource caption='Sample - Superstore' name='dataengine.42019.618651678240' />
          </datasources>
          <datasource-dependencies datasource='dataengine.42019.618651678240'>
            <column auto-hidden='true' caption='Clusters' datatype='integer' hidden='true' is-adhoc-cluster='true' name='[AdhocCluster:1]' parent-model='[AnalyticModel:{fff80ca6-4326-4b01-8d0a-a6ea8bd78fd9}]' role='dimension' type='ordinal'>
              <aliases>
                <alias key='-1' value='Cluster Outliers' />
                <alias key='0' value='Not Clustered' />
                <alias key='1' value='Cluster 1' />
                <alias key='2' value='Cluster 2' />
                <alias key='3' value='Cluster 3' />
                <alias key='4' value='Cluster 4' />
                <alias key='5' value='Cluster 5' />
                <alias key='6' value='Cluster 6' />
                <alias key='7' value='Cluster 7' />
                <alias key='8' value='Cluster 8' />
                <alias key='9' value='Cluster 9' />
                <alias key='10' value='Cluster 10' />
                <alias key='11' value='Cluster 11' />
                <alias key='12' value='Cluster 12' />
                <alias key='13' value='Cluster 13' />
                <alias key='14' value='Cluster 14' />
                <alias key='15' value='Cluster 15' />
                <alias key='16' value='Cluster 16' />
                <alias key='17' value='Cluster 17' />
                <alias key='18' value='Cluster 18' />
                <alias key='19' value='Cluster 19' />
                <alias key='20' value='Cluster 20' />
                <alias key='21' value='Cluster 21' />
                <alias key='22' value='Cluster 22' />
                <alias key='23' value='Cluster 23' />
                <alias key='24' value='Cluster 24' />
                <alias key='25' value='Cluster 25' />
                <alias key='26' value='Cluster 26' />
                <alias key='27' value='Cluster 27' />
                <alias key='28' value='Cluster 28' />
                <alias key='29' value='Cluster 29' />
                <alias key='30' value='Cluster 30' />
                <alias key='31' value='Cluster 31' />
                <alias key='32' value='Cluster 32' />
                <alias key='33' value='Cluster 33' />
                <alias key='34' value='Cluster 34' />
                <alias key='35' value='Cluster 35' />
                <alias key='36' value='Cluster 36' />
                <alias key='37' value='Cluster 37' />
                <alias key='38' value='Cluster 38' />
                <alias key='39' value='Cluster 39' />
                <alias key='40' value='Cluster 40' />
                <alias key='41' value='Cluster 41' />
                <alias key='42' value='Cluster 42' />
                <alias key='43' value='Cluster 43' />
                <alias key='44' value='Cluster 44' />
                <alias key='45' value='Cluster 45' />
                <alias key='46' value='Cluster 46' />
                <alias key='47' value='Cluster 47' />
                <alias key='48' value='Cluster 48' />
                <alias key='49' value='Cluster 49' />
                <alias key='50' value='Cluster 50' />
              </aliases>
            </column>
            <column datatype='string' name='[Customer Name]' role='dimension' type='nominal' />
            <column datatype='string' name='[Order ID]' role='dimension' type='nominal' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Profit]' role='measure' type='quantitative' />
            <column datatype='real' default-format='c&quot;$&quot;#,##0;(&quot;$&quot;#,##0)' name='[Sales]' role='measure' type='quantitative' />
            <column datatype='string' name='[Segment]' role='dimension' type='nominal' />
            <column-instance column='[Segment]' derivation='Attribute' name='[attr:Segment:nk]' pivot='key' type='nominal' />
            <column-instance column='[AdhocCluster:1]' derivation='None' is-adhoc-cluster='true' name='[none:AdhocCluster:1:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Customer Name]' derivation='None' name='[none:Customer Name:nk]' pivot='key' type='nominal' />
            <column-instance column='[Order ID]' derivation='None' name='[none:Order ID:nk]' pivot='key' type='nominal' />
            <column-instance column='[Profit]' derivation='Sum' name='[sum:Profit:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Sales]' derivation='Sum' name='[sum:Sales:qk]' pivot='key' type='quantitative' />
            <style>
              <style-rule element='mark'>
                <encoding attr='color' field='[none:AdhocCluster:1:ok]' type='palette'>
                  <map to='#4e79a7'>
                    <bucket>1</bucket>
                  </map>
                  <map to='#59a14f'>
                    <bucket>5</bucket>
                  </map>
                  <map to='#76b7b2'>
                    <bucket>4</bucket>
                  </map>
                  <map to='#e15759'>
                    <bucket>3</bucket>
                  </map>
                  <map to='#edc948'>
                    <bucket>0</bucket>
                  </map>
                  <map to='#f28e2b'>
                    <bucket>2</bucket>
                  </map>
                </encoding>
              </style-rule>
            </style>
          </datasource-dependencies>
          <filter class='categorical' column='[dataengine.42019.618651678240].[none:Order ID:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-100762&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-102988&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-103310&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-103492&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-105984&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-107818&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-108147&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-108609&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-110408&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-110786&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-114251&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-114321&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-115812&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-116246&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-116666&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-116904&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-117639&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-119151&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-119375&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-120474&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-120768&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-122931&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-124247&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-124688&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-124856&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-125731&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-125829&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-125997&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-126361&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-126403&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-126683&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-126760&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-127131&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-127299&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-127614&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-128209&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-128524&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-131387&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-131450&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-131926&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-132612&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-133592&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-134313&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-136567&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-139892&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-140858&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-141313&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-142769&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-143917&quot;' />
              <groupfilter from='&quot;CA-2016-144414&quot;' function='range' level='[none:Order ID:nk]' to='&quot;CA-2016-144666&quot;' />
              <groupfilter from='&quot;CA-2016-145317&quot;' function='range' level='[none:Order ID:nk]' to='&quot;CA-2016-145541&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-150245&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-150798&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-151162&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-151330&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-151995&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-152268&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-153850&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-154599&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-154627&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-154893&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-156349&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-157147&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-163223&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-163748&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-164973&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-165309&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-165764&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-166744&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-166954&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-167199&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-168494&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2016-169726&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-100146&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-101889&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-102281&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-102491&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-102582&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-104626&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-105627&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-107678&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-109575&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-110863&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-111038&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-111514&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-111829&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-113145&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-113404&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-113628&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-114069&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-114811&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-115567&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-116092&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-116638&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-117086&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-120677&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-120782&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-121188&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-121720&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-121783&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-121797&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-123113&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-124450&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-124891&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-125976&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-126557&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-126725&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-130659&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-130785&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-131338&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-132486&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-134719&quot;' />
              <groupfilter from='&quot;CA-2017-135580&quot;' function='range' level='[none:Order ID:nk]' to='&quot;CA-2017-135685&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-137113&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-137974&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-138009&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-139731&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-140984&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-141243&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-141565&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-141593&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-142601&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-142944&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-144267&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-145352&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-146255&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-146262&quot;' />
              <groupfilter from='&quot;CA-2017-146486&quot;' function='range' level='[none:Order ID:nk]' to='&quot;CA-2017-146675&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-147788&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-147830&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-149342&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-149846&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-150770&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-150875&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-153381&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-155306&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-155600&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-156482&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-157084&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-157770&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-158421&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-159534&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-160171&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-160227&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-162047&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-162782&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-164301&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-164777&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-164882&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-166947&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-167010&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-169397&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2017-169796&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-100300&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-101546&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-102162&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-103982&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-104157&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-105081&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-105207&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-105459&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-105732&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-106950&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-107104&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-107202&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-107783&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-108196&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-108987&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-109869&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-111213&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-111682&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-112123&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-112697&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-113243&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-113831&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-114489&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-114727&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-114867&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-114972&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-115917&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-116736&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-117121&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-118689&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-121370&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-122903&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-123540&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-124590&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-125087&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-125220&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-126732&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-127138&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-128594&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-128818&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-129630&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-129714&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-129868&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-130946&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-131289&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-131737&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-133711&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-133725&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-133935&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-134803&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-135265&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-135776&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-136301&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-138478&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-139269&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-139997&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-142335&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-142594&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-143714&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-143805&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-144764&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-145261&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-145583&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-145625&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-145919&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-145982&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-146913&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-146934&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-147137&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-147256&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-147375&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-147417&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-150350&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-152247&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-152555&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-153598&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-155530&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-155845&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-157280&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-157791&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-158099&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-158694&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-158841&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-159016&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-159891&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-160717&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-161746&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-162390&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-163167&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-163328&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-163804&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-165330&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-165848&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-168032&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-168354&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-169103&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-169663&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-169670&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2018-169838&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-101805&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-102204&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-102379&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-103212&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-103380&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-103877&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-105669&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-105914&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-107174&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-107517&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-109085&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-111556&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-111738&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-112333&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-112515&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-112753&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-113418&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-113670&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-115602&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-116680&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-116988&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-117212&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-117324&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-117457&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-118724&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-118892&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-119284&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-119452&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-119809&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-120376&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-121027&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-121559&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-121790&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-121853&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-122490&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-122504&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-123085&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-123372&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-123491&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-123967&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-127180&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-127397&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-127432&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-128363&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-128965&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-129021&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-131254&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-131807&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-131828&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-133263&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-133865&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-134845&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-135909&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-136308&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-137596&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-138289&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-138975&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-140186&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-140963&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-141439&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-141733&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-141789&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-141929&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-142090&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-142342&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-143063&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-143112&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-143567&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-143686&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-144491&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-145219&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-145884&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-146535&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-146983&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-147760&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-148446&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-149048&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-149559&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-149881&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-150091&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-150910&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-151799&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-152912&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-152975&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-153045&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-153822&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-154074&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-155880&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-156776&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-156958&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-157854&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-157987&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-158379&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-158729&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-159100&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-159366&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-160885&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-161956&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-162015&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-162691&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-163006&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-165323&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-166093&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-166709&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-167395&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-167752&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-168109&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-168858&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;CA-2019-169327&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2016-106992&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2016-119137&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2016-131275&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2016-135972&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2016-138247&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2016-140452&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2016-147627&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2016-148838&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2016-164406&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2017-100377&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2017-122784&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2017-126214&quot;' />
              <groupfilter from='&quot;US-2017-126977&quot;' function='range' level='[none:Order ID:nk]' to='&quot;US-2017-128587&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2017-134558&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2017-136987&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2017-150630&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2017-160857&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2017-163279&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2017-163825&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-100461&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-102239&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-105578&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-107440&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-108504&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-113677&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-114013&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-116729&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-121013&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-126452&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-131611&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-135720&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-140158&quot;' />
              <groupfilter from='&quot;US-2018-143448&quot;' function='range' level='[none:Order ID:nk]' to='&quot;US-2018-144057&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-152051&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-157490&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-160528&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-163881&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-164196&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2018-165505&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-100930&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-102183&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-105935&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-105998&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-107888&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-109253&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-109316&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-110576&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-112347&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-117723&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-118087&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-118941&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-120390&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-122714&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-133200&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-134481&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-135013&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-141677&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-142188&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-147886&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-155425&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-158526&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-161935&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-162558&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-163300&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-167318&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-167402&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-167920&quot;' />
              <groupfilter function='member' level='[none:Order ID:nk]' member='&quot;US-2019-168116&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[dataengine.42019.618651678240].[none:Order ID:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[dataengine.42019.618651678240].[none:AdhocCluster:1:ok]' />
              <lod column='[dataengine.42019.618651678240].[none:Customer Name:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[dataengine.42019.618651678240].[sum:Profit:qk]</rows>
        <cols>[dataengine.42019.618651678240].[sum:Sales:qk]</cols>
      </table>
      <simple-id uuid='{853BE1DB-B043-4D87-804F-9025F369B275}' />
    </worksheet>
  </worksheets>
  <windows source-height='72'>
    <window class='worksheet' name='Sales CustomerName by Profit bar (original)'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Profit:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{968F0CF8-A112-4A73-90E3-A4EAEFA87CF4}' />
    </window>
    <window class='worksheet' name='Sales CustomerName by Profit Ratio, Sales bar'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[usr:Calculation_3626875487110770688:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <axis>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]</axis>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]</field>
            <field>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[usr:Calculation_3626875487110770688:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{94147090-54AF-422A-A19B-5FE3E3CA7ACD}' />
    </window>
    <window class='worksheet' name='MeasureNames CustomerName by Profit Ratio, Sales table'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]</field>
            <field>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[usr:Calculation_3626875487110770688:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9C92850B-0305-451F-B904-8DD152A5E43E}' />
    </window>
    <window class='worksheet' name='MeasureNames Cat, SubCat by Profit Ratio, Sales table'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Category:nk]</field>
            <field>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Customer Name:nk]</field>
            <field>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:Sub-Category:nk]</field>
            <field>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[usr:Calculation_3626875487110770688:qk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{CB306CF6-222B-42B6-866A-E05CF308EB80}' />
    </window>
    <window class='worksheet' name='Mon vs Cat Yr by Sales heat'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:City:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[sum:Sales:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:City:nk]</field>
            <field>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[yr:Order Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5D4F0F10-9483-411C-89F9-B4E3AEC7E270}' />
    </window>
    <window class='worksheet' name='OrderDate vs Cat by City, Sales'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card mode='dropdown' param='[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:City:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[none:City:nk]</field>
            <field>[federated.1dsfepz0bnjcff1cg85u60g2ae1k].[yr:Order Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F087B98E-52A1-4E2C-8656-EE12C7A3488B}' />
    </window>
    <window class='worksheet' name='Cat vs No of Records by SubCat'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[dataengine.42019.618651678240].[none:Sub-Category:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-height' />
        <highlight>
          <color-one-way>
            <field>[dataengine.42019.618651678240].[none:Category:nk]</field>
            <field>[dataengine.42019.618651678240].[none:Order ID:nk]</field>
            <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
            <field>[dataengine.42019.618651678240].[yr:Order Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{400BECE2-913A-4A49-B72D-0624ABA97C0A}' />
    </window>
    <window class='worksheet' name='Month vs Cat, Sales by Cat. Forecast'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[dataengine.42019.618651678240].[none:Category:nk]&#10;[dataengine.42019.618651678240].[none:Forecast Indicator:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[dataengine.42019.618651678240].[none:Category:nk]</field>
            <field>[dataengine.42019.618651678240].[none:Forecast Indicator:nk]</field>
            <field>[dataengine.42019.618651678240].[tmn:Order Date:qk]</field>
            <field>[dataengine.42019.618651678240].[yr:Order Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{9413F16D-A9E1-4196-8E07-6232C21CE5E5}' />
    </window>
    <window class='worksheet' name='Profit vs Sales by Cat, PrName scatter'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[dataengine.42019.618651678240].[none:Category:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[dataengine.42019.618651678240].[none:Category:nk]</field>
            <field>[dataengine.42019.618651678240].[none:Product Name:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{216806E0-831A-464B-98AB-9E7280DD9DFC}' />
    </window>
    <window class='worksheet' name='Sales vs Profit; clusters by Customer Name'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[dataengine.42019.618651678240].[none:AdhocCluster:1:ok]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[dataengine.42019.618651678240].[Customer Name (clusters)]</field>
            <field>[dataengine.42019.618651678240].[none:AdhocCluster:1:ok]</field>
            <field>[dataengine.42019.618651678240].[none:Customer Name:nk]</field>
            <field>[dataengine.42019.618651678240].[none:Order ID:nk]</field>
            <field>[dataengine.42019.618651678240].[none:Region:nk]</field>
            <field>[dataengine.42019.618651678240].[none:Segment:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D8A8127A-AABD-4E98-9217-81FE0A3A3907}' />
    </window>
    <window class='worksheet' name='Furni: Profit Sales Disc Quant by Cat, Order ID'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[dataengine.42019.618651678240].[none:Category:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[dataengine.42019.618651678240].[none:Category:nk]</field>
            <field>[dataengine.42019.618651678240].[none:Order ID:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{E2E36BED-360E-4A53-9312-556AE73E2C02}' />
    </window>
    <window class='worksheet' name='Chairs: Profit Sales Disc Quant by SubCat, Order ID '>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[dataengine.42019.618651678240].[none:Sub-Category:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[dataengine.42019.618651678240].[none:Category:nk]</field>
            <field>[dataengine.42019.618651678240].[none:Order ID:nk]</field>
            <field>[dataengine.42019.618651678240].[none:Sub-Category:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{8049A077-57EA-48E4-8BF0-16AAB7D991E4}' />
    </window>
    <window class='worksheet' maximized='true' name='City by Cluster'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[dataengine.42019.618651678240].[City, Country/Region, State (clusters)]' type='filter' />
            <card pane-specification-id='0' param='[dataengine.42019.618651678240].[none:AdhocCluster:2:ok]' type='color' />
            <card pane-specification-id='0' param='[dataengine.42019.618651678240].[sum:Profit:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[dataengine.42019.618651678240].[City, Country/Region, State (clusters)]</field>
            <field>[dataengine.42019.618651678240].[none:AdhocCluster:2:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{988DE920-64FC-41DF-862A-E9CCDD978E36}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Cat vs No of Records by SubCat' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAASsUlEQVR4nO3da28c133H8e+Zmb1xl3shl/eb7lUsG01apG6dukgcF0VRIH1SoEDRB3nU
      1+FX0BfRh32UPCiKIEEN10Cb1JYcOb7IkiXelnvjcq/c+8ycPqC5lsSlxF1R3Cjn/wGEFcn5
      zzk7u7/Z4XDOHKW11ghhKGvSHRBikiQAwmgSAGE0CYAwmgRAGE0CIIw2sQCMe/ZV6obXSN3w
      uueZWAB83x+rzvM8qXuK1nrs7XmRr8OL9HGcAJylj3IIJIwmARBGkwAIo0kAhNEkAMJozqQa
      9nwfV49+VsB1PTxGPyNwss4H9fz1uJ6Hp9yzN6TBci0810M7z39+ruWiH+uX53nYvg1AwA4S
      sANnb1uMbGIBuFfM8x/3PptU89ixTexI/vzX27G5/PPLZ17+Py/9knqoMfRn//i9f+bv3/iH
      8+qaGEIOgYTRJADCaBIAYTQJgDCaBEAYTQIgjCYBEEaTAAijSQCE0SQAwmgSAGE0CYAwmgRA
      GE0CIIwmARBGkwAIo0kAhNEkAMJoYweg3++feuctz/PGvjXgMFpr3H5/cIs875v/97s9fM/H
      67vn2t5xm91WD98/ehx87Y02jllZCgA7cDT61HLsE8sE7SCWsgjaQWxlE3JCWEr2TRdh7DHB
      d+7c4fr169i2jdaaQqFAKBTC931CoRDZbJaNjQ1isRiNRoN6vU40GsXzPNbW1kZqy3c9fvur
      9/mTv3kXtObOL/+LW2+/xe8++JBbf/kWX/36I7777o+wnfMb4lwr1Hnwf1vYtkUkHiY8Hcbr
      HwX+2vcvnW0lCi7/+U0axSrKsvD6LuHpCPkvM3h9d7DQ5dmrxMNJYsEYn+Y+IR2dIxKInttz
      Ead7oU8A13UpFosUi0WazSbdbhfP82g2m8TjccLhMLVaja2tLRzH4dGjR5RKpZHbsgMO6dUV
      AJRlMbe2ihMIsHj5EqXdDOm11XGfxql8zycSC9Fr91m6sYDX92jXO6y/vnLmdcysz4PWTKVi
      1HJl/L5H97BDdCb22FKaWGiarfJDOm6blcQaPbeH5/fP/TmJk8beZd68eZN0Ok2pVCKZTJJO
      p9Fao5Q6OkzxPDqdDtVqlaWlJdLpNLZto5Qaua1+r0e31SJz7yumEnG6rRaVfIF+t8fs8hLF
      nR3qpQNSiwvjPp0TIvEIoakQC1fmyH+9T3othef6tBttgpGz3aqkvF2kWaqjLEViMUW9WGU6
      naBdaw2WsZR1tN2wqLYr1Do1UpEUlXbl3J6LOJ2a1CyRn+7tjnxbFO37oNRYIXraH9JtUY7v
      nmzbJ3+/eJbju0qPU+d5Hs6Ih5ye52FZ1sivn+d5KKWwrNEOWFzXfW4fJ3ZfoHGoETeAEM8j
      7yhhNAmAMJoEQBhNAiCMJgEQRpMACKNJAITRJADCaBIAYTQJgDCaBEAYTQIgjCYBEEaTAAij
      SQCE0SQAwmgSAGG0iY0Im4vFeOvS1ZHrfN8feWjcsDorOIMKDB+K+GSdxrLOPoTPci1SP0yd
      vZ+pKbp2d2g/b8zfPHO7YjwTGxPsed7IY1HhbOM8TauTMcHDnWVbyiGQMJoEQBhNAiCMJgEQ
      RpMACKNJAITRJADCaBIAYTQJgDCaBEAYTQIgjCYBEEab3PwA7TLUd0YuU74PY1wNelF1jw5c
      yk0fz/exx2hvnDqtNRqwRrzITAP6qatdIwRYUlPPrR3nqlztH80gxFPdjEa+RlmnTwl1VAeM
      +Px8z8e3j/uo2F742xPLTC4A9Qx89fORy0a/fvRi6z663eLu3qs7v9cSUX5knf+ca8+ysvhv
      OM7hS23Dx+J/3v7Bie/LIZAwmgRAGE0CIIwmARBGkwAIo0kAhNEkAMJoEgBhNAmAMJoEQBhN
      AiCMJgEQRpMACKNJAITRJADCaBIAYTQJgDCaBEAYbeiQyGq1SqlUYn19nWw2i1KKWCzG7Ozs
      E8s1m03y+TwbGxtDJyKoVqsopZienh5rVpdxeL7P7x4V+e61RTo9l19/keG1jTm+2N7nOxtp
      vto94LWNOdKJ5497/X0wv7jIwf4+ACtr6/T7PQKBINVKhX6vRzAUpFatXni/VNAhkIjR269i
      T4UJphP0qw2C6STdYoXw4gzNh1k4p/lXtNZ8nusyFVS0exoUxIIWzZ7Pa0vhsdc7NADZbJa1
      tTVu375NMBikWq1y5coVqtUqjuNQLBZZXl6m3+/j+z65XI5oNEoul6PT6RCPx6nVasTjcUKh
      EOVymVKpRCKRIBaLsby8PHaHn8fzNTvFOt+9tsj9zAEoxUdfZfG15ovtEl/vlXFs65UJQCwW
      o1Gr0W63KRbyzC8soBTMpmcJRyIcNhqTCYBlEUhG6e1XCS/P4rW7oBRONETH9VABByvo4HfP
      Z3y0r+F+sUvf07x7M8avN1vsN1z+eDXyQusdulu2bZutrS3W1tbY2NjgypUrAPT7fZRSFAoF
      Op0OsViMUqlEuVxmc3OTZrOJ4zg0m02CwSBaa1zXpV6vUyqVcF2X/W/2Zi+LpRSe71NptNlY
      SOJ5PuGgw9WlFA+zFV7bmKPZeXUGrWsNoXCYUDjM2voG2UyGRr1BPJHEtm2SqZnJ9Mv3sUJB
      rEgQADsaJrycplc5JLSQwmt18HvuubVnKbi1FCZgKX5175A/XY+wGA+Qq73Yazn0E+DGjRto
      rQeHLel0Gjj6GAJYW1sDQCnFzMwMSim01hwcHDA7Ozt4PK7XWvPGG28MlnuZfF/z+qV5MqUG
      i6koq3NxVuem2SnU+Kcfv87efoPVuemX2ofzVKtWUEoxFY2yvfnom3m2FPe++Jxup4MTCEyk
      X8qy6OYOCM7EaW3ncWJT+L0+djiE1+lih0NHtzE5p9dbKcVUUPHjmzGqbQ/fhz+7FKHrvtj6
      hwZAKTV0IrNh3zt+kyulmJubAxg8DlvfqBOkjSoYsLm++u1ecS4ZBeA7G0d9evxnr4LywcGJ
      75Ue+xR1+5P5NPM7PXqd3uDrfuVoxk2v2Xni8TytpY4+bRKRcW9yc5KcBRJGkwAIo0kAhNEk
      AMJoEgBhNAmAMJoEQBhNAiCMJgEQRpMACKNJAITRJADCaBIAYTQJgDCaBEAYTQIgjCYBEEaT
      AAijKf2yB+mewuscYvcbo9d5HrY9+pC4i6qrtDWdvr7QfvraB83It57RWuNrH9v6tj0HixjP
      H2c8Vj9975s+PjksNhCooJT3jDqNApQ12nDaJ/uoqEWvnFhmcgEY8w3iuu7QexCZXOf7Plrr
      kben1hrf98eq8zxv5H4eDei3Rh4X7nkeSqmRA36WbSmHQMJoEgBhNAmAMJoEQBhNAiCMJgEQ
      RpMACKNJAITRJADCaBIAYTQJgDCaBEAYbfSrtc5JLrPLl7+9PZG2P817/Pe2fyFt/V2ix7/M
      dQdfV3WB//X+HYDv/fW/snj53QvphxhOPgGE0SQAwmgSAGE0CYAwmgRAGE0CIIwmARBGkwAI
      o0kAhNEkAMJoEgBhNAmAMJoEQBhNAiCMJgEQRpMACKNJAITRJADCaGcOQK/X4+uvv6ZQKDzx
      /Xq9PnT5Wq32Yj17yuPTGGitB/eof/pn502pb6dzsEacoEH8/jvzmOBAIIDWmkQiwSeffMLs
      7Cy1Wo1ut0sgECAWi9FsNkkkEjSbTRzHoVKp0G63iUQi1Ot1ZmZmsCyL5eXlkTpZqdb43eef
      81c/eItqrcann33OH12/xt3PPue1mzf5+uEjfvj2D0Z+8mfxF7fWcD0fx1bkDg5ZnYuzV2rw
      KFt5Ke2Ji3XmTwClFEop+v0+tVqNUqnEwsIC8XicqakpfN8nEonQbrcHM4C0220sy6JaraKU
      otVqUa1WR+5kKpkgmUgcBTAeJ5lI4DgOM8kUy4sLzKSSI6/zrBqtLrPxCKGAw0IqxmauwvLs
      9EtrT1yske4Ksby8TDgc5vLlyySTSSqVCouLi09MQ9Pr9Wi328Tjcfr9Pu12m0AgQDabZXV1
      lbm5uZE7Wa5UOGy2+OyLL1mYn+ew2WIvlycUCrJ/cMBhs0Wz1SI6NTXyup+n0erx5XYJx7aw
      LUU4FOCg3jr3dsRkjBSAqW/eYBsbGwAkEomhyyST3+6Rk8kknudx6dIltNYjz/MEMJNK8dab
      38d1PRzHZn4u/cTPF8YI1Vlt5Uf/xBKvjgu5L9A4k+EN4zjnsx4hjslpUGE0CYAwmgRAGE0C
      IIwmARBGkwAIo0kAhNEkAMJoEgBhNAmAMJoEQBhNAiCMJgEQRpMACKNJAITRJADCaBIAYbSJ
      zRQfjcVYu3x15Dpf+1hq9Nw+XmenNdPLZ5spXvsaNcbtUI7rXo94EHUH3w+xzoZ/NLJtKr42
      8nrF+VL6Zd5U5xk8zxtrqKTruk8Mwpc68H0frfXI21Nrje/7Y9V5njdyPz3Pw7KswV1DRqlT
      So08nvws21IOgYTRJADCaBIAYTQJgDCaBEAYTQLwB2LUMysvQmt9oe3By3t+r1wAxt0Qf+h1
      F2mcU67HLnK7nKVmYn8IG+ceoVI33IuEZpz2XoVtctY6+7333ntvrLWfg0wmQyAQIBAIPHO5
      VqvF1tYW0WiUTCZDNBplZ2eHZDJ56ovf6XRotVp0u13K5TKWZbG/v49lWZRKJaanh9/ivNfr
      cXh4SLfbJZvNEolEyOfzBAIBCoUC8Xh8aF0ul6Pdbg/+dbvdwXqazebgxsJPKxQKNBoNOp0O
      lcrRnAO1Wg3XdanX60Sj0RM1vu+zubmJZVmUy2WUUlSrVTzPo1KpoLUmFAoNbW9zcxOAcrlM
      p9Oh3W7T6/VoNBr0+33C4fDQOtd1qVarFItFIpEI2WyWYDBILpcjFAqd+gen/f19HMdha2uL
      qakpdnd3icVibG9vE4/Hh75Je70ejx49GiyfSCTY3t5+bl2tViOXy2HbNplMhqmpKTKZDOFw
      mL29vSdu2nxsYgHodDrUajUODg6ee8v07e1tgsEglUqFRCLB7du3WVlZ4fDwkFgsNrTmeN3V
      apVut0ulUsGyLLLZLLZtE41Gh75otVqN/f19qtUqiUSCQqGA4zjs7OwQDocJBoOnBnZnZ2fw
      hm80GrTbbQ4PD2m1Ws98jjs7O9TrddLpNPl8nl6vR7lcpt/vMzMzMzTk7Xabvb29QaBd16Vc
      LuN5HrVa7dT2Op0O+XyeSqXCwsICxWKRer0+CMFpdffv36fRaBCLxdjZ2cG2bXZ3d4lEIpRK
      JdLp9Imaw8NDPv74YyKRCK7rcnh4SDwe5+OPP2Z9fZ1arTZ0h5LP5+l2u3S73cGELEtLS9y5
      c4fV1VX29/dJpVIn6h4+fEg8HqdQKDA9PU2hUCAcDvPgwQOmp6exLOvEjmFivwMopc48tdHS
      0hKtVot6vY7ruliWNXg8TTweH6z/+PF4SiXfP/06oOMXZH19nd3dXXzfH9Qd/0l+mEePHnHj
      xo3B9E3H7T7+9TCbm5tcv36dK1eusLm5ie/7g/6d1s/jPbzneSeWPb4s4rS6YDCI53lcu3aN
      Bw8eDPr3rDrXdWk0GlQqFVzXRSk12BbH22aY4+m0wuEw4XCYXC53prpUKkUkEiGXyw1e58fr
      TnsN1tfXKRQKzM/PUywW6Xa7J+qfNrFrgbTWZLNZZmZmiEQiz1y20WhwcHDAysoKe3t7LC8v
      k8vlWF9fP3VjFItFms0m6XSaZrPJ9PT0YI/TaDRYWloaWlcqlajX6ySTSVqtFrOzsxwcHDAz
      M0OlUmFlZWVo3fb2NoFAgFAoNJhN5/jaF601s7OzQ+t2d3dRShEIBFBKEQ6HabfbhEIh+v3+
      0D3y8SFQOp2m1WoxPT1Ns9kc1Eaj0aGHeFprNjc3SaVSg0/P42uy+v0+wWBw6GHCcW273R7M
      DFQsFkmn05RKJebn50895Gq1jiYTyefzg53K6uoqmUyGjY2NoTuxdrs9eH13d3cHjysrK2Qy
      GdbX14f+El6pVJ54rRcWFsjn84P+rq+vn6iZWACE+H3wyp0GFeI8SQCE0SQAhqnVanz00Ufc
      v39/6M/v3r37zPpf/OIXuK7Lz372M7788svntve89U3axP4QJiajXq/zwQcfcOPGDTKZDEop
      isUixWKRVCpFq9Xi3r17NBoN5ufnefDgAT/96U95//336fV6FItF3nnnHba3t2m1WvzmN78h
      FovR7XZJp9M8fPiQ1dVVfN8f/B3mww8/5Cc/+cnQX0InTT4BDPTmm29y9+5d9vb22NraIh6P
      c/XqVVKpFKFQCN/3KZVKBAIBbt26xezsLL1eD9d1uXbtGo7jYNs2gUCAUqmE4zhoren1eoRC
      IdrtNm+//TaNRgPHcYjFYmxtbU36aQ8lZ4EM8/h5f9/3sSzriVORx+fNj98Wtm1jWRb9fh+t
      NY7jDP6Gc7ye4/Xatj0IgVKKXq83OMUaCoXGvqThZZIACKP9P2YxudLF46H3AAAAAElFTkSu
      QmCC
    </thumbnail>
    <thumbnail height='192' name='Chairs: Profit Sales Disc Quant by SubCat, Order ID ' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='City by Cluster' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Furni: Profit Sales Disc Quant by Cat, Order ID' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='MeasureNames Cat, SubCat by Profit Ratio, Sales table' width='192'>
      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
      rkJggg==
    </thumbnail>
    <thumbnail height='192' name='MeasureNames CustomerName by Profit Ratio, Sales table' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Mon vs Cat Yr by Sales heat' width='192'>
      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
      FXT7/PlZ2QAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Month vs Cat, Sales by Cat. Forecast' width='192'>
      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
    </thumbnail>
    <thumbnail height='113' name='OrderDate vs Cat by City, Sales' width='192'>
      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
      y7xm8hGtOgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Profit vs Sales by Cat, PrName scatter' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sales CustomerName by Profit Ratio, Sales bar' width='192'>
      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
      AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Sales CustomerName by Profit bar (original)' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sales vs Profit; clusters by Customer Name' width='192'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>
